
STSW-STLKT01-BLE_SampleApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000960  08008fc8  08008fc8  00018fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009928  08009928  00019928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800992c  0800992c  0001992c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000260  20000000  08009930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000027a0  20000260  08009b90  00020260  2**2
                  ALLOC
  7 .noinit       00000000  10000000  10000000  00020260  2**0
                  CONTENTS
  8 .bss2         00000000  20000260  20000260  00020260  2**0
                  CONTENTS
  9 ._user_heap_stack 00008800  20002a00  20002a00  00022a00  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 11 .debug_line   0001649f  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00048ac0  00000000  00000000  0003672f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008055  00000000  00000000  0007f1ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023e0  00000000  00000000  00087248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000da54  00000000  00000000  00089628  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002c48  00000000  00000000  00097080  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0001c6a0  00000000  00000000  00099cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000b6368  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000075e0  00000000  00000000  000b63e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000260 	.word	0x20000260
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008fb0 	.word	0x08008fb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000264 	.word	0x20000264
 80001cc:	08008fb0 	.word	0x08008fb0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000274:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000276:	e003      	b.n	8000280 <LoopCopyDataInit>

08000278 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800027a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800027c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800027e:	3104      	adds	r1, #4

08000280 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000280:	480b      	ldr	r0, [pc, #44]	; (80002b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000284:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000286:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000288:	d3f6      	bcc.n	8000278 <CopyDataInit>
	ldr	r2, =_sbss
 800028a:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800028c:	e002      	b.n	8000294 <LoopFillZerobss>

0800028e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800028e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000290:	f842 3b04 	str.w	r3, [r2], #4

08000294 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <LoopForever+0x16>)
	cmp	r2, r3
 8000296:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000298:	d3f9      	bcc.n	800028e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800029a:	f002 fd87 	bl	8002dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800029e:	f007 fe49 	bl	8007f34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002a2:	f000 fa9f 	bl	80007e4 <main>

080002a6 <LoopForever>:

LoopForever:
    b LoopForever
 80002a6:	e7fe      	b.n	80002a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002a8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80002ac:	08009930 	.word	0x08009930
	ldr	r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80002b4:	20000260 	.word	0x20000260
	ldr	r2, =_sbss
 80002b8:	20000260 	.word	0x20000260
	ldr	r3, = _ebss
 80002bc:	20002a00 	.word	0x20002a00

080002c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80002c0:	e7fe      	b.n	80002c0 <ADC1_2_IRQHandler>
	...

080002c4 <_sbrk>:




caddr_t _sbrk(int incr)
{
 80002c4:	b508      	push	{r3, lr}
	extern char end /*asm("end")*/;
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 80002c6:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <_sbrk+0x34>)
 80002c8:	6819      	ldr	r1, [r3, #0]
{
 80002ca:	4602      	mov	r2, r0
	if (heap_end == 0)
 80002cc:	b909      	cbnz	r1, 80002d2 <_sbrk+0xe>
		heap_end = &end;
 80002ce:	490b      	ldr	r1, [pc, #44]	; (80002fc <_sbrk+0x38>)
 80002d0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 80002d2:	490b      	ldr	r1, [pc, #44]	; (8000300 <_sbrk+0x3c>)
	prev_heap_end = heap_end;
 80002d4:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 80002d6:	6809      	ldr	r1, [r1, #0]
 80002d8:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 80002da:	4402      	add	r2, r0
	min_stack_ptr -= MAX_STACK_SIZE;
 80002dc:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
	if (heap_end + incr > min_stack_ptr)
 80002e0:	428a      	cmp	r2, r1
 80002e2:	d906      	bls.n	80002f2 <_sbrk+0x2e>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80002e4:	f007 fc94 	bl	8007c10 <__errno>
 80002e8:	230c      	movs	r3, #12
 80002ea:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80002ec:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80002f0:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80002f2:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80002f4:	e7fc      	b.n	80002f0 <_sbrk+0x2c>
 80002f6:	bf00      	nop
 80002f8:	2000027c 	.word	0x2000027c
 80002fc:	20002a00 	.word	0x20002a00
 8000300:	e000ed08 	.word	0xe000ed08

08000304 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 8000304:	b570      	push	{r4, r5, r6, lr}
 8000306:	460e      	mov	r6, r1
 8000308:	4615      	mov	r5, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800030a:	460c      	mov	r4, r1
 800030c:	1ba3      	subs	r3, r4, r6
 800030e:	429d      	cmp	r5, r3
 8000310:	dc01      	bgt.n	8000316 <_write+0x12>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 8000312:	4628      	mov	r0, r5
 8000314:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 8000316:	f814 0b01 	ldrb.w	r0, [r4], #1
 800031a:	f3af 8000 	nop.w
 800031e:	e7f5      	b.n	800030c <_write+0x8>

08000320 <_close>:

int _close(int file)
{
	return -1;
}
 8000320:	f04f 30ff 	mov.w	r0, #4294967295
 8000324:	4770      	bx	lr

08000326 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800032a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800032c:	2000      	movs	r0, #0
 800032e:	4770      	bx	lr

08000330 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000330:	2001      	movs	r0, #1
 8000332:	4770      	bx	lr

08000334 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000334:	2000      	movs	r0, #0
 8000336:	4770      	bx	lr

08000338 <_read>:

int _read(int file, char *ptr, int len)
{
 8000338:	b510      	push	{r4, lr}
 800033a:	460c      	mov	r4, r1
	/* scanf calls _read() with len=1024, so eat one character at time */
	*ptr = __io_getchar();
 800033c:	f3af 8000 	nop.w
 8000340:	7020      	strb	r0, [r4, #0]
	return 1;
}
 8000342:	2001      	movs	r0, #1
 8000344:	bd10      	pop	{r4, pc}
	...

08000348 <InitTargetPlatform>:
  * @brief  Initialize all the Target platform's Features
  * @param  TargetType_t BoardType Nucleo/BlueCoin/SensorTile
  * @retval None
  */
void InitTargetPlatform(TargetType_t BoardType)
{
 8000348:	b530      	push	{r4, r5, lr}
  TargetBoardFeatures.BoardType = BoardType;
 800034a:	4c53      	ldr	r4, [pc, #332]	; (8000498 <InitTargetPlatform+0x150>)
{
 800034c:	b0c3      	sub	sp, #268	; 0x10c
  TargetBoardFeatures.BoardType = BoardType;
 800034e:	7020      	strb	r0, [r4, #0]

#ifdef ENABLE_USB_DEBUG
  /* enable USB power on Pwrctrl CR2 register */
  HAL_PWREx_EnableVddUSB();
 8000350:	f004 fa3a 	bl	80047c8 <HAL_PWREx_EnableVddUSB>

  /* Configure the CDC */
  /* Init Device Library */
  USBD_Init(&USBD_Device, &VCP_Desc, 0);
 8000354:	2200      	movs	r2, #0
 8000356:	4951      	ldr	r1, [pc, #324]	; (800049c <InitTargetPlatform+0x154>)
 8000358:	4851      	ldr	r0, [pc, #324]	; (80004a0 <InitTargetPlatform+0x158>)
 800035a:	f006 fb9d 	bl	8006a98 <USBD_Init>
  /* Add Supported Class */
  USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);
 800035e:	4951      	ldr	r1, [pc, #324]	; (80004a4 <InitTargetPlatform+0x15c>)
 8000360:	484f      	ldr	r0, [pc, #316]	; (80004a0 <InitTargetPlatform+0x158>)
 8000362:	f006 fbae 	bl	8006ac2 <USBD_RegisterClass>
  /* Add Interface callbacks for AUDIO and CDC Class */
  USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops);
 8000366:	4950      	ldr	r1, [pc, #320]	; (80004a8 <InitTargetPlatform+0x160>)
 8000368:	484d      	ldr	r0, [pc, #308]	; (80004a0 <InitTargetPlatform+0x158>)
 800036a:	f006 fb67 	bl	8006a3c <USBD_CDC_RegisterInterface>
  /* Start Device Process */
  USBD_Start(&USBD_Device);
 800036e:	484c      	ldr	r0, [pc, #304]	; (80004a0 <InitTargetPlatform+0x158>)
 8000370:	f006 fbae 	bl	8006ad0 <USBD_Start>
  /* 10 seconds ... for having time to open the Terminal
   * for looking the MOTENV1 Initialization phase */
  HAL_Delay(10000);
 8000374:	f242 7010 	movw	r0, #10000	; 0x2710
 8000378:	f000 fa24 	bl	80007c4 <HAL_Delay>
#endif /* ENABLE_USB_DEBUG */
  
  /* Initialize LED */
  BSP_LED_Init( LED1 );
 800037c:	2000      	movs	r0, #0
 800037e:	f002 f85d 	bl	800243c <BSP_LED_Init>

  STLBLE_PRINTF("\r\nSTMicroelectronics %s:\r\n"
 8000382:	2331      	movs	r3, #49	; 0x31
 8000384:	2230      	movs	r2, #48	; 0x30
 8000386:	e9cd 3200 	strd	r3, r2, [sp]
 800038a:	4948      	ldr	r1, [pc, #288]	; (80004ac <InitTargetPlatform+0x164>)
 800038c:	4a48      	ldr	r2, [pc, #288]	; (80004b0 <InitTargetPlatform+0x168>)
 800038e:	2332      	movs	r3, #50	; 0x32
 8000390:	a802      	add	r0, sp, #8
 8000392:	f007 ff65 	bl	8008260 <siprintf>
 8000396:	213c      	movs	r1, #60	; 0x3c
 8000398:	a802      	add	r0, sp, #8
 800039a:	f001 f8f5 	bl	8001588 <CDC_Fill_Buffer>
          "\r\n",
          STLBLE_PACKAGENAME,
          STLBLE_VERSION_MAJOR,STLBLE_VERSION_MINOR,STLBLE_VERSION_PATCH);

  /* Reset all the Target's Features */
  memset(&TargetBoardFeatures, 0, sizeof(TargetFeatures_t));
 800039e:	2100      	movs	r1, #0
 80003a0:	2234      	movs	r2, #52	; 0x34
 80003a2:	4620      	mov	r0, r4
 80003a4:	f007 fe1f 	bl	8007fe6 <memset>
 * @retval None
 */
static void Init_MEM1_Sensors(void)
{
  /* Humidity Temperature1 */
  if(BSP_ENV_SENSOR_Init(HTS221_0, ENV_HUMIDITY|ENV_TEMPERATURE)==BSP_ERROR_NONE)
 80003a8:	2105      	movs	r1, #5
 80003aa:	2000      	movs	r0, #0
 80003ac:	f002 fb66 	bl	8002a7c <BSP_ENV_SENSOR_Init>
 80003b0:	b9a8      	cbnz	r0, 80003de <InitTargetPlatform+0x96>
  {
    STLBLE_PRINTF("OK Humidity Sensor\n\r");
 80003b2:	4940      	ldr	r1, [pc, #256]	; (80004b4 <InitTargetPlatform+0x16c>)
 80003b4:	a802      	add	r0, sp, #8
 80003b6:	f007 ffc5 	bl	8008344 <strcpy>
 80003ba:	2114      	movs	r1, #20
 80003bc:	a802      	add	r0, sp, #8
 80003be:	f001 f8e3 	bl	8001588 <CDC_Fill_Buffer>
    TargetBoardFeatures.HandleHumSensor=1;
 80003c2:	2501      	movs	r5, #1

    STLBLE_PRINTF("OK Temperature Sensor1\n\r");
 80003c4:	493c      	ldr	r1, [pc, #240]	; (80004b8 <InitTargetPlatform+0x170>)
    TargetBoardFeatures.HandleHumSensor=1;
 80003c6:	61a5      	str	r5, [r4, #24]
    STLBLE_PRINTF("OK Temperature Sensor1\n\r");
 80003c8:	a802      	add	r0, sp, #8
 80003ca:	f007 ffbb 	bl	8008344 <strcpy>
 80003ce:	2118      	movs	r1, #24
 80003d0:	a802      	add	r0, sp, #8
 80003d2:	f001 f8d9 	bl	8001588 <CDC_Fill_Buffer>
    TargetBoardFeatures.NumTempSensors++;
 80003d6:	68a3      	ldr	r3, [r4, #8]
 80003d8:	442b      	add	r3, r5
    TargetBoardFeatures.HandleTempSensors[0]=1;
 80003da:	e9c4 3502 	strd	r3, r5, [r4, #8]
  }

  /* Temperature2 Pressure */
  if(BSP_ENV_SENSOR_Init(LPS22HB_0, ENV_TEMPERATURE|ENV_PRESSURE)==BSP_ERROR_NONE)
 80003de:	2103      	movs	r1, #3
 80003e0:	2001      	movs	r0, #1
 80003e2:	f002 fb4b 	bl	8002a7c <BSP_ENV_SENSOR_Init>
 80003e6:	b9a8      	cbnz	r0, 8000414 <InitTargetPlatform+0xcc>
  {
     STLBLE_PRINTF("OK Temperature Sensor2\n\r");
 80003e8:	4934      	ldr	r1, [pc, #208]	; (80004bc <InitTargetPlatform+0x174>)
 80003ea:	a802      	add	r0, sp, #8
 80003ec:	f007 ffaa 	bl	8008344 <strcpy>
 80003f0:	2118      	movs	r1, #24
 80003f2:	a802      	add	r0, sp, #8
 80003f4:	f001 f8c8 	bl	8001588 <CDC_Fill_Buffer>
     TargetBoardFeatures.NumTempSensors++;
 80003f8:	68a3      	ldr	r3, [r4, #8]
     TargetBoardFeatures.HandleTempSensors[1]=1;

     STLBLE_PRINTF("OK Pressure Sensor\n\r");
 80003fa:	4931      	ldr	r1, [pc, #196]	; (80004c0 <InitTargetPlatform+0x178>)
     TargetBoardFeatures.NumTempSensors++;
 80003fc:	3301      	adds	r3, #1
     TargetBoardFeatures.HandleTempSensors[1]=1;
 80003fe:	2501      	movs	r5, #1
     STLBLE_PRINTF("OK Pressure Sensor\n\r");
 8000400:	a802      	add	r0, sp, #8
     TargetBoardFeatures.NumTempSensors++;
 8000402:	60a3      	str	r3, [r4, #8]
     TargetBoardFeatures.HandleTempSensors[1]=1;
 8000404:	6125      	str	r5, [r4, #16]
     STLBLE_PRINTF("OK Pressure Sensor\n\r");
 8000406:	f007 ff9d 	bl	8008344 <strcpy>
 800040a:	2114      	movs	r1, #20
 800040c:	a802      	add	r0, sp, #8
 800040e:	f001 f8bb 	bl	8001588 <CDC_Fill_Buffer>
     TargetBoardFeatures.HandlePressSensor=1;
 8000412:	6165      	str	r5, [r4, #20]
  }

  if(TargetBoardFeatures.HandleHumSensor) {
 8000414:	69a3      	ldr	r3, [r4, #24]
 8000416:	b163      	cbz	r3, 8000432 <InitTargetPlatform+0xea>
    if(BSP_ENV_SENSOR_Enable(HTS221_0, ENV_HUMIDITY)==BSP_ERROR_NONE)
 8000418:	2104      	movs	r1, #4
 800041a:	2000      	movs	r0, #0
 800041c:	f002 fc78 	bl	8002d10 <BSP_ENV_SENSOR_Enable>
 8000420:	b938      	cbnz	r0, 8000432 <InitTargetPlatform+0xea>
    {
      STLBLE_PRINTF("Enabled Humidity Sensor\n\r");
 8000422:	4928      	ldr	r1, [pc, #160]	; (80004c4 <InitTargetPlatform+0x17c>)
 8000424:	a802      	add	r0, sp, #8
 8000426:	f007 ff8d 	bl	8008344 <strcpy>
 800042a:	2119      	movs	r1, #25
 800042c:	a802      	add	r0, sp, #8
 800042e:	f001 f8ab 	bl	8001588 <CDC_Fill_Buffer>
    }
  }
  
  if(TargetBoardFeatures.HandleTempSensors[0]){
 8000432:	68e3      	ldr	r3, [r4, #12]
 8000434:	b163      	cbz	r3, 8000450 <InitTargetPlatform+0x108>
    if(BSP_ENV_SENSOR_Enable(HTS221_0, ENV_TEMPERATURE)==BSP_ERROR_NONE)
 8000436:	2101      	movs	r1, #1
 8000438:	2000      	movs	r0, #0
 800043a:	f002 fc69 	bl	8002d10 <BSP_ENV_SENSOR_Enable>
 800043e:	b938      	cbnz	r0, 8000450 <InitTargetPlatform+0x108>
    {
      STLBLE_PRINTF("Enabled Temperature Sensor1\n\r");
 8000440:	4921      	ldr	r1, [pc, #132]	; (80004c8 <InitTargetPlatform+0x180>)
 8000442:	a802      	add	r0, sp, #8
 8000444:	f007 ff7e 	bl	8008344 <strcpy>
 8000448:	211d      	movs	r1, #29
 800044a:	a802      	add	r0, sp, #8
 800044c:	f001 f89c 	bl	8001588 <CDC_Fill_Buffer>
    }
  }
  
  if(TargetBoardFeatures.HandleTempSensors[1]){
 8000450:	6923      	ldr	r3, [r4, #16]
 8000452:	b163      	cbz	r3, 800046e <InitTargetPlatform+0x126>
    if(BSP_ENV_SENSOR_Enable( LPS22HB_0, ENV_TEMPERATURE)==BSP_ERROR_NONE) 
 8000454:	2101      	movs	r1, #1
 8000456:	4608      	mov	r0, r1
 8000458:	f002 fc5a 	bl	8002d10 <BSP_ENV_SENSOR_Enable>
 800045c:	b938      	cbnz	r0, 800046e <InitTargetPlatform+0x126>
    {
      STLBLE_PRINTF("Enabled Temperature Sensor2\n\r");
 800045e:	491b      	ldr	r1, [pc, #108]	; (80004cc <InitTargetPlatform+0x184>)
 8000460:	a802      	add	r0, sp, #8
 8000462:	f007 ff6f 	bl	8008344 <strcpy>
 8000466:	211d      	movs	r1, #29
 8000468:	a802      	add	r0, sp, #8
 800046a:	f001 f88d 	bl	8001588 <CDC_Fill_Buffer>
    }
  }
  
  if(TargetBoardFeatures.HandlePressSensor) {
 800046e:	6963      	ldr	r3, [r4, #20]
 8000470:	b163      	cbz	r3, 800048c <InitTargetPlatform+0x144>
    if(BSP_ENV_SENSOR_Enable(LPS22HB_0, ENV_PRESSURE)==BSP_ERROR_NONE)
 8000472:	2102      	movs	r1, #2
 8000474:	2001      	movs	r0, #1
 8000476:	f002 fc4b 	bl	8002d10 <BSP_ENV_SENSOR_Enable>
 800047a:	b938      	cbnz	r0, 800048c <InitTargetPlatform+0x144>
    {
      STLBLE_PRINTF("Enabled Pressure Sensor\n\r");
 800047c:	4914      	ldr	r1, [pc, #80]	; (80004d0 <InitTargetPlatform+0x188>)
 800047e:	a802      	add	r0, sp, #8
 8000480:	f007 ff60 	bl	8008344 <strcpy>
 8000484:	2119      	movs	r1, #25
 8000486:	a802      	add	r0, sp, #8
 8000488:	f001 f87e 	bl	8001588 <CDC_Fill_Buffer>
  TargetBoardFeatures.LedStatus = 0; /*Off by default */
 800048c:	2300      	movs	r3, #0
 800048e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8000492:	b043      	add	sp, #268	; 0x10c
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	bf00      	nop
 8000498:	2000074c 	.word	0x2000074c
 800049c:	20000050 	.word	0x20000050
 80004a0:	20000780 	.word	0x20000780
 80004a4:	200001c4 	.word	0x200001c4
 80004a8:	2000000c 	.word	0x2000000c
 80004ac:	080090b0 	.word	0x080090b0
 80004b0:	080090a8 	.word	0x080090a8
 80004b4:	080090eb 	.word	0x080090eb
 80004b8:	08009100 	.word	0x08009100
 80004bc:	08009119 	.word	0x08009119
 80004c0:	08009132 	.word	0x08009132
 80004c4:	08009147 	.word	0x08009147
 80004c8:	08009161 	.word	0x08009161
 80004cc:	0800917f 	.word	0x0800917f
 80004d0:	0800919d 	.word	0x0800919d

080004d4 <LedOnTargetPlatform>:
  * @param  None
  * @retval None
  */
void LedOnTargetPlatform(void)
{
  BSP_LED_On( LED1 );
 80004d4:	2000      	movs	r0, #0
 80004d6:	f001 bfef 	b.w	80024b8 <BSP_LED_On>

080004da <LedOffTargetPlatform>:
  * @param  None
  * @retval None
  */
void LedOffTargetPlatform(void)
{
  BSP_LED_Off( LED1 );
 80004da:	2000      	movs	r0, #0
 80004dc:	f002 b800 	b.w	80024e0 <BSP_LED_Off>

080004e0 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;
  
  HAL_PWREx_EnableVddIO2();
 80004e4:	f004 f978 	bl	80047d8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <HCI_TL_SPI_Init+0x98>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80004ea:	4e24      	ldr	r6, [pc, #144]	; (800057c <HCI_TL_SPI_Init+0x9c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80004f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80004f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000500:	f042 0204 	orr.w	r2, r2, #4
 8000504:	64da      	str	r2, [r3, #76]	; 0x4c
 8000506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000508:	f002 0204 	and.w	r2, r2, #4
 800050c:	9201      	str	r2, [sp, #4]
 800050e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000510:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000512:	f042 0202 	orr.w	r2, r2, #2
 8000516:	64da      	str	r2, [r3, #76]	; 0x4c
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000520:	4630      	mov	r0, r6
 8000522:	2201      	movs	r2, #1
 8000524:	2104      	movs	r1, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000528:	f002 fee2 	bl	80032f0 <HAL_GPIO_WritePin>
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <HCI_TL_SPI_Init+0xa0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800052e:	4815      	ldr	r0, [pc, #84]	; (8000584 <HCI_TL_SPI_Init+0xa4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000530:	2220      	movs	r2, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2400      	movs	r4, #0
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000534:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000536:	e9cd 2303 	strd	r2, r3, [sp, #12]
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800053a:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800053e:	f002 fd5b 	bl	8002ff8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000542:	a903      	add	r1, sp, #12
 8000544:	4810      	ldr	r0, [pc, #64]	; (8000588 <HCI_TL_SPI_Init+0xa8>)
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000546:	2704      	movs	r7, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	e9cd 5503 	strd	r5, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000550:	f002 fd52 	bl	8002ff8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8000554:	a903      	add	r1, sp, #12
 8000556:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	e9cd 7503 	strd	r7, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8000560:	f002 fd4a 	bl	8002ff8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000564:	462a      	mov	r2, r5
 8000566:	4639      	mov	r1, r7
 8000568:	4630      	mov	r0, r6
 800056a:	f002 fec1 	bl	80032f0 <HAL_GPIO_WritePin>
    
  return BSP_SPI1_Init();
 800056e:	f002 f971 	bl	8002854 <BSP_SPI1_Init>
}
 8000572:	b009      	add	sp, #36	; 0x24
 8000574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000
 800057c:	48000400 	.word	0x48000400
 8000580:	10110000 	.word	0x10110000
 8000584:	48000800 	.word	0x48000800
 8000588:	48001c00 	.word	0x48001c00

0800058c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 800058c:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 800058e:	2120      	movs	r1, #32
 8000590:	4806      	ldr	r0, [pc, #24]	; (80005ac <HCI_TL_SPI_DeInit+0x20>)
 8000592:	f002 fe0d 	bl	80031b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8000596:	2104      	movs	r1, #4
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <HCI_TL_SPI_DeInit+0x24>)
 800059a:	f002 fe09 	bl	80031b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 800059e:	2101      	movs	r1, #1
 80005a0:	4804      	ldr	r0, [pc, #16]	; (80005b4 <HCI_TL_SPI_DeInit+0x28>)
 80005a2:	f002 fe05 	bl	80031b0 <HAL_GPIO_DeInit>
  return 0;
}
 80005a6:	2000      	movs	r0, #0
 80005a8:	bd08      	pop	{r3, pc}
 80005aa:	bf00      	nop
 80005ac:	48000800 	.word	0x48000800
 80005b0:	48000400 	.word	0x48000400
 80005b4:	48001c00 	.word	0x48001c00

080005b8 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80005b8:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80005ba:	4c09      	ldr	r4, [pc, #36]	; (80005e0 <HCI_TL_SPI_Reset+0x28>)
 80005bc:	2200      	movs	r2, #0
 80005be:	2101      	movs	r1, #1
 80005c0:	4620      	mov	r0, r4
 80005c2:	f002 fe95 	bl	80032f0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005c6:	2005      	movs	r0, #5
 80005c8:	f000 f8fc 	bl	80007c4 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	4611      	mov	r1, r2
 80005d0:	4620      	mov	r0, r4
 80005d2:	f002 fe8d 	bl	80032f0 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 80005d6:	2005      	movs	r0, #5
 80005d8:	f000 f8f4 	bl	80007c4 <HAL_Delay>
  return 0;
}  
 80005dc:	2000      	movs	r0, #0
 80005de:	bd10      	pop	{r4, pc}
 80005e0:	48001c00 	.word	0x48001c00

080005e4 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80005e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e6:	b087      	sub	sp, #28
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
 80005e8:	23ff      	movs	r3, #255	; 0xff
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80005ea:	2500      	movs	r5, #0
  uint8_t char_ff = 0xff;
 80005ec:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80005f0:	462a      	mov	r2, r5
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80005f2:	230b      	movs	r3, #11
{
 80005f4:	4607      	mov	r7, r0
 80005f6:	460e      	mov	r6, r1
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80005f8:	4819      	ldr	r0, [pc, #100]	; (8000660 <HCI_TL_SPI_Receive+0x7c>)
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80005fa:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80005fc:	2104      	movs	r1, #4
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80005fe:	f88d 500c 	strb.w	r5, [sp, #12]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000602:	f002 fe75 	bl	80032f0 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000606:	2205      	movs	r2, #5
 8000608:	a904      	add	r1, sp, #16
 800060a:	a802      	add	r0, sp, #8
 800060c:	f002 f800 	bl	8002610 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8000610:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d121      	bne.n	800065c <HCI_TL_SPI_Receive+0x78>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8000618:	f89d 4014 	ldrb.w	r4, [sp, #20]
 800061c:	f89d 3013 	ldrb.w	r3, [sp, #19]
  
    if(byte_count > 0) {
 8000620:	ea53 2404 	orrs.w	r4, r3, r4, lsl #8
 8000624:	d007      	beq.n	8000636 <HCI_TL_SPI_Receive+0x52>
 8000626:	42a6      	cmp	r6, r4
 8000628:	bf28      	it	cs
 800062a:	4626      	movcs	r6, r4
 800062c:	b2ec      	uxtb	r4, r5

      if (byte_count > size){
        byte_count = size;
      }        
  
      for(len = 0; len < byte_count; len++)
 800062e:	42b4      	cmp	r4, r6
 8000630:	f105 0501 	add.w	r5, r5, #1
 8000634:	d307      	bcc.n	8000646 <HCI_TL_SPI_Receive+0x62>
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2104      	movs	r1, #4
 800063a:	4809      	ldr	r0, [pc, #36]	; (8000660 <HCI_TL_SPI_Receive+0x7c>)
 800063c:	f002 fe58 	bl	80032f0 <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 8000640:	4620      	mov	r0, r4
 8000642:	b007      	add	sp, #28
 8000644:	bdf0      	pop	{r4, r5, r6, r7, pc}
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8000646:	2201      	movs	r2, #1
 8000648:	f10d 0107 	add.w	r1, sp, #7
 800064c:	f10d 0006 	add.w	r0, sp, #6
 8000650:	f001 ffde 	bl	8002610 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8000654:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000658:	553b      	strb	r3, [r7, r4]
 800065a:	e7e7      	b.n	800062c <HCI_TL_SPI_Receive+0x48>
  uint8_t len = 0;
 800065c:	462c      	mov	r4, r5
 800065e:	e7ea      	b.n	8000636 <HCI_TL_SPI_Receive+0x52>
 8000660:	48000400 	.word	0x48000400

08000664 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 8000664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000668:	b085      	sub	sp, #20
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800066a:	230a      	movs	r3, #10
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2300      	movs	r3, #0
{  
 8000670:	4680      	mov	r8, r0
 8000672:	460d      	mov	r5, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000674:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000678:	f002 fbee 	bl	8002e58 <HAL_GetTick>
  do
  {
    result = 0;
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800067c:	4e1a      	ldr	r6, [pc, #104]	; (80006e8 <HCI_TL_SPI_Send+0x84>)
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 800067e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80006ec <HCI_TL_SPI_Send+0x88>
  uint32_t tickstart = HAL_GetTick();
 8000682:	4607      	mov	r7, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2104      	movs	r1, #4
 8000688:	4630      	mov	r0, r6
 800068a:	f002 fe31 	bl	80032f0 <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800068e:	2205      	movs	r2, #5
 8000690:	a902      	add	r1, sp, #8
 8000692:	4668      	mov	r0, sp
 8000694:	f001 ffbc 	bl	8002610 <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02) 
 8000698:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d119      	bne.n	80006d4 <HCI_TL_SPI_Send+0x70>
      if(header_slave[1] >= size) 
 80006a0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80006a4:	42ab      	cmp	r3, r5
 80006a6:	d318      	bcc.n	80006da <HCI_TL_SPI_Send+0x76>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80006a8:	462a      	mov	r2, r5
 80006aa:	4649      	mov	r1, r9
 80006ac:	4640      	mov	r0, r8
 80006ae:	f001 ffaf 	bl	8002610 <BSP_SPI1_SendRecv>
    result = 0;
 80006b2:	2400      	movs	r4, #0
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2104      	movs	r1, #4
 80006b8:	4630      	mov	r0, r6
 80006ba:	f002 fe19 	bl	80032f0 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80006be:	f002 fbcb 	bl	8002e58 <HAL_GetTick>
 80006c2:	1bc0      	subs	r0, r0, r7
 80006c4:	280f      	cmp	r0, #15
 80006c6:	d80b      	bhi.n	80006e0 <HCI_TL_SPI_Send+0x7c>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 80006c8:	2c00      	cmp	r4, #0
 80006ca:	d1db      	bne.n	8000684 <HCI_TL_SPI_Send+0x20>
  
  return result;
}
 80006cc:	4620      	mov	r0, r4
 80006ce:	b005      	add	sp, #20
 80006d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      result = -1;
 80006d4:	f04f 34ff 	mov.w	r4, #4294967295
 80006d8:	e7ec      	b.n	80006b4 <HCI_TL_SPI_Send+0x50>
        result = -2;
 80006da:	f06f 0401 	mvn.w	r4, #1
 80006de:	e7e9      	b.n	80006b4 <HCI_TL_SPI_Send+0x50>
      result = -3;
 80006e0:	f06f 0402 	mvn.w	r4, #2
  return result;
 80006e4:	e7f2      	b.n	80006cc <HCI_TL_SPI_Send+0x68>
 80006e6:	bf00      	nop
 80006e8:	48000400 	.word	0x48000400
 80006ec:	20000280 	.word	0x20000280

080006f0 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80006f0:	b570      	push	{r4, r5, r6, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80006f2:	4d08      	ldr	r5, [pc, #32]	; (8000714 <hci_tl_lowlevel_isr+0x24>)
  while(IsDataAvailable())
  {        
    if(hci_notify_asynch_evt(NULL)) {
      return;
	}
    HCI_ProcessEvent=1;
 80006f4:	4e08      	ldr	r6, [pc, #32]	; (8000718 <hci_tl_lowlevel_isr+0x28>)
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80006f6:	2120      	movs	r1, #32
 80006f8:	4628      	mov	r0, r5
 80006fa:	f002 fdf3 	bl	80032e4 <HAL_GPIO_ReadPin>
  while(IsDataAvailable())
 80006fe:	2801      	cmp	r0, #1
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000700:	4604      	mov	r4, r0
  while(IsDataAvailable())
 8000702:	d000      	beq.n	8000706 <hci_tl_lowlevel_isr+0x16>
#endif /* HCI_TL */

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8000704:	bd70      	pop	{r4, r5, r6, pc}
    if(hci_notify_asynch_evt(NULL)) {
 8000706:	2000      	movs	r0, #0
 8000708:	f007 f9ee 	bl	8007ae8 <hci_notify_asynch_evt>
 800070c:	2800      	cmp	r0, #0
 800070e:	d1f9      	bne.n	8000704 <hci_tl_lowlevel_isr+0x14>
    HCI_ProcessEvent=1;
 8000710:	6034      	str	r4, [r6, #0]
 8000712:	e7f0      	b.n	80006f6 <hci_tl_lowlevel_isr+0x6>
 8000714:	48000800 	.word	0x48000800
 8000718:	20000a24 	.word	0x20000a24

0800071c <hci_tl_lowlevel_init>:
{
 800071c:	b510      	push	{r4, lr}
 800071e:	b088      	sub	sp, #32
  fops.Init    = HCI_TL_SPI_Init;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <hci_tl_lowlevel_init+0x4c>)
 8000722:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <hci_tl_lowlevel_init+0x50>)
 8000726:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <hci_tl_lowlevel_init+0x54>)
 800072a:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <hci_tl_lowlevel_init+0x58>)
 800072e:	9304      	str	r3, [sp, #16]
  HAL_EXTI_GetHandle(&hexti5, EXTI_LINE_5);
 8000730:	4c11      	ldr	r4, [pc, #68]	; (8000778 <hci_tl_lowlevel_init+0x5c>)
  fops.Reset   = HCI_TL_SPI_Reset;
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <hci_tl_lowlevel_init+0x60>)
 8000734:	9303      	str	r3, [sp, #12]
  hci_register_io_bus (&fops);
 8000736:	a801      	add	r0, sp, #4
  fops.GetTick = BSP_GetTick;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <hci_tl_lowlevel_init+0x64>)
 800073a:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 800073c:	f007 f8e6 	bl	800790c <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti5, EXTI_LINE_5);
 8000740:	4910      	ldr	r1, [pc, #64]	; (8000784 <hci_tl_lowlevel_init+0x68>)
 8000742:	4620      	mov	r0, r4
 8000744:	f002 fc39 	bl	8002fba <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti5, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000748:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <hci_tl_lowlevel_init+0x6c>)
 800074a:	2100      	movs	r1, #0
 800074c:	4620      	mov	r0, r4
 800074e:	f002 fc2e 	bl	8002fae <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2103      	movs	r1, #3
 8000756:	2017      	movs	r0, #23
 8000758:	f002 fb9a 	bl	8002e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800075c:	2017      	movs	r0, #23
 800075e:	f002 fbcb 	bl	8002ef8 <HAL_NVIC_EnableIRQ>
}
 8000762:	b008      	add	sp, #32
 8000764:	bd10      	pop	{r4, pc}
 8000766:	bf00      	nop
 8000768:	080004e1 	.word	0x080004e1
 800076c:	0800058d 	.word	0x0800058d
 8000770:	08000665 	.word	0x08000665
 8000774:	080005e5 	.word	0x080005e5
 8000778:	20000a1c 	.word	0x20000a1c
 800077c:	080005b9 	.word	0x080005b9
 8000780:	08002639 	.word	0x08002639
 8000784:	16000005 	.word	0x16000005
 8000788:	080006f1 	.word	0x080006f1

0800078c <HAL_TIM_OC_DelayElapsedCallback>:
* @brief  Output Compare callback in non blocking mode 
* @param  htim : TIM OC handle
* @retval None
*/
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800078c:	b510      	push	{r4, lr}
  uint32_t uhCapture=0;
  
  /* TIM1_CH1 toggling with frequency = 2Hz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800078e:	7f04      	ldrb	r4, [r0, #28]
 8000790:	2c01      	cmp	r4, #1
 8000792:	d10a      	bne.n	80007aa <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
    uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000794:	2100      	movs	r1, #0
 8000796:	f005 fa85 	bl	8005ca4 <HAL_TIM_ReadCapturedValue>
    /* Set the Capture Compare Register value */
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <HAL_TIM_OC_DelayElapsedCallback+0x20>)
 800079c:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	3008      	adds	r0, #8
 80007a4:	6358      	str	r0, [r3, #52]	; 0x34
    SendEnv=1;
 80007a6:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 80007a8:	601c      	str	r4, [r3, #0]
  }
}
 80007aa:	bd10      	pop	{r4, pc}
 80007ac:	20000a30 	.word	0x20000a30
 80007b0:	20000380 	.word	0x20000380

080007b4 <HAL_TIM_PeriodElapsedCallback>:
* @param  htim : TIM handle
* @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if(htim == (&TimHandle)) 
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0xc>)
 80007b6:	4283      	cmp	r3, r0
 80007b8:	d101      	bne.n	80007be <HAL_TIM_PeriodElapsedCallback+0xa>
  {
    CDC_TIM_PeriodElapsedCallback(htim);
 80007ba:	f000 befd 	b.w	80015b8 <CDC_TIM_PeriodElapsedCallback>
  }
}
 80007be:	4770      	bx	lr
 80007c0:	20002384 	.word	0x20002384

080007c4 <HAL_Delay>:
* @note This is a user implementation using WFI state
* @param Delay: specifies the delay time length, in milliseconds.
* @retval None
*/
void HAL_Delay(__IO uint32_t Delay)
{
 80007c4:	b513      	push	{r0, r1, r4, lr}
 80007c6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80007c8:	f002 fb46 	bl	8002e58 <HAL_GetTick>
 80007cc:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80007ce:	f002 fb43 	bl	8002e58 <HAL_GetTick>
 80007d2:	9b01      	ldr	r3, [sp, #4]
 80007d4:	1b00      	subs	r0, r0, r4
 80007d6:	4298      	cmp	r0, r3
 80007d8:	d301      	bcc.n	80007de <HAL_Delay+0x1a>
  {
    __WFI();
  }
}
 80007da:	b002      	add	sp, #8
 80007dc:	bd10      	pop	{r4, pc}
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80007de:	bf30      	wfi
 80007e0:	e7f5      	b.n	80007ce <HAL_Delay+0xa>
	...

080007e4 <main>:
{
 80007e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007e8:	b0e5      	sub	sp, #404	; 0x194
  HAL_Init();
 80007ea:	f002 fb1d 	bl	8002e28 <HAL_Init>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	ac13      	add	r4, sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	2214      	movs	r2, #20
 80007f2:	2100      	movs	r1, #0
 80007f4:	a80e      	add	r0, sp, #56	; 0x38
 80007f6:	f007 fbf6 	bl	8007fe6 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	2244      	movs	r2, #68	; 0x44
 80007fc:	2100      	movs	r1, #0
 80007fe:	4620      	mov	r0, r4
 8000800:	f007 fbf1 	bl	8007fe6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000804:	2100      	movs	r1, #0
 8000806:	2288      	movs	r2, #136	; 0x88
 8000808:	a824      	add	r0, sp, #144	; 0x90
 800080a:	f007 fbec 	bl	8007fe6 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4bbb      	ldr	r3, [pc, #748]	; (8000afc <main+0x318>)
 8000810:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000812:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000816:	659a      	str	r2, [r3, #88]	; 0x58
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	930c      	str	r3, [sp, #48]	; 0x30
 8000820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8000822:	2604      	movs	r6, #4
  HAL_PWR_EnableBkUpAccess();
 8000824:	f003 ffc0 	bl	80047a8 <HAL_PWR_EnableBkUpAccess>
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000828:	2501      	movs	r5, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	4620      	mov	r0, r4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800082c:	6026      	str	r6, [r4, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800082e:	60a5      	str	r5, [r4, #8]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f004 f870 	bl	8004914 <HAL_RCC_OscConfig>
 8000834:	4607      	mov	r7, r0
 8000836:	b100      	cbz	r0, 800083a <main+0x56>
 8000838:	e7fe      	b.n	8000838 <main+0x54>
  HAL_RCCEx_DisableLSECSS();
 800083a:	f004 fe17 	bl	800546c <HAL_RCCEx_DisableLSECSS>
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 800083e:	2310      	movs	r3, #16
 8000840:	6023      	str	r3, [r4, #0]
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8000842:	23b0      	movs	r3, #176	; 0xb0
 8000844:	6223      	str	r3, [r4, #32]
  RCC_OscInitStruct.PLL.PLLN            = 40;
 8000846:	f04f 0a06 	mov.w	sl, #6
 800084a:	2328      	movs	r3, #40	; 0x28
 800084c:	e9c4 a30c 	strd	sl, r3, [r4, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8000850:	f04f 0802 	mov.w	r8, #2
  RCC_OscInitStruct.PLL.PLLP            = 7;
 8000854:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	4620      	mov	r0, r4
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000858:	6127      	str	r7, [r4, #16]
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 800085a:	61a5      	str	r5, [r4, #24]
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 800085c:	e9c4 850a 	strd	r8, r5, [r4, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8000860:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR            = 4;
 8000864:	6426      	str	r6, [r4, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000866:	f004 f855 	bl	8004914 <HAL_RCC_OscConfig>
 800086a:	4607      	mov	r7, r0
 800086c:	b100      	cbz	r0, 8000870 <main+0x8c>
 800086e:	e7fe      	b.n	800086e <main+0x8a>
  HAL_RCCEx_EnableMSIPLLMode();
 8000870:	f004 fe0a 	bl	8005488 <HAL_RCCEx_EnableMSIPLLMode>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000878:	9324      	str	r3, [sp, #144]	; 0x90
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800087a:	a824      	add	r0, sp, #144	; 0x90
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800087c:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000880:	933f      	str	r3, [sp, #252]	; 0xfc
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	f04f 090f 	mov.w	r9, #15
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000886:	f004 fc0b 	bl	80050a0 <HAL_RCCEx_PeriphCLKConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800088c:	4631      	mov	r1, r6
 800088e:	a80e      	add	r0, sp, #56	; 0x38
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000890:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000894:	9712      	str	r7, [sp, #72]	; 0x48
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	e9cd 930e 	strd	r9, r3, [sp, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800089a:	f004 fa61 	bl	8004d60 <HAL_RCC_ClockConfig>
 800089e:	4607      	mov	r7, r0
 80008a0:	b100      	cbz	r0, 80008a4 <main+0xc0>
 80008a2:	e7fe      	b.n	80008a2 <main+0xbe>
  InitTargetPlatform(TARGET_SENSORTILE);
 80008a4:	4640      	mov	r0, r8
 80008a6:	f7ff fd4f 	bl	8000348 <InitTargetPlatform>
  STLBLE_PRINTF("\t(HAL %ld.%ld.%ld_%ld)\r\n"
 80008aa:	f002 fadb 	bl	8002e64 <HAL_GetHalVersion>
 80008ae:	4680      	mov	r8, r0
 80008b0:	f002 fad8 	bl	8002e64 <HAL_GetHalVersion>
 80008b4:	4681      	mov	r9, r0
 80008b6:	f002 fad5 	bl	8002e64 <HAL_GetHalVersion>
 80008ba:	4606      	mov	r6, r0
 80008bc:	f002 fad2 	bl	8002e64 <HAL_GetHalVersion>
 80008c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008c4:	9304      	str	r3, [sp, #16]
 80008c6:	4b8e      	ldr	r3, [pc, #568]	; (8000b00 <main+0x31c>)
 80008c8:	9303      	str	r3, [sp, #12]
 80008ca:	b2c0      	uxtb	r0, r0
 80008cc:	4b8d      	ldr	r3, [pc, #564]	; (8000b04 <main+0x320>)
 80008ce:	9302      	str	r3, [sp, #8]
 80008d0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80008d4:	ea4f 6218 	mov.w	r2, r8, lsr #24
 80008d8:	f3c9 4307 	ubfx	r3, r9, #16, #8
 80008dc:	9001      	str	r0, [sp, #4]
 80008de:	498a      	ldr	r1, [pc, #552]	; (8000b08 <main+0x324>)
 80008e0:	9600      	str	r6, [sp, #0]
 80008e2:	a824      	add	r0, sp, #144	; 0x90
 80008e4:	f007 fcbc 	bl	8008260 <siprintf>
 80008e8:	4601      	mov	r1, r0
 80008ea:	a824      	add	r0, sp, #144	; 0x90
 80008ec:	f000 fe4c 	bl	8001588 <CDC_Fill_Buffer>
  STLBLE_PRINTF("Debug Connection         Enabled\r\n");
 80008f0:	4986      	ldr	r1, [pc, #536]	; (8000b0c <main+0x328>)
 80008f2:	a824      	add	r0, sp, #144	; 0x90
 80008f4:	f007 fd26 	bl	8008344 <strcpy>
 80008f8:	2122      	movs	r1, #34	; 0x22
 80008fa:	a824      	add	r0, sp, #144	; 0x90
 80008fc:	f000 fe44 	bl	8001588 <CDC_Fill_Buffer>
  STLBLE_PRINTF("Debug Notify Trasmission Enabled\r\n");
 8000900:	4983      	ldr	r1, [pc, #524]	; (8000b10 <main+0x32c>)
 8000902:	a824      	add	r0, sp, #144	; 0x90
 8000904:	f007 fd1e 	bl	8008344 <strcpy>
 8000908:	2122      	movs	r1, #34	; 0x22
 800090a:	a824      	add	r0, sp, #144	; 0x90
 800090c:	f000 fe3c 	bl	8001588 <CDC_Fill_Buffer>
	const char BoardName[8] = {NAME_STLBLE,0};
 8000910:	4b80      	ldr	r3, [pc, #512]	; (8000b14 <main+0x330>)
 8000912:	f8df c25c 	ldr.w	ip, [pc, #604]	; 8000b70 <main+0x38c>
  hci_init(user_notify, NULL);  /*IMPORTANT-new-handle*/
 8000916:	4880      	ldr	r0, [pc, #512]	; (8000b18 <main+0x334>)
 8000918:	4639      	mov	r1, r7
	const char BoardName[8] = {NAME_STLBLE,0};
 800091a:	e9c4 c300 	strd	ip, r3, [r4]
  hci_init(user_notify, NULL);  /*IMPORTANT-new-handle*/
 800091e:	f006 ffc7 	bl	80078b0 <hci_init>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000922:	a90d      	add	r1, sp, #52	; 0x34
 8000924:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 8000928:	f006 ff0e 	bl	8007748 <getBlueNRGVersion>
  hci_reset();
 800092c:	f006 ff2d 	bl	800778a <hci_reset>
  HAL_Delay(100);
 8000930:	2064      	movs	r0, #100	; 0x64
 8000932:	f7ff ff47 	bl	80007c4 <HAL_Delay>
  bnrg_expansion_board = IDB05A1;
 8000936:	4b79      	ldr	r3, [pc, #484]	; (8000b1c <main+0x338>)
 8000938:	701d      	strb	r5, [r3, #0]
  if (BLE_Role == CLIENT) {
 800093a:	4d79      	ldr	r5, [pc, #484]	; (8000b20 <main+0x33c>)
 800093c:	792a      	ldrb	r2, [r5, #4]
 800093e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000942:	2a00      	cmp	r2, #0
 8000944:	f040 80d4 	bne.w	8000af0 <main+0x30c>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8000948:	4a76      	ldr	r2, [pc, #472]	; (8000b24 <main+0x340>)
    STLBLE_PRINTF("I-1. Client address copied!! \r\n");
 800094a:	4977      	ldr	r1, [pc, #476]	; (8000b28 <main+0x344>)
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 800094c:	920e      	str	r2, [sp, #56]	; 0x38
 800094e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    STLBLE_PRINTF("I-1. Server address copied!! \r\n");
 8000952:	a824      	add	r0, sp, #144	; 0x90
 8000954:	f007 fcf6 	bl	8008344 <strcpy>
 8000958:	211f      	movs	r1, #31
 800095a:	a824      	add	r0, sp, #144	; 0x90
 800095c:	f000 fe14 	bl	8001588 <CDC_Fill_Buffer>
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000960:	aa0e      	add	r2, sp, #56	; 0x38
 8000962:	2106      	movs	r1, #6
 8000964:	2000      	movs	r0, #0
 8000966:	f006 fea3 	bl	80076b0 <aci_hal_write_config_data>
  if (ret) {
 800096a:	4602      	mov	r2, r0
 800096c:	2800      	cmp	r0, #0
 800096e:	f000 8101 	beq.w	8000b74 <main+0x390>
    STLBLE_PRINTF("Setting BD_ADDR failed 0x%02x.\n", ret);
 8000972:	496e      	ldr	r1, [pc, #440]	; (8000b2c <main+0x348>)
 8000974:	a824      	add	r0, sp, #144	; 0x90
 8000976:	f007 fc73 	bl	8008260 <siprintf>
 800097a:	211d      	movs	r1, #29
	  STLBLE_PRINTF("I-2. aci_hal_write_config_data successed\r\n");
 800097c:	a824      	add	r0, sp, #144	; 0x90
 800097e:	f000 fe03 	bl	8001588 <CDC_Fill_Buffer>
  ret = aci_gatt_init();
 8000982:	f006 fd33 	bl	80073ec <aci_gatt_init>
  if (ret) {
 8000986:	2800      	cmp	r0, #0
 8000988:	f000 80fa 	beq.w	8000b80 <main+0x39c>
	  STLBLE_PRINTF("GATT_Init failed.\n");
 800098c:	4968      	ldr	r1, [pc, #416]	; (8000b30 <main+0x34c>)
 800098e:	a824      	add	r0, sp, #144	; 0x90
 8000990:	f007 fcd8 	bl	8008344 <strcpy>
 8000994:	2112      	movs	r1, #18
	  STLBLE_PRINTF("I-3. aci_gatt_init successed\r\n");
 8000996:	a824      	add	r0, sp, #144	; 0x90
 8000998:	f000 fdf6 	bl	8001588 <CDC_Fill_Buffer>
  if (BLE_Role == SERVER) {
 800099c:	7928      	ldrb	r0, [r5, #4]
 800099e:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 80009a2:	ab0b      	add	r3, sp, #44	; 0x2c
 80009a4:	2801      	cmp	r0, #1
	  ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80009a6:	e9cd 3200 	strd	r3, r2, [sp]
 80009aa:	f04f 0100 	mov.w	r1, #0
 80009ae:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 80009b2:	f04f 0207 	mov.w	r2, #7
  if (BLE_Role == SERVER) {
 80009b6:	f040 80e9 	bne.w	8000b8c <main+0x3a8>
	  ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80009ba:	f006 fc07 	bl	80071cc <aci_gap_init_IDB05A1>
	  STLBLE_PRINTF("I-4. Server aci_gap_init_IDB05A1 successed\r\n");
 80009be:	495d      	ldr	r1, [pc, #372]	; (8000b34 <main+0x350>)
	  ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80009c0:	4606      	mov	r6, r0
	  STLBLE_PRINTF("I-4. Server aci_gap_init_IDB05A1 successed\r\n");
 80009c2:	a824      	add	r0, sp, #144	; 0x90
 80009c4:	f007 fcbe 	bl	8008344 <strcpy>
 80009c8:	212c      	movs	r1, #44	; 0x2c
 80009ca:	a824      	add	r0, sp, #144	; 0x90
 80009cc:	f000 fddc 	bl	8001588 <CDC_Fill_Buffer>
	  STLBLE_PRINTF("JE SUIS SERVER!!\r\n");
 80009d0:	4959      	ldr	r1, [pc, #356]	; (8000b38 <main+0x354>)
	  STLBLE_PRINTF("JE SUIS CLIENT!!\r\n")
 80009d2:	a824      	add	r0, sp, #144	; 0x90
 80009d4:	f007 fcb6 	bl	8008344 <strcpy>
 80009d8:	2112      	movs	r1, #18
 80009da:	a824      	add	r0, sp, #144	; 0x90
 80009dc:	f000 fdd4 	bl	8001588 <CDC_Fill_Buffer>
  if (ret != BLE_STATUS_SUCCESS) {
 80009e0:	b13e      	cbz	r6, 80009f2 <main+0x20e>
	  STLBLE_PRINTF("I-4.GAP_Init failed.\n");
 80009e2:	4956      	ldr	r1, [pc, #344]	; (8000b3c <main+0x358>)
 80009e4:	a824      	add	r0, sp, #144	; 0x90
 80009e6:	f007 fcad 	bl	8008344 <strcpy>
 80009ea:	2115      	movs	r1, #21
 80009ec:	a824      	add	r0, sp, #144	; 0x90
 80009ee:	f000 fdcb 	bl	8001588 <CDC_Fill_Buffer>
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80009f2:	4b53      	ldr	r3, [pc, #332]	; (8000b40 <main+0x35c>)
 80009f4:	2001      	movs	r0, #1
 80009f6:	2200      	movs	r2, #0
 80009f8:	e9cd 3002 	strd	r3, r0, [sp, #8]
 80009fc:	2310      	movs	r3, #16
 80009fe:	e9cd 3200 	strd	r3, r2, [sp]
 8000a02:	4611      	mov	r1, r2
 8000a04:	2307      	movs	r3, #7
 8000a06:	f006 fc71 	bl	80072ec <aci_gap_set_auth_requirement>
  if (ret == BLE_STATUS_SUCCESS) {
 8000a0a:	b938      	cbnz	r0, 8000a1c <main+0x238>
	  STLBLE_PRINTF("I-5. aci_gap_set_auth_requirement successed! \r\n");
 8000a0c:	494d      	ldr	r1, [pc, #308]	; (8000b44 <main+0x360>)
 8000a0e:	a824      	add	r0, sp, #144	; 0x90
 8000a10:	f007 fc98 	bl	8008344 <strcpy>
 8000a14:	212f      	movs	r1, #47	; 0x2f
 8000a16:	a824      	add	r0, sp, #144	; 0x90
 8000a18:	f000 fdb6 	bl	8001588 <CDC_Fill_Buffer>
  STLBLE_PRINTF("***********SUMMARY*****PHASE_I****\r\n");
 8000a1c:	494a      	ldr	r1, [pc, #296]	; (8000b48 <main+0x364>)
 8000a1e:	a824      	add	r0, sp, #144	; 0x90
 8000a20:	f007 fc90 	bl	8008344 <strcpy>
 8000a24:	2124      	movs	r1, #36	; 0x24
 8000a26:	a824      	add	r0, sp, #144	; 0x90
 8000a28:	f000 fdae 	bl	8001588 <CDC_Fill_Buffer>
  STLBLE_PRINTF("SERVER: BLE Stack Initialized \r\n"
 8000a2c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8000a30:	9609      	str	r6, [sp, #36]	; 0x24
 8000a32:	f89d 6039 	ldrb.w	r6, [sp, #57]	; 0x39
 8000a36:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8000a3a:	9608      	str	r6, [sp, #32]
 8000a3c:	f89d 603a 	ldrb.w	r6, [sp, #58]	; 0x3a
 8000a40:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8000a44:	9607      	str	r6, [sp, #28]
 8000a46:	f89d 603b 	ldrb.w	r6, [sp, #59]	; 0x3b
 8000a4a:	9606      	str	r6, [sp, #24]
 8000a4c:	2b30      	cmp	r3, #48	; 0x30
 8000a4e:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8000a52:	9605      	str	r6, [sp, #20]
 8000a54:	ea4f 2112 	mov.w	r1, r2, lsr #8
 8000a58:	f3c2 1003 	ubfx	r0, r2, #4, #4
 8000a5c:	f89d 603d 	ldrb.w	r6, [sp, #61]	; 0x3d
 8000a60:	9100      	str	r1, [sp, #0]
 8000a62:	bf86      	itte	hi
 8000a64:	f002 020f 	andhi.w	r2, r2, #15
 8000a68:	3260      	addhi	r2, #96	; 0x60
 8000a6a:	2261      	movls	r2, #97	; 0x61
 8000a6c:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8000a70:	4936      	ldr	r1, [pc, #216]	; (8000b4c <main+0x368>)
 8000a72:	4a37      	ldr	r2, [pc, #220]	; (8000b50 <main+0x36c>)
 8000a74:	e9cd 4603 	strd	r4, r6, [sp, #12]
 8000a78:	a824      	add	r0, sp, #144	; 0x90
 8000a7a:	f007 fbf1 	bl	8008260 <siprintf>
 8000a7e:	4601      	mov	r1, r0
 8000a80:	a824      	add	r0, sp, #144	; 0x90
 8000a82:	f000 fd81 	bl	8001588 <CDC_Fill_Buffer>
  if (BLE_Role == SERVER) {
 8000a86:	792b      	ldrb	r3, [r5, #4]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	f040 8093 	bne.w	8000bb4 <main+0x3d0>
	STLBLE_PRINTF("I-6. SERVER: BLE Stack Initialized\r\n");
 8000a8e:	4931      	ldr	r1, [pc, #196]	; (8000b54 <main+0x370>)
 8000a90:	a824      	add	r0, sp, #144	; 0x90
 8000a92:	f007 fc57 	bl	8008344 <strcpy>
 8000a96:	2124      	movs	r1, #36	; 0x24
 8000a98:	a824      	add	r0, sp, #144	; 0x90
 8000a9a:	f000 fd75 	bl	8001588 <CDC_Fill_Buffer>
    ret = Add_Sample_Service();
 8000a9e:	f000 faef 	bl	8001080 <Add_Sample_Service>
    if (ret == BLE_STATUS_SUCCESS){
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	f040 8080 	bne.w	8000ba8 <main+0x3c4>
    	STLBLE_PRINTF("I-7. Sample_Service added successfully!\r\n");
 8000aa8:	492b      	ldr	r1, [pc, #172]	; (8000b58 <main+0x374>)
 8000aaa:	a824      	add	r0, sp, #144	; 0x90
 8000aac:	f007 fc4a 	bl	8008344 <strcpy>
 8000ab0:	2129      	movs	r1, #41	; 0x29
    	STLBLE_PRINTF("Error while adding service.\n");
 8000ab2:	a824      	add	r0, sp, #144	; 0x90
 8000ab4:	f000 fd68 	bl	8001588 <CDC_Fill_Buffer>
  ret = aci_hal_set_tx_power_level(1,4);
 8000ab8:	2104      	movs	r1, #4
 8000aba:	2001      	movs	r0, #1
 8000abc:	f006 fe24 	bl	8007708 <aci_hal_set_tx_power_level>
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1); 
 8000ac0:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <main+0x378>)
  TimCCHandle.Instance = TIM1;
 8000ac2:	4e27      	ldr	r6, [pc, #156]	; (8000b60 <main+0x37c>)
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1); 
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000aca:	fbb3 f3f2 	udiv	r3, r3, r2
  TimCCHandle.Instance = TIM1;
 8000ace:	4a25      	ldr	r2, [pc, #148]	; (8000b64 <main+0x380>)
 8000ad0:	6032      	str	r2, [r6, #0]
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1); 
 8000ad2:	3b01      	subs	r3, #1
  TimCCHandle.Init.Period        = 65535;
 8000ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TimCCHandle.Init.Prescaler     = uwPrescalerValue;
 8000ad8:	6073      	str	r3, [r6, #4]
  if(HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK)
 8000ada:	4630      	mov	r0, r6
  TimCCHandle.Init.ClockDivision = 0;
 8000adc:	2300      	movs	r3, #0
  TimCCHandle.Init.Period        = 65535;
 8000ade:	60f2      	str	r2, [r6, #12]
  TimCCHandle.Init.ClockDivision = 0;
 8000ae0:	6133      	str	r3, [r6, #16]
  TimCCHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8000ae2:	60b3      	str	r3, [r6, #8]
  if(HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK)
 8000ae4:	f005 fa34 	bl	8005f50 <HAL_TIM_OC_Init>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	2800      	cmp	r0, #0
 8000aec:	d066      	beq.n	8000bbc <main+0x3d8>
 8000aee:	e7fe      	b.n	8000aee <main+0x30a>
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000af0:	4a1d      	ldr	r2, [pc, #116]	; (8000b68 <main+0x384>)
 8000af2:	920e      	str	r2, [sp, #56]	; 0x38
 8000af4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    STLBLE_PRINTF("I-1. Server address copied!! \r\n");
 8000af8:	491c      	ldr	r1, [pc, #112]	; (8000b6c <main+0x388>)
 8000afa:	e72a      	b.n	8000952 <main+0x16e>
 8000afc:	40021000 	.word	0x40021000
 8000b00:	0800921e 	.word	0x0800921e
 8000b04:	08009227 	.word	0x08009227
 8000b08:	080091b7 	.word	0x080091b7
 8000b0c:	08009233 	.word	0x08009233
 8000b10:	08009256 	.word	0x08009256
 8000b14:	00303132 	.word	0x00303132
 8000b18:	0800125d 	.word	0x0800125d
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	20000380 	.word	0x20000380
 8000b24:	e10000bb 	.word	0xe10000bb
 8000b28:	08009279 	.word	0x08009279
 8000b2c:	080092b9 	.word	0x080092b9
 8000b30:	08009304 	.word	0x08009304
 8000b34:	08009336 	.word	0x08009336
 8000b38:	08009363 	.word	0x08009363
 8000b3c:	080093b6 	.word	0x080093b6
 8000b40:	0001e240 	.word	0x0001e240
 8000b44:	080093cc 	.word	0x080093cc
 8000b48:	080093fc 	.word	0x080093fc
 8000b4c:	0800942c 	.word	0x0800942c
 8000b50:	08009421 	.word	0x08009421
 8000b54:	080094a9 	.word	0x080094a9
 8000b58:	080094ce 	.word	0x080094ce
 8000b5c:	200000e8 	.word	0x200000e8
 8000b60:	20000a30 	.word	0x20000a30
 8000b64:	40012c00 	.word	0x40012c00
 8000b68:	e10000aa 	.word	0xe10000aa
 8000b6c:	08009299 	.word	0x08009299
 8000b70:	424c5453 	.word	0x424c5453
	  STLBLE_PRINTF("I-2. aci_hal_write_config_data successed\r\n");
 8000b74:	4983      	ldr	r1, [pc, #524]	; (8000d84 <main+0x5a0>)
 8000b76:	a824      	add	r0, sp, #144	; 0x90
 8000b78:	f007 fbe4 	bl	8008344 <strcpy>
 8000b7c:	212a      	movs	r1, #42	; 0x2a
 8000b7e:	e6fd      	b.n	800097c <main+0x198>
	  STLBLE_PRINTF("I-3. aci_gatt_init successed\r\n");
 8000b80:	4981      	ldr	r1, [pc, #516]	; (8000d88 <main+0x5a4>)
 8000b82:	a824      	add	r0, sp, #144	; 0x90
 8000b84:	f007 fbde 	bl	8008344 <strcpy>
 8000b88:	211e      	movs	r1, #30
 8000b8a:	e704      	b.n	8000996 <main+0x1b2>
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000b8c:	2004      	movs	r0, #4
 8000b8e:	f006 fb1d 	bl	80071cc <aci_gap_init_IDB05A1>
	  STLBLE_PRINTF("I-4. Client aci_gap_init_IDB05A1 successed\r\n");
 8000b92:	497e      	ldr	r1, [pc, #504]	; (8000d8c <main+0x5a8>)
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000b94:	4606      	mov	r6, r0
	  STLBLE_PRINTF("I-4. Client aci_gap_init_IDB05A1 successed\r\n");
 8000b96:	a824      	add	r0, sp, #144	; 0x90
 8000b98:	f007 fbd4 	bl	8008344 <strcpy>
 8000b9c:	212c      	movs	r1, #44	; 0x2c
 8000b9e:	a824      	add	r0, sp, #144	; 0x90
 8000ba0:	f000 fcf2 	bl	8001588 <CDC_Fill_Buffer>
	  STLBLE_PRINTF("JE SUIS CLIENT!!\r\n")
 8000ba4:	497a      	ldr	r1, [pc, #488]	; (8000d90 <main+0x5ac>)
 8000ba6:	e714      	b.n	80009d2 <main+0x1ee>
    	STLBLE_PRINTF("Error while adding service.\n");
 8000ba8:	497a      	ldr	r1, [pc, #488]	; (8000d94 <main+0x5b0>)
 8000baa:	a824      	add	r0, sp, #144	; 0x90
 8000bac:	f007 fbca 	bl	8008344 <strcpy>
 8000bb0:	211c      	movs	r1, #28
 8000bb2:	e77e      	b.n	8000ab2 <main+0x2ce>
    printf("CLIENT: BLE Stack Initialized\n");
 8000bb4:	4878      	ldr	r0, [pc, #480]	; (8000d98 <main+0x5b4>)
 8000bb6:	f007 fb3b 	bl	8008230 <puts>
 8000bba:	e77d      	b.n	8000ab8 <main+0x2d4>
  sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 8000bbc:	2330      	movs	r3, #48	; 0x30
  sConfig.Pulse = uhCCR1_Val;
 8000bbe:	2002      	movs	r0, #2
  sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 8000bc0:	9324      	str	r3, [sp, #144]	; 0x90
  sConfig.Pulse = uhCCR1_Val;
 8000bc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000bc6:	e9cd 3025 	strd	r3, r0, [sp, #148]	; 0x94
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 8000bca:	a924      	add	r1, sp, #144	; 0x90
 8000bcc:	4630      	mov	r0, r6
 8000bce:	f005 fa1f 	bl	8006010 <HAL_TIM_OC_ConfigChannel>
 8000bd2:	b100      	cbz	r0, 8000bd6 <main+0x3f2>
 8000bd4:	e7fe      	b.n	8000bd4 <main+0x3f0>
  StartTime = HAL_GetTick();
 8000bd6:	f002 f93f 	bl	8002e58 <HAL_GetTick>
    if(!connected)
 8000bda:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8000db8 <main+0x5d4>
      if(!TargetBoardFeatures.LedStatus)
 8000bde:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8000dbc <main+0x5d8>
  StartTime = HAL_GetTick();
 8000be2:	4606      	mov	r6, r0
 8000be4:	464f      	mov	r7, r9
    if(!connected)
 8000be6:	f8d9 a000 	ldr.w	sl, [r9]
 8000bea:	f1ba 0f00 	cmp.w	sl, #0
 8000bee:	d112      	bne.n	8000c16 <main+0x432>
      if(!TargetBoardFeatures.LedStatus)
 8000bf0:	f898 302c 	ldrb.w	r3, [r8, #44]	; 0x2c
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f040 80aa 	bne.w	8000d4e <main+0x56a>
        if(HAL_GetTick()-StartTime > 1000)
 8000bfa:	f002 f92d 	bl	8002e58 <HAL_GetTick>
 8000bfe:	1b80      	subs	r0, r0, r6
 8000c00:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c04:	d907      	bls.n	8000c16 <main+0x432>
          LedOnTargetPlatform();
 8000c06:	f7ff fc65 	bl	80004d4 <LedOnTargetPlatform>
          TargetBoardFeatures.LedStatus =1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	f888 302c 	strb.w	r3, [r8, #44]	; 0x2c
          StartTime = HAL_GetTick();
 8000c10:	f002 f922 	bl	8002e58 <HAL_GetTick>
 8000c14:	4606      	mov	r6, r0
	if (set_connectable)
 8000c16:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 8000dc0 <main+0x5dc>
 8000c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8000c1e:	b163      	cbz	r3, 8000c3a <main+0x456>
	    Make_Connection();
 8000c20:	f000 f8d2 	bl	8000dc8 <Make_Connection>
	    STLBLE_PRINTF("II-1. Make_Connection successed! \r\n");
 8000c24:	495d      	ldr	r1, [pc, #372]	; (8000d9c <main+0x5b8>)
 8000c26:	a824      	add	r0, sp, #144	; 0x90
 8000c28:	f007 fb8c 	bl	8008344 <strcpy>
 8000c2c:	2123      	movs	r1, #35	; 0x23
 8000c2e:	a824      	add	r0, sp, #144	; 0x90
 8000c30:	f000 fcaa 	bl	8001588 <CDC_Fill_Buffer>
	    set_connectable = FALSE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f88a 3000 	strb.w	r3, [sl]
	  if (BLE_Role == CLIENT)
 8000c3a:	792b      	ldrb	r3, [r5, #4]
 8000c3c:	b9bb      	cbnz	r3, 8000c6e <main+0x48a>
	    if (connected && !end_read_tx_char_handle){
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 808f 	beq.w	8000d64 <main+0x580>
 8000c46:	4b56      	ldr	r3, [pc, #344]	; (8000da0 <main+0x5bc>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f040 808a 	bne.w	8000d64 <main+0x580>
	    	startReadTXCharHandle();
 8000c50:	f000 f92e 	bl	8000eb0 <startReadTXCharHandle>
	    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b153      	cbz	r3, 8000c6e <main+0x48a>
 8000c58:	4b51      	ldr	r3, [pc, #324]	; (8000da0 <main+0x5bc>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b13b      	cbz	r3, 8000c6e <main+0x48a>
 8000c5e:	4b51      	ldr	r3, [pc, #324]	; (8000da4 <main+0x5c0>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b123      	cbz	r3, 8000c6e <main+0x48a>
 8000c64:	4b50      	ldr	r3, [pc, #320]	; (8000da8 <main+0x5c4>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b90b      	cbnz	r3, 8000c6e <main+0x48a>
	        enableNotification();
 8000c6a:	f000 f979 	bl	8000f60 <enableNotification>
	if (BLE_Role == SERVER){
 8000c6e:	f895 a004 	ldrb.w	sl, [r5, #4]
 8000c72:	f1ba 0f01 	cmp.w	sl, #1
 8000c76:	d166      	bne.n	8000d46 <main+0x562>
	  if (counter_send_test > 500){
 8000c78:	68ab      	ldr	r3, [r5, #8]
 8000c7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c7e:	dd7d      	ble.n	8000d7c <main+0x598>
		  counter_send_test = 0;
 8000c80:	f04f 0b00 	mov.w	fp, #0
		  HAL_Delay(50);
 8000c84:	2032      	movs	r0, #50	; 0x32
		  counter_send_test = 0;
 8000c86:	f8c5 b008 	str.w	fp, [r5, #8]
		  HAL_Delay(50);
 8000c8a:	f7ff fd9b 	bl	80007c4 <HAL_Delay>
		  if (connected && notification_enabled)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d058      	beq.n	8000d46 <main+0x562>
 8000c94:	4b44      	ldr	r3, [pc, #272]	; (8000da8 <main+0x5c4>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d054      	beq.n	8000d46 <main+0x562>
			if (BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue)!=BSP_ERROR_NONE)
 8000c9c:	aa0d      	add	r2, sp, #52	; 0x34
 8000c9e:	4651      	mov	r1, sl
 8000ca0:	4658      	mov	r0, fp
 8000ca2:	f002 f85b 	bl	8002d5c <BSP_ENV_SENSOR_GetValue>
 8000ca6:	b120      	cbz	r0, 8000cb2 <main+0x4ce>
			  BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8000ca8:	aa0d      	add	r2, sp, #52	; 0x34
 8000caa:	4651      	mov	r1, sl
 8000cac:	4650      	mov	r0, sl
 8000cae:	f002 f855 	bl	8002d5c <BSP_ENV_SENSOR_GetValue>
			MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000cb2:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
			  uint8_t data[20] = "Tempe_recv : ";
 8000cb6:	4b3d      	ldr	r3, [pc, #244]	; (8000dac <main+0x5c8>)
			MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000cb8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
			  uint8_t data[20] = "Tempe_recv : ";
 8000cbc:	46a4      	mov	ip, r4
			MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000cbe:	ee17 2a10 	vmov	r2, s14
			  uint8_t data[20] = "Tempe_recv : ";
 8000cc2:	f103 0a08 	add.w	sl, r3, #8
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	6859      	ldr	r1, [r3, #4]
 8000cca:	46e6      	mov	lr, ip
 8000ccc:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8000cd0:	3308      	adds	r3, #8
 8000cd2:	4553      	cmp	r3, sl
 8000cd4:	46f4      	mov	ip, lr
 8000cd6:	d1f6      	bne.n	8000cc6 <main+0x4e2>
			MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000cd8:	ee07 2a10 	vmov	s14, r2
 8000cdc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			  uint8_t data[20] = "Tempe_recv : ";
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	889b      	ldrh	r3, [r3, #4]
 8000ce4:	f8ae 3004 	strh.w	r3, [lr, #4]
			MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000ce8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000cec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
			Temp1ToSend = intPart*10+decPart;
 8000cf4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
			MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			  uint8_t data[20] = "Tempe_recv : ";
 8000cfc:	f8ce 0000 	str.w	r0, [lr]
			Temp1ToSend = intPart*10+decPart;
 8000d00:	ee17 3a90 	vmov	r3, s15
			  uint8_t data[20] = "Tempe_recv : ";
 8000d04:	2100      	movs	r1, #0
			Temp1ToSend = intPart*10+decPart;
 8000d06:	eb03 0042 	add.w	r0, r3, r2, lsl #1
			  uint8_t data[20] = "Tempe_recv : ";
 8000d0a:	f8c4 100e 	str.w	r1, [r4, #14]
			  itoa(Temp1ToSend, chiffre, 10);
 8000d0e:	220a      	movs	r2, #10
			  uint8_t data[20] = "Tempe_recv : ";
 8000d10:	8261      	strh	r1, [r4, #18]
			  itoa(Temp1ToSend, chiffre, 10);
 8000d12:	b200      	sxth	r0, r0
 8000d14:	a90e      	add	r1, sp, #56	; 0x38
 8000d16:	f007 f949 	bl	8007fac <itoa>
			  strcat(data, chiffre);
 8000d1a:	a90e      	add	r1, sp, #56	; 0x38
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	f007 fb02 	bl	8008326 <strcat>
			  sendData(data, sizeof(data));
 8000d22:	2114      	movs	r1, #20
 8000d24:	4620      	mov	r0, r4
 8000d26:	f000 f949 	bl	8000fbc <sendData>
			  STLBLE_PRINTF("Je suis Serveur Temperature sent : %s \r\n", chiffre);
 8000d2a:	aa0e      	add	r2, sp, #56	; 0x38
 8000d2c:	4920      	ldr	r1, [pc, #128]	; (8000db0 <main+0x5cc>)
 8000d2e:	a824      	add	r0, sp, #144	; 0x90
 8000d30:	f007 fa96 	bl	8008260 <siprintf>
 8000d34:	4601      	mov	r1, r0
 8000d36:	a824      	add	r0, sp, #144	; 0x90
 8000d38:	f000 fc26 	bl	8001588 <CDC_Fill_Buffer>
			  data[20] = "0";
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <main+0x5d0>)
 8000d3e:	7523      	strb	r3, [r4, #20]
			  HAL_Delay(50);
 8000d40:	2032      	movs	r0, #50	; 0x32
 8000d42:	f7ff fd3f 	bl	80007c4 <HAL_Delay>
    hci_user_evt_proc();
 8000d46:	f006 feaf 	bl	8007aa8 <hci_user_evt_proc>
 8000d4a:	bf30      	wfi
 8000d4c:	e74b      	b.n	8000be6 <main+0x402>
        if(HAL_GetTick()-StartTime > 50)
 8000d4e:	f002 f883 	bl	8002e58 <HAL_GetTick>
 8000d52:	1b80      	subs	r0, r0, r6
 8000d54:	2832      	cmp	r0, #50	; 0x32
 8000d56:	f67f af5e 	bls.w	8000c16 <main+0x432>
          LedOffTargetPlatform();
 8000d5a:	f7ff fbbe 	bl	80004da <LedOffTargetPlatform>
          TargetBoardFeatures.LedStatus =0;
 8000d5e:	f888 a02c 	strb.w	sl, [r8, #44]	; 0x2c
 8000d62:	e755      	b.n	8000c10 <main+0x42c>
	    else if (connected && !end_read_rx_char_handle){
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f43f af74 	beq.w	8000c54 <main+0x470>
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <main+0x5c0>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f47f af6f 	bne.w	8000c54 <main+0x470>
	        startReadRXCharHandle();
 8000d76:	f000 f8c7 	bl	8000f08 <startReadRXCharHandle>
 8000d7a:	e76b      	b.n	8000c54 <main+0x470>
			  counter_send_test ++;
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	60ab      	str	r3, [r5, #8]
 8000d80:	e7e1      	b.n	8000d46 <main+0x562>
 8000d82:	bf00      	nop
 8000d84:	080092d9 	.word	0x080092d9
 8000d88:	08009317 	.word	0x08009317
 8000d8c:	08009376 	.word	0x08009376
 8000d90:	080093a3 	.word	0x080093a3
 8000d94:	080094f8 	.word	0x080094f8
 8000d98:	08009515 	.word	0x08009515
 8000d9c:	08009533 	.word	0x08009533
 8000da0:	2000039c 	.word	0x2000039c
 8000da4:	2000039d 	.word	0x2000039d
 8000da8:	20000395 	.word	0x20000395
 8000dac:	08008fc8 	.word	0x08008fc8
 8000db0:	08009557 	.word	0x08009557
 8000db4:	08009231 	.word	0x08009231
 8000db8:	20000398 	.word	0x20000398
 8000dbc:	2000074c 	.word	0x2000074c
 8000dc0:	20000001 	.word	0x20000001

08000dc4 <Error_Handler>:
* @brief  This function is executed in case of error occurrence.
* @param  None
* @retval None
*/
void Error_Handler(void)
{
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler>
	...

08000dc8 <Make_Connection>:

/*------------------------------------------------------------*/


void Make_Connection(void)
{
 8000dc8:	b570      	push	{r4, r5, r6, lr}
  tBleStatus ret;


  if(BLE_Role == CLIENT) {
 8000dca:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <Make_Connection+0xcc>)
 8000dcc:	781d      	ldrb	r5, [r3, #0]
{
 8000dce:	b0cc      	sub	sp, #304	; 0x130
 8000dd0:	ac08      	add	r4, sp, #32
  if(BLE_Role == CLIENT) {
 8000dd2:	bb55      	cbnz	r5, 8000e2a <Make_Connection+0x62>
	  /*!!PARTIE_CLIENT!!*/

    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000dd4:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <Make_Connection+0xd0>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	889b      	ldrh	r3, [r3, #4]
 8000dda:	6020      	str	r0, [r4, #0]
 8000ddc:	80a3      	strh	r3, [r4, #4]

    LedOnTargetPlatform(); //To indicate the start of the connection and discovery phase
 8000dde:	f7ff fb79 	bl	80004d4 <LedOnTargetPlatform>

    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 8000de2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000de6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000dea:	233c      	movs	r3, #60	; 0x3c
 8000dec:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8000df0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df4:	2328      	movs	r3, #40	; 0x28
 8000df6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000dfa:	9500      	str	r5, [sp, #0]
 8000dfc:	4623      	mov	r3, r4
 8000dfe:	462a      	mov	r2, r5
 8000e00:	4608      	mov	r0, r1
 8000e02:	f006 faad 	bl	8007360 <aci_gap_create_connection>
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

    if (ret != 0){
 8000e06:	b138      	cbz	r0, 8000e18 <Make_Connection+0x50>
      printf("Error while starting connection.\n");
 8000e08:	4824      	ldr	r0, [pc, #144]	; (8000e9c <Make_Connection+0xd4>)
 8000e0a:	f007 fa11 	bl	8008230 <puts>
      HAL_Delay(100);
 8000e0e:	2064      	movs	r0, #100	; 0x64
 8000e10:	f7ff fcd8 	bl	80007c4 <HAL_Delay>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    if (ret == 0)
    	STLBLE_PRINTF("II-1-3.  aci_gap_set_discoverable successed! \r\n");
  }
}
 8000e14:	b04c      	add	sp, #304	; 0x130
 8000e16:	bd70      	pop	{r4, r5, r6, pc}
	    STLBLE_PRINTF("II-1-1. aci_gap_create_connection, Client successed! \r\n");
 8000e18:	4921      	ldr	r1, [pc, #132]	; (8000ea0 <Make_Connection+0xd8>)
 8000e1a:	a80c      	add	r0, sp, #48	; 0x30
 8000e1c:	f007 fa92 	bl	8008344 <strcpy>
 8000e20:	2137      	movs	r1, #55	; 0x37
    	STLBLE_PRINTF("II-1-3.  aci_gap_set_discoverable successed! \r\n");
 8000e22:	a80c      	add	r0, sp, #48	; 0x30
 8000e24:	f000 fbb0 	bl	8001588 <CDC_Fill_Buffer>
}
 8000e28:	e7f4      	b.n	8000e14 <Make_Connection+0x4c>
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8000e2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ea4 <Make_Connection+0xdc>)
 8000e2c:	4623      	mov	r3, r4
 8000e2e:	f102 0608 	add.w	r6, r2, #8
 8000e32:	6810      	ldr	r0, [r2, #0]
 8000e34:	6851      	ldr	r1, [r2, #4]
 8000e36:	461d      	mov	r5, r3
 8000e38:	c503      	stmia	r5!, {r0, r1}
 8000e3a:	3208      	adds	r2, #8
 8000e3c:	42b2      	cmp	r2, r6
 8000e3e:	462b      	mov	r3, r5
 8000e40:	d1f7      	bne.n	8000e32 <Make_Connection+0x6a>
 8000e42:	6810      	ldr	r0, [r2, #0]
 8000e44:	7912      	ldrb	r2, [r2, #4]
 8000e46:	712a      	strb	r2, [r5, #4]
    hci_le_set_scan_resp_data(0,NULL);
 8000e48:	2100      	movs	r1, #0
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8000e4a:	6028      	str	r0, [r5, #0]
    hci_le_set_scan_resp_data(0,NULL);
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	f006 fced 	bl	800782c <hci_le_set_scan_resp_data>
    STLBLE_PRINTF("II-1-2.  General Discoverable Mode! \r\n");
 8000e52:	4915      	ldr	r1, [pc, #84]	; (8000ea8 <Make_Connection+0xe0>)
 8000e54:	a80c      	add	r0, sp, #48	; 0x30
 8000e56:	f007 fa75 	bl	8008344 <strcpy>
 8000e5a:	2126      	movs	r1, #38	; 0x26
 8000e5c:	a80c      	add	r0, sp, #48	; 0x30
 8000e5e:	f000 fb93 	bl	8001588 <CDC_Fill_Buffer>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000e62:	2300      	movs	r3, #0
 8000e64:	220d      	movs	r2, #13
 8000e66:	e9cd 3200 	strd	r3, r2, [sp]
 8000e6a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000e6e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000e72:	9402      	str	r4, [sp, #8]
 8000e74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f006 f9dd 	bl	800723c <aci_gap_set_discoverable>
    if (ret == 0)
 8000e82:	2800      	cmp	r0, #0
 8000e84:	d1c6      	bne.n	8000e14 <Make_Connection+0x4c>
    	STLBLE_PRINTF("II-1-3.  aci_gap_set_discoverable successed! \r\n");
 8000e86:	4909      	ldr	r1, [pc, #36]	; (8000eac <Make_Connection+0xe4>)
 8000e88:	a80c      	add	r0, sp, #48	; 0x30
 8000e8a:	f007 fa5b 	bl	8008344 <strcpy>
 8000e8e:	212f      	movs	r1, #47	; 0x2f
 8000e90:	e7c7      	b.n	8000e22 <Make_Connection+0x5a>
 8000e92:	bf00      	nop
 8000e94:	20000384 	.word	0x20000384
 8000e98:	08008fdc 	.word	0x08008fdc
 8000e9c:	08009580 	.word	0x08009580
 8000ea0:	080095a1 	.word	0x080095a1
 8000ea4:	08008fe2 	.word	0x08008fe2
 8000ea8:	080095d9 	.word	0x080095d9
 8000eac:	08009600 	.word	0x08009600

08000eb0 <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8000eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!start_read_tx_char_handle)
 8000eb2:	4c12      	ldr	r4, [pc, #72]	; (8000efc <startReadTXCharHandle+0x4c>)
 8000eb4:	7823      	ldrb	r3, [r4, #0]
{
 8000eb6:	b0c3      	sub	sp, #268	; 0x10c
  if (!start_read_tx_char_handle)
 8000eb8:	b9f3      	cbnz	r3, 8000ef8 <startReadTXCharHandle+0x48>
  {
	  STLBLE_PRINTF("Start reading TX Char Handle\r\n");
 8000eba:	ad02      	add	r5, sp, #8
 8000ebc:	4910      	ldr	r1, [pc, #64]	; (8000f00 <startReadTXCharHandle+0x50>)
 8000ebe:	4628      	mov	r0, r5
 8000ec0:	f007 fa40 	bl	8008344 <strcpy>
 8000ec4:	211e      	movs	r1, #30
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	f000 fb5e 	bl	8001588 <CDC_Fill_Buffer>

    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <startReadTXCharHandle+0x54>)
 8000ece:	462e      	mov	r6, r5
 8000ed0:	f103 0710 	add.w	r7, r3, #16
 8000ed4:	6818      	ldr	r0, [r3, #0]
 8000ed6:	6859      	ldr	r1, [r3, #4]
 8000ed8:	4632      	mov	r2, r6
 8000eda:	c203      	stmia	r2!, {r0, r1}
 8000edc:	3308      	adds	r3, #8
 8000ede:	42bb      	cmp	r3, r7
 8000ee0:	4616      	mov	r6, r2
 8000ee2:	d1f7      	bne.n	8000ed4 <startReadTXCharHandle+0x24>
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	8860      	ldrh	r0, [r4, #2]
 8000ee8:	9500      	str	r5, [sp, #0]
 8000eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eee:	2101      	movs	r1, #1
 8000ef0:	f006 fb56 	bl	80075a0 <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	7023      	strb	r3, [r4, #0]
  }
}
 8000ef8:	b043      	add	sp, #268	; 0x10c
 8000efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efc:	20000390 	.word	0x20000390
 8000f00:	08009630 	.word	0x08009630
 8000f04:	08008fef 	.word	0x08008fef

08000f08 <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
 8000f08:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!start_read_rx_char_handle)
 8000f0a:	4c12      	ldr	r4, [pc, #72]	; (8000f54 <startReadRXCharHandle+0x4c>)
 8000f0c:	7923      	ldrb	r3, [r4, #4]
{
 8000f0e:	b0c3      	sub	sp, #268	; 0x10c
  if (!start_read_rx_char_handle)
 8000f10:	b9f3      	cbnz	r3, 8000f50 <startReadRXCharHandle+0x48>
  {
	  STLBLE_PRINTF("Start reading RX Char Handle\r\n");
 8000f12:	ad02      	add	r5, sp, #8
 8000f14:	4910      	ldr	r1, [pc, #64]	; (8000f58 <startReadRXCharHandle+0x50>)
 8000f16:	4628      	mov	r0, r5
 8000f18:	f007 fa14 	bl	8008344 <strcpy>
 8000f1c:	211e      	movs	r1, #30
 8000f1e:	4628      	mov	r0, r5
 8000f20:	f000 fb32 	bl	8001588 <CDC_Fill_Buffer>

    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <startReadRXCharHandle+0x54>)
 8000f26:	462e      	mov	r6, r5
 8000f28:	f103 0710 	add.w	r7, r3, #16
 8000f2c:	6818      	ldr	r0, [r3, #0]
 8000f2e:	6859      	ldr	r1, [r3, #4]
 8000f30:	4632      	mov	r2, r6
 8000f32:	c203      	stmia	r2!, {r0, r1}
 8000f34:	3308      	adds	r3, #8
 8000f36:	42bb      	cmp	r3, r7
 8000f38:	4616      	mov	r6, r2
 8000f3a:	d1f7      	bne.n	8000f2c <startReadRXCharHandle+0x24>
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	8860      	ldrh	r0, [r4, #2]
 8000f40:	9500      	str	r5, [sp, #0]
 8000f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f46:	2101      	movs	r1, #1
 8000f48:	f006 fb2a 	bl	80075a0 <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	7123      	strb	r3, [r4, #4]
  }
}
 8000f50:	b043      	add	sp, #268	; 0x10c
 8000f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f54:	20000390 	.word	0x20000390
 8000f58:	0800964f 	.word	0x0800964f
 8000f5c:	08008fff 	.word	0x08008fff

08000f60 <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 8000f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f62:	b0c3      	sub	sp, #268	; 0x10c
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8000f64:	2301      	movs	r3, #1
 8000f66:	f8ad 3004 	strh.w	r3, [sp, #4]

  uint32_t tickstart = HAL_GetTick();
 8000f6a:	f001 ff75 	bl	8002e58 <HAL_GetTick>

  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000f6e:	4c10      	ldr	r4, [pc, #64]	; (8000fb0 <enableNotification+0x50>)
 8000f70:	4e10      	ldr	r6, [pc, #64]	; (8000fb4 <enableNotification+0x54>)
  uint32_t tickstart = HAL_GetTick();
 8000f72:	4607      	mov	r7, r0
 8000f74:	4625      	mov	r5, r4
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000f76:	8831      	ldrh	r1, [r6, #0]
 8000f78:	8860      	ldrh	r0, [r4, #2]
 8000f7a:	3102      	adds	r1, #2
 8000f7c:	ab01      	add	r3, sp, #4
 8000f7e:	2202      	movs	r2, #2
 8000f80:	b289      	uxth	r1, r1
 8000f82:	f006 fb3b 	bl	80075fc <aci_gatt_write_charac_descriptor>
 8000f86:	2846      	cmp	r0, #70	; 0x46
 8000f88:	d106      	bne.n	8000f98 <enableNotification+0x38>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000f8a:	f001 ff65 	bl	8002e58 <HAL_GetTick>
 8000f8e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f92:	1bc0      	subs	r0, r0, r7
 8000f94:	4298      	cmp	r0, r3
 8000f96:	d9ee      	bls.n	8000f76 <enableNotification+0x16>
  }
  notification_enabled = TRUE;
 8000f98:	2301      	movs	r3, #1
  STLBLE_PRINTF("notification_enabled has been enabled!!!");
 8000f9a:	4907      	ldr	r1, [pc, #28]	; (8000fb8 <enableNotification+0x58>)
  notification_enabled = TRUE;
 8000f9c:	716b      	strb	r3, [r5, #5]
  STLBLE_PRINTF("notification_enabled has been enabled!!!");
 8000f9e:	a802      	add	r0, sp, #8
 8000fa0:	f007 f9d0 	bl	8008344 <strcpy>
 8000fa4:	2128      	movs	r1, #40	; 0x28
 8000fa6:	a802      	add	r0, sp, #8
 8000fa8:	f000 faee 	bl	8001588 <CDC_Fill_Buffer>
}
 8000fac:	b043      	add	sp, #268	; 0x10c
 8000fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb0:	20000390 	.word	0x20000390
 8000fb4:	20000b74 	.word	0x20000b74
 8000fb8:	0800966e 	.word	0x0800966e

08000fbc <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000fbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000fbe:	4606      	mov	r6, r0
	BSP_LED_Toggle(LED1);
 8000fc0:	2000      	movs	r0, #0
{
 8000fc2:	460d      	mov	r5, r1
	BSP_LED_Toggle(LED1);
 8000fc4:	f001 fa9e 	bl	8002504 <BSP_LED_Toggle>
  if(BLE_Role == SERVER) {
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <sendData+0x44>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d10a      	bne.n	8000fe6 <sendData+0x2a>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <sendData+0x48>)
 8000fd2:	8819      	ldrh	r1, [r3, #0]
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <sendData+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	8818      	ldrh	r0, [r3, #0]
 8000fda:	9600      	str	r6, [sp, #0]
 8000fdc:	462b      	mov	r3, r5
 8000fde:	f006 faaf 	bl	8007540 <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 8000fe2:	b002      	add	sp, #8
 8000fe4:	bd70      	pop	{r4, r5, r6, pc}
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <sendData+0x50>)
 8000fe8:	8858      	ldrh	r0, [r3, #2]
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <sendData+0x54>)
 8000fec:	881c      	ldrh	r4, [r3, #0]
 8000fee:	3401      	adds	r4, #1
 8000ff0:	4633      	mov	r3, r6
 8000ff2:	462a      	mov	r2, r5
 8000ff4:	b2a1      	uxth	r1, r4
}
 8000ff6:	b002      	add	sp, #8
 8000ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8000ffc:	f006 bb2c 	b.w	8007658 <aci_gatt_write_without_response>
 8001000:	20000384 	.word	0x20000384
 8001004:	20000b78 	.word	0x20000b78
 8001008:	20000b7a 	.word	0x20000b7a
 800100c:	20000390 	.word	0x20000390
 8001010:	20000b76 	.word	0x20000b76

08001014 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	4605      	mov	r5, r0
 8001018:	b0c1      	sub	sp, #260	; 0x104
	BSP_LED_Toggle(LED1);
 800101a:	2000      	movs	r0, #0
{
 800101c:	460e      	mov	r6, r1
	BSP_LED_Toggle(LED1);
 800101e:	f001 fa71 	bl	8002504 <BSP_LED_Toggle>
	STLBLE_PRINTF("Je suis Client \r\n");
 8001022:	4913      	ldr	r1, [pc, #76]	; (8001070 <receiveData+0x5c>)

  for(int i = 0; i < Nb_bytes; i++) {
	  STLBLE_PRINTF("%c", data_buffer[i]);
 8001024:	4f13      	ldr	r7, [pc, #76]	; (8001074 <receiveData+0x60>)
	STLBLE_PRINTF("Je suis Client \r\n");
 8001026:	4668      	mov	r0, sp
 8001028:	f007 f98c 	bl	8008344 <strcpy>
 800102c:	2111      	movs	r1, #17
 800102e:	4668      	mov	r0, sp
 8001030:	f000 faaa 	bl	8001588 <CDC_Fill_Buffer>
  for(int i = 0; i < Nb_bytes; i++) {
 8001034:	462c      	mov	r4, r5
 8001036:	1b63      	subs	r3, r4, r5
 8001038:	429e      	cmp	r6, r3
 800103a:	dc0e      	bgt.n	800105a <receiveData+0x46>
  }
  STLBLE_PRINTF(" \r\n");
 800103c:	490e      	ldr	r1, [pc, #56]	; (8001078 <receiveData+0x64>)
 800103e:	4668      	mov	r0, sp
 8001040:	f007 f980 	bl	8008344 <strcpy>
 8001044:	2103      	movs	r1, #3
 8001046:	4668      	mov	r0, sp
 8001048:	f000 fa9e 	bl	8001588 <CDC_Fill_Buffer>
  fflush(stdout);
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <receiveData+0x68>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6898      	ldr	r0, [r3, #8]
 8001052:	f006 fe93 	bl	8007d7c <fflush>
}
 8001056:	b041      	add	sp, #260	; 0x104
 8001058:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  STLBLE_PRINTF("%c", data_buffer[i]);
 800105a:	4639      	mov	r1, r7
 800105c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8001060:	4668      	mov	r0, sp
 8001062:	f007 f8fd 	bl	8008260 <siprintf>
 8001066:	2101      	movs	r1, #1
 8001068:	4668      	mov	r0, sp
 800106a:	f000 fa8d 	bl	8001588 <CDC_Fill_Buffer>
 800106e:	e7e2      	b.n	8001036 <receiveData+0x22>
 8001070:	08009697 	.word	0x08009697
 8001074:	080096a9 	.word	0x080096a9
 8001078:	080092b5 	.word	0x080092b5
 800107c:	200001fc 	.word	0x200001fc

08001080 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 8001080:	b5f0      	push	{r4, r5, r6, r7, lr}
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8001082:	4b33      	ldr	r3, [pc, #204]	; (8001150 <Add_Sample_Service+0xd0>)
{
 8001084:	b0d3      	sub	sp, #332	; 0x14c
  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8001086:	ac06      	add	r4, sp, #24
 8001088:	f103 0610 	add.w	r6, r3, #16
 800108c:	461d      	mov	r5, r3
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	6859      	ldr	r1, [r3, #4]
 8001092:	4622      	mov	r2, r4
 8001094:	c203      	stmia	r2!, {r0, r1}
 8001096:	3308      	adds	r3, #8
 8001098:	42b3      	cmp	r3, r6
 800109a:	4614      	mov	r4, r2
 800109c:	d1f7      	bne.n	800108e <Add_Sample_Service+0xe>
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 800109e:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <Add_Sample_Service+0xd4>)
 80010a0:	ac0a      	add	r4, sp, #40	; 0x28
 80010a2:	f103 0610 	add.w	r6, r3, #16
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	6859      	ldr	r1, [r3, #4]
 80010aa:	4622      	mov	r2, r4
 80010ac:	c203      	stmia	r2!, {r0, r1}
 80010ae:	3308      	adds	r3, #8
 80010b0:	42b3      	cmp	r3, r6
 80010b2:	4614      	mov	r4, r2
 80010b4:	d1f7      	bne.n	80010a6 <Add_Sample_Service+0x26>
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <Add_Sample_Service+0xd8>)
 80010b8:	ac0e      	add	r4, sp, #56	; 0x38
 80010ba:	6818      	ldr	r0, [r3, #0]
 80010bc:	6859      	ldr	r1, [r3, #4]
 80010be:	4622      	mov	r2, r4
 80010c0:	c203      	stmia	r2!, {r0, r1}
 80010c2:	3308      	adds	r3, #8
 80010c4:	42ab      	cmp	r3, r5
 80010c6:	4614      	mov	r4, r2
 80010c8:	d1f7      	bne.n	80010ba <Add_Sample_Service+0x3a>

  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 80010ca:	4e24      	ldr	r6, [pc, #144]	; (800115c <Add_Sample_Service+0xdc>)
 80010cc:	9600      	str	r6, [sp, #0]
 80010ce:	2307      	movs	r3, #7
 80010d0:	2201      	movs	r2, #1
 80010d2:	a906      	add	r1, sp, #24
 80010d4:	2002      	movs	r0, #2
 80010d6:	f006 f9a3 	bl	8007420 <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80010da:	4603      	mov	r3, r0
 80010dc:	bb68      	cbnz	r0, 800113a <Add_Sample_Service+0xba>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80010de:	2510      	movs	r5, #16
 80010e0:	4f1f      	ldr	r7, [pc, #124]	; (8001160 <Add_Sample_Service+0xe0>)
 80010e2:	8830      	ldrh	r0, [r6, #0]
 80010e4:	9705      	str	r7, [sp, #20]
 80010e6:	2401      	movs	r4, #1
 80010e8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80010ec:	e9cd 5403 	strd	r5, r4, [sp, #12]
 80010f0:	2314      	movs	r3, #20
 80010f2:	9500      	str	r5, [sp, #0]
 80010f4:	aa0a      	add	r2, sp, #40	; 0x28
 80010f6:	2102      	movs	r1, #2
 80010f8:	f006 f9cc 	bl	8007494 <aci_gatt_add_char>
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80010fc:	4603      	mov	r3, r0
 80010fe:	b9e0      	cbnz	r0, 800113a <Add_Sample_Service+0xba>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8001100:	8830      	ldrh	r0, [r6, #0]
 8001102:	4e18      	ldr	r6, [pc, #96]	; (8001164 <Add_Sample_Service+0xe4>)
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	230c      	movs	r3, #12
 8001108:	e9cd 4604 	strd	r4, r6, [sp, #16]
 800110c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	aa0e      	add	r2, sp, #56	; 0x38
 8001114:	2314      	movs	r3, #20
 8001116:	2102      	movs	r1, #2
 8001118:	f006 f9bc 	bl	8007494 <aci_gatt_add_char>
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800111c:	4604      	mov	r4, r0
 800111e:	b960      	cbnz	r0, 800113a <Add_Sample_Service+0xba>

  STLBLE_PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\r\n", TXCharHandle, RXCharHandle);
 8001120:	4911      	ldr	r1, [pc, #68]	; (8001168 <Add_Sample_Service+0xe8>)
 8001122:	8833      	ldrh	r3, [r6, #0]
 8001124:	883a      	ldrh	r2, [r7, #0]
 8001126:	a812      	add	r0, sp, #72	; 0x48
 8001128:	f007 f89a 	bl	8008260 <siprintf>
 800112c:	2140      	movs	r1, #64	; 0x40
 800112e:	a812      	add	r0, sp, #72	; 0x48
 8001130:	f000 fa2a 	bl	8001588 <CDC_Fill_Buffer>
  return BLE_STATUS_SUCCESS;

fail:
	STLBLE_PRINTF("Error while adding Sample Service.\r\n");
  return BLE_STATUS_ERROR ;
}
 8001134:	4620      	mov	r0, r4
 8001136:	b053      	add	sp, #332	; 0x14c
 8001138:	bdf0      	pop	{r4, r5, r6, r7, pc}
	STLBLE_PRINTF("Error while adding Sample Service.\r\n");
 800113a:	490c      	ldr	r1, [pc, #48]	; (800116c <Add_Sample_Service+0xec>)
 800113c:	a812      	add	r0, sp, #72	; 0x48
 800113e:	f007 f901 	bl	8008344 <strcpy>
 8001142:	2124      	movs	r1, #36	; 0x24
 8001144:	a812      	add	r0, sp, #72	; 0x48
 8001146:	f000 fa1f 	bl	8001588 <CDC_Fill_Buffer>
  return BLE_STATUS_ERROR ;
 800114a:	2447      	movs	r4, #71	; 0x47
 800114c:	e7f2      	b.n	8001134 <Add_Sample_Service+0xb4>
 800114e:	bf00      	nop
 8001150:	0800900f 	.word	0x0800900f
 8001154:	08008fef 	.word	0x08008fef
 8001158:	08008fff 	.word	0x08008fff
 800115c:	20000b7a 	.word	0x20000b7a
 8001160:	20000b78 	.word	0x20000b78
 8001164:	20000b7c 	.word	0x20000b7c
 8001168:	080096ac 	.word	0x080096ac
 800116c:	080096ed 	.word	0x080096ed

08001170 <Attribute_Modified_CB>:
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
  if(handle == RXCharHandle + 1){
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <Attribute_Modified_CB+0x28>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	4298      	cmp	r0, r3
 8001178:	d102      	bne.n	8001180 <Attribute_Modified_CB+0x10>
    receiveData(att_data, data_length);
 800117a:	4610      	mov	r0, r2
 800117c:	f7ff bf4a 	b.w	8001014 <receiveData>
    //STLBLE_PRINTF("Receive---Attribute_Modified_CB\r\n");
  } else if (handle == TXCharHandle + 2) {
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <Attribute_Modified_CB+0x2c>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	3302      	adds	r3, #2
 8001186:	4298      	cmp	r0, r3
 8001188:	d104      	bne.n	8001194 <Attribute_Modified_CB+0x24>
    if(att_data[0] == 0x01)
 800118a:	7813      	ldrb	r3, [r2, #0]
 800118c:	2b01      	cmp	r3, #1
      notification_enabled = TRUE;
 800118e:	bf04      	itt	eq
 8001190:	4a03      	ldreq	r2, [pc, #12]	; (80011a0 <Attribute_Modified_CB+0x30>)
 8001192:	7153      	strbeq	r3, [r2, #5]
  }
}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000b7c 	.word	0x20000b7c
 800119c:	20000b78 	.word	0x20000b78
 80011a0:	20000390 	.word	0x20000390

080011a4 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  connected = TRUE;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <GAP_ConnectionComplete_CB+0x54>)
  connection_handle = handle;

  STLBLE_PRINTF("----------Y Connected to device:");
  for(int i = 5; i > 0; i--){
	  STLBLE_PRINTF("%02X-", addr[i]);
 80011a8:	4f14      	ldr	r7, [pc, #80]	; (80011fc <GAP_ConnectionComplete_CB+0x58>)
{
 80011aa:	b0c1      	sub	sp, #260	; 0x104
  connected = TRUE;
 80011ac:	2201      	movs	r2, #1
{
 80011ae:	4604      	mov	r4, r0
  connected = TRUE;
 80011b0:	609a      	str	r2, [r3, #8]
  STLBLE_PRINTF("----------Y Connected to device:");
 80011b2:	4668      	mov	r0, sp
  connection_handle = handle;
 80011b4:	8059      	strh	r1, [r3, #2]
  STLBLE_PRINTF("----------Y Connected to device:");
 80011b6:	4912      	ldr	r1, [pc, #72]	; (8001200 <GAP_ConnectionComplete_CB+0x5c>)
 80011b8:	f007 f8c4 	bl	8008344 <strcpy>
 80011bc:	2120      	movs	r1, #32
 80011be:	4668      	mov	r0, sp
 80011c0:	f000 f9e2 	bl	8001588 <CDC_Fill_Buffer>
 80011c4:	1da5      	adds	r5, r4, #6
 80011c6:	1c66      	adds	r6, r4, #1
	  STLBLE_PRINTF("%02X-", addr[i]);
 80011c8:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80011cc:	4639      	mov	r1, r7
 80011ce:	4668      	mov	r0, sp
 80011d0:	f007 f846 	bl	8008260 <siprintf>
 80011d4:	2103      	movs	r1, #3
 80011d6:	4668      	mov	r0, sp
 80011d8:	f000 f9d6 	bl	8001588 <CDC_Fill_Buffer>
  for(int i = 5; i > 0; i--){
 80011dc:	42b5      	cmp	r5, r6
 80011de:	d1f3      	bne.n	80011c8 <GAP_ConnectionComplete_CB+0x24>
  }
  STLBLE_PRINTF("%02X\r\n", addr[0]);
 80011e0:	7822      	ldrb	r2, [r4, #0]
 80011e2:	4908      	ldr	r1, [pc, #32]	; (8001204 <GAP_ConnectionComplete_CB+0x60>)
 80011e4:	4668      	mov	r0, sp
 80011e6:	f007 f83b 	bl	8008260 <siprintf>
 80011ea:	2104      	movs	r1, #4
 80011ec:	4668      	mov	r0, sp
 80011ee:	f000 f9cb 	bl	8001588 <CDC_Fill_Buffer>
}
 80011f2:	b041      	add	sp, #260	; 0x104
 80011f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000390 	.word	0x20000390
 80011fc:	08009733 	.word	0x08009733
 8001200:	08009712 	.word	0x08009712
 8001204:	08009739 	.word	0x08009739

08001208 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8001208:	b530      	push	{r4, r5, lr}
  connected = FALSE;
 800120a:	4c0b      	ldr	r4, [pc, #44]	; (8001238 <GAP_DisconnectionComplete_CB+0x30>)

  STLBLE_PRINTF("------x Disconnected\r\n");
 800120c:	490b      	ldr	r1, [pc, #44]	; (800123c <GAP_DisconnectionComplete_CB+0x34>)
{
 800120e:	b0c1      	sub	sp, #260	; 0x104
  connected = FALSE;
 8001210:	2500      	movs	r5, #0
  STLBLE_PRINTF("------x Disconnected\r\n");
 8001212:	4668      	mov	r0, sp
  connected = FALSE;
 8001214:	60a5      	str	r5, [r4, #8]
  STLBLE_PRINTF("------x Disconnected\r\n");
 8001216:	f007 f895 	bl	8008344 <strcpy>
 800121a:	2116      	movs	r1, #22
 800121c:	4668      	mov	r0, sp
 800121e:	f000 f9b3 	bl	8001588 <CDC_Fill_Buffer>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <GAP_DisconnectionComplete_CB+0x38>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8001228:	7165      	strb	r5, [r4, #5]
  start_read_tx_char_handle = FALSE;
 800122a:	7025      	strb	r5, [r4, #0]
  start_read_rx_char_handle = FALSE;
 800122c:	7125      	strb	r5, [r4, #4]
  end_read_tx_char_handle = FALSE;
 800122e:	7325      	strb	r5, [r4, #12]
  end_read_rx_char_handle = FALSE;
 8001230:	7365      	strb	r5, [r4, #13]
}
 8001232:	b041      	add	sp, #260	; 0x104
 8001234:	bd30      	pop	{r4, r5, pc}
 8001236:	bf00      	nop
 8001238:	20000390 	.word	0x20000390
 800123c:	08009740 	.word	0x08009740
 8001240:	20000001 	.word	0x20000001

08001244 <GATT_Notification_CB>:
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
  if (attr_handle == tx_handle+1) {
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <GATT_Notification_CB+0x14>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	4298      	cmp	r0, r3
 800124c:	d102      	bne.n	8001254 <GATT_Notification_CB+0x10>
    receiveData(attr_value, attr_len);
 800124e:	4610      	mov	r0, r2
 8001250:	f7ff bee0 	b.w	8001014 <receiveData>
    //STLBLE_PRINTF("Receive---GATT_Notification_CB\r\n");
  }
}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000b74 	.word	0x20000b74

0800125c <user_notify>:
{
  hci_uart_pckt *hci_pckt = pData;
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;

  if(hci_pckt->type != HCI_EVENT_PKT)
 800125c:	7802      	ldrb	r2, [r0, #0]
 800125e:	2a04      	cmp	r2, #4
{
 8001260:	4603      	mov	r3, r0
  if(hci_pckt->type != HCI_EVENT_PKT)
 8001262:	d162      	bne.n	800132a <user_notify+0xce>
    return;

  switch(event_pckt->evt){
 8001264:	7842      	ldrb	r2, [r0, #1]
 8001266:	2a3e      	cmp	r2, #62	; 0x3e
 8001268:	d005      	beq.n	8001276 <user_notify+0x1a>
 800126a:	2aff      	cmp	r2, #255	; 0xff
 800126c:	d00b      	beq.n	8001286 <user_notify+0x2a>
 800126e:	2a05      	cmp	r2, #5
 8001270:	d15b      	bne.n	800132a <user_notify+0xce>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8001272:	f7ff bfc9 	b.w	8001208 <GAP_DisconnectionComplete_CB>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;

      switch(evt->subevent){
 8001276:	78c2      	ldrb	r2, [r0, #3]
 8001278:	2a01      	cmp	r2, #1
 800127a:	d156      	bne.n	800132a <user_notify+0xce>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 800127c:	f8b0 1005 	ldrh.w	r1, [r0, #5]
 8001280:	3009      	adds	r0, #9
 8001282:	f7ff bf8f 	b.w	80011a4 <GAP_ConnectionComplete_CB>
    break;

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
      switch(blue_evt->ecode){
 8001286:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800128a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800128e:	428a      	cmp	r2, r1
 8001290:	d01a      	beq.n	80012c8 <user_notify+0x6c>
 8001292:	f5b2 6f41 	cmp.w	r2, #3088	; 0xc10
 8001296:	d204      	bcs.n	80012a2 <user_notify+0x46>
 8001298:	f640 4101 	movw	r1, #3073	; 0xc01
 800129c:	428a      	cmp	r2, r1
 800129e:	d006      	beq.n	80012ae <user_notify+0x52>
 80012a0:	4770      	bx	lr
 80012a2:	d030      	beq.n	8001306 <user_notify+0xaa>
 80012a4:	f640 4112 	movw	r1, #3090	; 0xc12
 80012a8:	428a      	cmp	r2, r1
 80012aa:	d015      	beq.n	80012d8 <user_notify+0x7c>
 80012ac:	4770      	bx	lr

      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 80012ae:	4a1f      	ldr	r2, [pc, #124]	; (800132c <user_notify+0xd0>)
 80012b0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 80012b4:	7812      	ldrb	r2, [r2, #0]
 80012b6:	7a59      	ldrb	r1, [r3, #9]
 80012b8:	2a01      	cmp	r2, #1
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 80012ba:	bf0c      	ite	eq
 80012bc:	f103 020c 	addeq.w	r2, r3, #12
          }
          else {
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 80012c0:	f103 020a 	addne.w	r2, r3, #10
 80012c4:	f7ff bf54 	b.w	8001170 <Attribute_Modified_CB>
        }
        break;
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 80012c8:	79c1      	ldrb	r1, [r0, #7]
 80012ca:	3902      	subs	r1, #2
 80012cc:	f100 020a 	add.w	r2, r0, #10
 80012d0:	b2c9      	uxtb	r1, r1
 80012d2:	8900      	ldrh	r0, [r0, #8]
 80012d4:	f7ff bfb6 	b.w	8001244 <GATT_Notification_CB>
        }
        break;
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 80012d8:	4a15      	ldr	r2, [pc, #84]	; (8001330 <user_notify+0xd4>)
 80012da:	7812      	ldrb	r2, [r2, #0]
 80012dc:	bb2a      	cbnz	r2, 800132a <user_notify+0xce>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 80012de:	4a15      	ldr	r2, [pc, #84]	; (8001334 <user_notify+0xd8>)
 80012e0:	7811      	ldrb	r1, [r2, #0]
 80012e2:	b139      	cbz	r1, 80012f4 <user_notify+0x98>
 80012e4:	7b11      	ldrb	r1, [r2, #12]
 80012e6:	b929      	cbnz	r1, 80012f4 <user_notify+0x98>
          {
            tx_handle = resp->attr_handle;
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <user_notify+0xdc>)
 80012ea:	8901      	ldrh	r1, [r0, #8]
            printf("TX Char Handle %04X\n", tx_handle);
 80012ec:	4813      	ldr	r0, [pc, #76]	; (800133c <user_notify+0xe0>)
            tx_handle = resp->attr_handle;
 80012ee:	8019      	strh	r1, [r3, #0]
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
 80012f0:	f006 bf2a 	b.w	8008148 <iprintf>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 80012f4:	7911      	ldrb	r1, [r2, #4]
 80012f6:	b1c1      	cbz	r1, 800132a <user_notify+0xce>
 80012f8:	7b52      	ldrb	r2, [r2, #13]
 80012fa:	b9b2      	cbnz	r2, 800132a <user_notify+0xce>
            rx_handle = resp->attr_handle;
 80012fc:	8919      	ldrh	r1, [r3, #8]
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <user_notify+0xe4>)
            printf("RX Char Handle %04X\n", rx_handle);
 8001300:	4810      	ldr	r0, [pc, #64]	; (8001344 <user_notify+0xe8>)
            rx_handle = resp->attr_handle;
 8001302:	8019      	strh	r1, [r3, #0]
 8001304:	e7f4      	b.n	80012f0 <user_notify+0x94>
          }
        }
        break;

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <user_notify+0xd4>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b973      	cbnz	r3, 800132a <user_notify+0xce>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <user_notify+0xd8>)
 800130e:	7819      	ldrb	r1, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	b121      	cbz	r1, 800131e <user_notify+0xc2>
 8001314:	7b19      	ldrb	r1, [r3, #12]
 8001316:	b911      	cbnz	r1, 800131e <user_notify+0xc2>
          {
            end_read_tx_char_handle = TRUE;
 8001318:	2201      	movs	r2, #1
 800131a:	731a      	strb	r2, [r3, #12]
 800131c:	4770      	bx	lr
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 800131e:	7913      	ldrb	r3, [r2, #4]
 8001320:	b11b      	cbz	r3, 800132a <user_notify+0xce>
 8001322:	7b53      	ldrb	r3, [r2, #13]
 8001324:	b90b      	cbnz	r3, 800132a <user_notify+0xce>
          {
            end_read_rx_char_handle = TRUE;
 8001326:	2301      	movs	r3, #1
 8001328:	7353      	strb	r3, [r2, #13]
        break;
      }
    }
    break;
  }
}
 800132a:	4770      	bx	lr
 800132c:	20000000 	.word	0x20000000
 8001330:	20000384 	.word	0x20000384
 8001334:	20000390 	.word	0x20000390
 8001338:	20000b74 	.word	0x20000b74
 800133c:	08009757 	.word	0x08009757
 8001340:	20000b76 	.word	0x20000b76
 8001344:	0800976c 	.word	0x0800976c

08001348 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8001348:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4c17      	ldr	r4, [pc, #92]	; (80013a8 <HAL_PCD_MspInit+0x60>)
 800134c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001354:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 8001356:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	9b01      	ldr	r3, [sp, #4]

  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001364:	2302      	movs	r3, #2
 8001366:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2500      	movs	r5, #0
 800136c:	2303      	movs	r3, #3
 800136e:	e9cd 5305 	strd	r5, r3, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001374:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800137a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f001 fe3c 	bl	8002ff8 <HAL_GPIO_Init>

  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001380:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001386:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001388:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800138a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800138e:	9302      	str	r3, [sp, #8]

  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8001390:	462a      	mov	r2, r5
 8001392:	2106      	movs	r1, #6
 8001394:	2043      	movs	r0, #67	; 0x43
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001396:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8001398:	f001 fd7a 	bl	8002e90 <HAL_NVIC_SetPriority>

  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800139c:	2043      	movs	r0, #67	; 0x43
 800139e:	f001 fdab 	bl	8002ef8 <HAL_NVIC_EnableIRQ>
}
 80013a2:	b009      	add	sp, #36	; 0x24
 80013a4:	bd30      	pop	{r4, r5, pc}
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000

080013ac <HAL_TIM_Base_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013ac:	b507      	push	{r0, r1, r2, lr}
  if(htim->Instance == TIM4) {
 80013ae:	6803      	ldr	r3, [r0, #0]
 80013b0:	4a17      	ldr	r2, [pc, #92]	; (8001410 <HAL_TIM_Base_MspInit+0x64>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d114      	bne.n	80013e0 <HAL_TIM_Base_MspInit+0x34>
    /* TIMx Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <HAL_TIM_Base_MspInit+0x68>)
 80013b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013ba:	f042 0204 	orr.w	r2, r2, #4
 80013be:	659a      	str	r2, [r3, #88]	; 0x58
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	9300      	str	r3, [sp, #0]

    /* Set Interrupt Group Priority */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0xF, 0);
 80013c8:	201e      	movs	r0, #30
 80013ca:	2200      	movs	r2, #0
 80013cc:	210f      	movs	r1, #15
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013ce:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0xF, 0);
 80013d0:	f001 fd5e 	bl	8002e90 <HAL_NVIC_SetPriority>

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013d4:	201e      	movs	r0, #30
    HAL_NVIC_SetPriority(TIM5_IRQn, 0xF, 0);

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  }
}
 80013d6:	b003      	add	sp, #12
 80013d8:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80013dc:	f001 bd8c 	b.w	8002ef8 <HAL_NVIC_EnableIRQ>
  } else if (htim->Instance == TIM5) {
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <HAL_TIM_Base_MspInit+0x6c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d110      	bne.n	8001408 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_TIM_Base_MspInit+0x68>)
 80013e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013ea:	f042 0208 	orr.w	r2, r2, #8
 80013ee:	659a      	str	r2, [r3, #88]	; 0x58
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0xF, 0);
 80013f8:	2032      	movs	r0, #50	; 0x32
 80013fa:	2200      	movs	r2, #0
 80013fc:	210f      	movs	r1, #15
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013fe:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0xF, 0);
 8001400:	f001 fd46 	bl	8002e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001404:	2032      	movs	r0, #50	; 0x32
 8001406:	e7e6      	b.n	80013d6 <HAL_TIM_Base_MspInit+0x2a>
}
 8001408:	b003      	add	sp, #12
 800140a:	f85d fb04 	ldr.w	pc, [sp], #4
 800140e:	bf00      	nop
 8001410:	40000800 	.word	0x40000800
 8001414:	40021000 	.word	0x40021000
 8001418:	40000c00 	.word	0x40000c00

0800141c <HAL_TIM_OC_MspInit>:
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{ 
  /* TIM1 Peripheral clock enable */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_TIM_OC_MspInit+0x2c>)
{ 
 800141e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001420:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001426:	661a      	str	r2, [r3, #96]	; 0x60
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800142e:	9301      	str	r3, [sp, #4]

  /* Enable TIM1 global Interrupt & set priority  */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2108      	movs	r1, #8
 8001434:	201b      	movs	r0, #27
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001436:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 8001438:	f001 fd2a 	bl	8002e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800143c:	201b      	movs	r0, #27
}
 800143e:	b003      	add	sp, #12
 8001440:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001444:	f001 bd58 	b.w	8002ef8 <HAL_NVIC_EnableIRQ>
 8001448:	40021000 	.word	0x40021000

0800144c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800144c:	4770      	bx	lr

0800144e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800144e:	e7fe      	b.n	800144e <HardFault_Handler>

08001450 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler>

08001452 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001452:	e7fe      	b.n	8001452 <BusFault_Handler>

08001454 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001454:	e7fe      	b.n	8001454 <UsageFault_Handler>

08001456 <SVC_Handler>:
 8001456:	4770      	bx	lr

08001458 <DebugMon_Handler>:
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:
 800145a:	4770      	bx	lr

0800145c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800145c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145e:	f001 fcf3 	bl	8002e48 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001466:	f001 bd78 	b.w	8002f5a <HAL_SYSTICK_IRQHandler>
	...

0800146c <TIM1_CC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimCCHandle);
 800146c:	4801      	ldr	r0, [pc, #4]	; (8001474 <TIM1_CC_IRQHandler+0x8>)
 800146e:	f004 bc3f 	b.w	8005cf0 <HAL_TIM_IRQHandler>
 8001472:	bf00      	nop
 8001474:	20000a30 	.word	0x20000a30

08001478 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_EXTI_IRQHandler(&hexti5);
 8001478:	4801      	ldr	r0, [pc, #4]	; (8001480 <EXTI9_5_IRQHandler+0x8>)
 800147a:	f001 bda5 	b.w	8002fc8 <HAL_EXTI_IRQHandler>
 800147e:	bf00      	nop
 8001480:	20000a1c 	.word	0x20000a1c

08001484 <OTG_FS_IRQHandler>:
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
  HAL_PCD_IRQHandler(&hpcd);
 8001484:	4801      	ldr	r0, [pc, #4]	; (800148c <OTG_FS_IRQHandler+0x8>)
 8001486:	f002 bd5d 	b.w	8003f44 <HAL_PCD_IRQHandler>
 800148a:	bf00      	nop
 800148c:	200023c4 	.word	0x200023c4

08001490 <TIM3_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8001490:	4801      	ldr	r0, [pc, #4]	; (8001498 <TIM3_IRQHandler+0x8>)
 8001492:	f004 bc2d 	b.w	8005cf0 <HAL_TIM_IRQHandler>
 8001496:	bf00      	nop
 8001498:	20002384 	.word	0x20002384

0800149c <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hbusi2c3);
 800149c:	4801      	ldr	r0, [pc, #4]	; (80014a4 <I2C3_EV_IRQHandler+0x8>)
 800149e:	f002 ba65 	b.w	800396c <HAL_I2C_EV_IRQHandler>
 80014a2:	bf00      	nop
 80014a4:	200028cc 	.word	0x200028cc

080014a8 <I2C3_ER_IRQHandler>:
void I2C3_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hbusi2c3);
 80014a8:	4801      	ldr	r0, [pc, #4]	; (80014b0 <I2C3_ER_IRQHandler+0x8>)
 80014aa:	f002 bc71 	b.w	8003d90 <HAL_I2C_ER_IRQHandler>
 80014ae:	bf00      	nop
 80014b0:	200028cc 	.word	0x200028cc

080014b4 <CDC_Itf_DeInit>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
  return (USBD_OK);
}
 80014b4:	2000      	movs	r0, #0
 80014b6:	4770      	bx	lr

080014b8 <CDC_Itf_Receive>:
//  }
//  
//  /* Initiate next USB packet transfer */
//  USBD_CDC_ReceivePacket(&USBD_Device);
  return (USBD_OK);
}
 80014b8:	2000      	movs	r0, #0
 80014ba:	4770      	bx	lr

080014bc <CDC_Itf_Init>:
  TIMx_CLK_ENABLE();
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <CDC_Itf_Init+0x6c>)
{
 80014be:	b507      	push	{r0, r1, r2, lr}
  TIMx_CLK_ENABLE();
 80014c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014c2:	f042 0202 	orr.w	r2, r2, #2
 80014c6:	659a      	str	r2, [r3, #88]	; 0x58
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIMx_IRQn, 0x6, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2106      	movs	r1, #6
 80014d4:	201d      	movs	r0, #29
  TIMx_CLK_ENABLE();
 80014d6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIMx_IRQn, 0x6, 0);
 80014d8:	f001 fcda 	bl	8002e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 80014dc:	201d      	movs	r0, #29
 80014de:	f001 fd0b 	bl	8002ef8 <HAL_NVIC_EnableIRQ>
  * @retval None.
  */
static void CDC_TIM_Config(void)
{  
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 80014e2:	4812      	ldr	r0, [pc, #72]	; (800152c <CDC_Itf_Init+0x70>)
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <CDC_Itf_Init+0x74>)
 80014e6:	6003      	str	r3, [r0, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 80014e8:	f241 3387 	movw	r3, #4999	; 0x1387
 80014ec:	60c3      	str	r3, [r0, #12]
  TimHandle.Init.Prescaler = 80-1;
 80014ee:	234f      	movs	r3, #79	; 0x4f
 80014f0:	6043      	str	r3, [r0, #4]
  TimHandle.Init.ClockDivision = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	6103      	str	r3, [r0, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f6:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 80014f8:	f004 fd10 	bl	8005f1c <HAL_TIM_Base_Init>
 80014fc:	b108      	cbz	r0, 8001502 <CDC_Itf_Init+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 80014fe:	f7ff fc61 	bl	8000dc4 <Error_Handler>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8001502:	480a      	ldr	r0, [pc, #40]	; (800152c <CDC_Itf_Init+0x70>)
 8001504:	f004 fbb6 	bl	8005c74 <HAL_TIM_Base_Start_IT>
 8001508:	b108      	cbz	r0, 800150e <CDC_Itf_Init+0x52>
    Error_Handler();
 800150a:	f7ff fc5b 	bl	8000dc4 <Error_Handler>
  USBD_CDC_SetTxBuffer(&USBD_Device, UserTxBuffer, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	4908      	ldr	r1, [pc, #32]	; (8001534 <CDC_Itf_Init+0x78>)
 8001512:	4809      	ldr	r0, [pc, #36]	; (8001538 <CDC_Itf_Init+0x7c>)
 8001514:	f005 fa99 	bl	8006a4a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&USBD_Device, UserRxBuffer);
 8001518:	4908      	ldr	r1, [pc, #32]	; (800153c <CDC_Itf_Init+0x80>)
 800151a:	4807      	ldr	r0, [pc, #28]	; (8001538 <CDC_Itf_Init+0x7c>)
 800151c:	f005 fa9d 	bl	8006a5a <USBD_CDC_SetRxBuffer>
}
 8001520:	2000      	movs	r0, #0
 8001522:	b003      	add	sp, #12
 8001524:	f85d fb04 	ldr.w	pc, [sp], #4
 8001528:	40021000 	.word	0x40021000
 800152c:	20002384 	.word	0x20002384
 8001530:	40000400 	.word	0x40000400
 8001534:	20001384 	.word	0x20001384
 8001538:	20000780 	.word	0x20000780
 800153c:	20001b84 	.word	0x20001b84

08001540 <CDC_Itf_Control>:
  switch (cmd)
 8001540:	2820      	cmp	r0, #32
 8001542:	d003      	beq.n	800154c <CDC_Itf_Control+0xc>
 8001544:	2821      	cmp	r0, #33	; 0x21
 8001546:	d00b      	beq.n	8001560 <CDC_Itf_Control+0x20>
}
 8001548:	2000      	movs	r0, #0
 800154a:	4770      	bx	lr
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <CDC_Itf_Control+0x44>)
 800154e:	680a      	ldr	r2, [r1, #0]
 8001550:	601a      	str	r2, [r3, #0]
    LineCoding.format     = pbuf[4];
 8001552:	790a      	ldrb	r2, [r1, #4]
 8001554:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 8001556:	794a      	ldrb	r2, [r1, #5]
 8001558:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 800155a:	798a      	ldrb	r2, [r1, #6]
 800155c:	719a      	strb	r2, [r3, #6]
 800155e:	e7f3      	b.n	8001548 <CDC_Itf_Control+0x8>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <CDC_Itf_Control+0x44>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	0a12      	lsrs	r2, r2, #8
 800156a:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800156c:	885a      	ldrh	r2, [r3, #2]
 800156e:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8001570:	78da      	ldrb	r2, [r3, #3]
 8001572:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8001574:	791a      	ldrb	r2, [r3, #4]
 8001576:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 8001578:	795a      	ldrb	r2, [r3, #5]
 800157a:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 800157c:	799b      	ldrb	r3, [r3, #6]
 800157e:	718b      	strb	r3, [r1, #6]
    break;
 8001580:	e7e2      	b.n	8001548 <CDC_Itf_Control+0x8>
 8001582:	bf00      	nop
 8001584:	20000004 	.word	0x20000004

08001588 <CDC_Fill_Buffer>:
{
 8001588:	b570      	push	{r4, r5, r6, lr}
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 800158a:	4d09      	ldr	r5, [pc, #36]	; (80015b0 <CDC_Fill_Buffer+0x28>)
 800158c:	4e09      	ldr	r6, [pc, #36]	; (80015b4 <CDC_Fill_Buffer+0x2c>)
  for (i = 0; i < TotalLen; i++)
 800158e:	2200      	movs	r2, #0
 8001590:	b294      	uxth	r4, r2
 8001592:	42a1      	cmp	r1, r4
 8001594:	f102 0201 	add.w	r2, r2, #1
 8001598:	d801      	bhi.n	800159e <CDC_Fill_Buffer+0x16>
}
 800159a:	2000      	movs	r0, #0
 800159c:	bd70      	pop	{r4, r5, r6, pc}
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 800159e:	682b      	ldr	r3, [r5, #0]
 80015a0:	5d04      	ldrb	r4, [r0, r4]
 80015a2:	54f4      	strb	r4, [r6, r3]
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_RX_DATA_SIZE;
 80015a4:	3301      	adds	r3, #1
 80015a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015aa:	602b      	str	r3, [r5, #0]
 80015ac:	e7f0      	b.n	8001590 <CDC_Fill_Buffer+0x8>
 80015ae:	bf00      	nop
 80015b0:	200003d8 	.word	0x200003d8
 80015b4:	20001384 	.word	0x20001384

080015b8 <CDC_TIM_PeriodElapsedCallback>:
{
 80015b8:	b538      	push	{r3, r4, r5, lr}
  if(UserTxBufPtrOut != UserTxBufPtrIn)
 80015ba:	4d0d      	ldr	r5, [pc, #52]	; (80015f0 <CDC_TIM_PeriodElapsedCallback+0x38>)
 80015bc:	e9d5 4100 	ldrd	r4, r1, [r5]
 80015c0:	42a1      	cmp	r1, r4
 80015c2:	d014      	beq.n	80015ee <CDC_TIM_PeriodElapsedCallback+0x36>
    USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <CDC_TIM_PeriodElapsedCallback+0x3c>)
 80015c6:	480c      	ldr	r0, [pc, #48]	; (80015f8 <CDC_TIM_PeriodElapsedCallback+0x40>)
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 80015c8:	bf8c      	ite	hi
 80015ca:	f5c1 6400 	rsbhi	r4, r1, #2048	; 0x800
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 80015ce:	1a64      	subls	r4, r4, r1
    USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 80015d0:	b2a2      	uxth	r2, r4
 80015d2:	4419      	add	r1, r3
 80015d4:	f005 fa39 	bl	8006a4a <USBD_CDC_SetTxBuffer>
    if(USBD_CDC_TransmitPacket(&USBD_Device) == USBD_OK)
 80015d8:	4807      	ldr	r0, [pc, #28]	; (80015f8 <CDC_TIM_PeriodElapsedCallback+0x40>)
 80015da:	f005 fa44 	bl	8006a66 <USBD_CDC_TransmitPacket>
 80015de:	b930      	cbnz	r0, 80015ee <CDC_TIM_PeriodElapsedCallback+0x36>
      UserTxBufPtrOut += buffsize;
 80015e0:	686b      	ldr	r3, [r5, #4]
 80015e2:	441c      	add	r4, r3
 80015e4:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 80015e8:	bf08      	it	eq
 80015ea:	4604      	moveq	r4, r0
 80015ec:	606c      	str	r4, [r5, #4]
}
 80015ee:	bd38      	pop	{r3, r4, r5, pc}
 80015f0:	200003d8 	.word	0x200003d8
 80015f4:	20001384 	.word	0x20001384
 80015f8:	20000780 	.word	0x20000780

080015fc <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80015fc:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8001600:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001604:	f005 ba7b 	b.w	8006afe <USBD_LL_SetupStage>

08001608 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8001608:	231c      	movs	r3, #28
 800160a:	fb03 0301 	mla	r3, r3, r1, r0
 800160e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001612:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8001616:	f005 ba9f 	b.w	8006b58 <USBD_LL_DataOutStage>

0800161a <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800161a:	231c      	movs	r3, #28
 800161c:	fb03 0301 	mla	r3, r3, r1, r0
 8001620:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001624:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001626:	f005 bacf 	b.w	8006bc8 <USBD_LL_DataInStage>

0800162a <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 800162a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800162e:	f005 bb60 	b.w	8006cf2 <USBD_LL_SOF>

08001632 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8001632:	b510      	push	{r4, lr}
 8001634:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8001636:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800163a:	f005 fb21 	bl	8006c80 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800163e:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8001642:	2101      	movs	r1, #1
}
 8001644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8001648:	f005 bb41 	b.w	8006cce <USBD_LL_SetSpeed>

0800164c <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_LL_Suspend(hpcd->pData);
 800164c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001650:	f005 bb40 	b.w	8006cd4 <USBD_LL_Suspend>

08001654 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 8001654:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001658:	f005 bb45 	b.w	8006ce6 <USBD_LL_Resume>

0800165c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 800165c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001660:	f005 bb55 	b.w	8006d0e <USBD_LL_IsoOUTIncomplete>

08001664 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8001664:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001668:	f005 bb4f 	b.w	8006d0a <USBD_LL_IsoINIncomplete>

0800166c <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 800166c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001670:	f005 bb4f 	b.w	8006d12 <USBD_LL_DevConnected>

08001674 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 8001674:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001678:	f005 bb4d 	b.w	8006d16 <USBD_LL_DevDisconnected>

0800167c <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800167c:	b570      	push	{r4, r5, r6, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 800167e:	4c15      	ldr	r4, [pc, #84]	; (80016d4 <USBD_LL_Init+0x58>)
  hpcd.Init.dev_endpoints = 5;
 8001680:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001684:	2305      	movs	r3, #5
  hpcd.Init.use_dedicated_ep1 = 0;
 8001686:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 5;
 8001688:	e9c4 2300 	strd	r2, r3, [r4]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd.Init.Sof_enable = 0;
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 0;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 800168c:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001690:	2302      	movs	r3, #2
  hpcd.Init.ep0_mps = 0x40;
 8001692:	2640      	movs	r6, #64	; 0x40
  pdev->pData = &hpcd;
 8001694:	f8c0 4298 	str.w	r4, [r0, #664]	; 0x298
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8001698:	4620      	mov	r0, r4
  hpcd.Init.Sof_enable = 0;
 800169a:	e9c4 3506 	strd	r3, r5, [r4, #24]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800169e:	60e3      	str	r3, [r4, #12]
  hpcd.Init.use_dedicated_ep1 = 0;
 80016a0:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.dma_enable = 0;
 80016a2:	e9c4 5604 	strd	r5, r6, [r4, #16]
  hpcd.Init.lpm_enable = 0;
 80016a6:	e9c4 5508 	strd	r5, r5, [r4, #32]
  hpcd.Init.battery_charging_enable = 0;
 80016aa:	62a5      	str	r5, [r4, #40]	; 0x28
  hpcd.Init.vbus_sensing_enable = 0;
 80016ac:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_PCD_Init(&hpcd);
 80016ae:	f002 fbb6 	bl	8003e1e <HAL_PCD_Init>
  
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 80016b2:	2180      	movs	r1, #128	; 0x80
 80016b4:	4620      	mov	r0, r4
 80016b6:	f003 f854 	bl	8004762 <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 80016ba:	4632      	mov	r2, r6
 80016bc:	4629      	mov	r1, r5
 80016be:	4620      	mov	r0, r4
 80016c0:	f003 f82f 	bl	8004722 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	2101      	movs	r1, #1
 80016c8:	4620      	mov	r0, r4
 80016ca:	f003 f82a 	bl	8004722 <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
}
 80016ce:	4628      	mov	r0, r5
 80016d0:	bd70      	pop	{r4, r5, r6, pc}
 80016d2:	bf00      	nop
 80016d4:	200023c4 	.word	0x200023c4

080016d8 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80016d8:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 80016da:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80016de:	f002 fc1b 	bl	8003f18 <HAL_PCD_Start>
  return USBD_OK;
}
 80016e2:	2000      	movs	r0, #0
 80016e4:	bd08      	pop	{r3, pc}

080016e6 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 80016e6:	b510      	push	{r4, lr}
 80016e8:	461c      	mov	r4, r3
  HAL_PCD_EP_Open(pdev->pData,
 80016ea:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80016ee:	4613      	mov	r3, r2
 80016f0:	4622      	mov	r2, r4
 80016f2:	f002 feff 	bl	80044f4 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 80016f6:	2000      	movs	r0, #0
 80016f8:	bd10      	pop	{r4, pc}

080016fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80016fa:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80016fc:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8001700:	f002 ff30 	bl	8004564 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8001704:	2000      	movs	r0, #0
 8001706:	bd08      	pop	{r3, pc}

08001708 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001708:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800170a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800170e:	f002 ff99 	bl	8004644 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8001712:	2000      	movs	r0, #0
 8001714:	bd08      	pop	{r3, pc}

08001716 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001716:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8001718:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800171c:	f002 ffcb 	bl	80046b6 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8001720:	2000      	movs	r0, #0
 8001722:	bd08      	pop	{r3, pc}

08001724 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8001724:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8001728:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800172c:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8001730:	bf1b      	ittet	ne
 8001732:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8001736:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800173a:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800173e:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001742:	bf08      	it	eq
 8001744:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 8001748:	4770      	bx	lr

0800174a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800174a:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800174c:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8001750:	f002 febc 	bl	80044cc <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8001754:	2000      	movs	r0, #0
 8001756:	bd08      	pop	{r3, pc}

08001758 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8001758:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800175a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800175e:	f002 ff56 	bl	800460e <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8001762:	2000      	movs	r0, #0
 8001764:	bd08      	pop	{r3, pc}

08001766 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8001766:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001768:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800176c:	f002 ff29 	bl	80045c2 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8001770:	2000      	movs	r0, #0
 8001772:	bd08      	pop	{r3, pc}

08001774 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001774:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8001776:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800177a:	f002 ff40 	bl	80045fe <HAL_PCD_EP_GetRxCount>
}
 800177e:	bd08      	pop	{r3, pc}

08001780 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8001780:	2312      	movs	r3, #18
 8001782:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 8001784:	4800      	ldr	r0, [pc, #0]	; (8001788 <USBD_VCP_DeviceDescriptor+0x8>)
 8001786:	4770      	bx	lr
 8001788:	2000001c 	.word	0x2000001c

0800178c <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 800178c:	2304      	movs	r3, #4
 800178e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8001790:	4800      	ldr	r0, [pc, #0]	; (8001794 <USBD_VCP_LangIDStrDescriptor+0x8>)
 8001792:	4770      	bx	lr
 8001794:	20000030 	.word	0x20000030

08001798 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8001798:	2300      	movs	r3, #0
 800179a:	b570      	push	{r4, r5, r6, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800179c:	461e      	mov	r6, r3
    if( ((value >> 28)) < 0xA )
 800179e:	0f05      	lsrs	r5, r0, #28
 80017a0:	b2ec      	uxtb	r4, r5
 80017a2:	2d09      	cmp	r5, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 80017a4:	bf94      	ite	ls
 80017a6:	3430      	addls	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80017a8:	3437      	addhi	r4, #55	; 0x37
 80017aa:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 80017ae:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80017b2:	3301      	adds	r3, #1
 80017b4:	7066      	strb	r6, [r4, #1]
  for( idx = 0 ; idx < len ; idx ++)
 80017b6:	b2dc      	uxtb	r4, r3
 80017b8:	42a2      	cmp	r2, r4
    value = value << 4;
 80017ba:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for( idx = 0 ; idx < len ; idx ++)
 80017be:	d8ee      	bhi.n	800179e <IntToUnicode+0x6>
  }
}
 80017c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080017c4 <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80017c4:	231a      	movs	r3, #26
{
 80017c6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80017c8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <USBD_VCP_SerialStrDescriptor+0x2c>)
 80017cc:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 80017ce:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80017d0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80017d2:	18c0      	adds	r0, r0, r3
 80017d4:	d00a      	beq.n	80017ec <USBD_VCP_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <USBD_VCP_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80017d8:	4907      	ldr	r1, [pc, #28]	; (80017f8 <USBD_VCP_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 80017da:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80017dc:	2208      	movs	r2, #8
 80017de:	f7ff ffdb 	bl	8001798 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 80017e2:	2204      	movs	r2, #4
 80017e4:	4905      	ldr	r1, [pc, #20]	; (80017fc <USBD_VCP_SerialStrDescriptor+0x38>)
 80017e6:	4620      	mov	r0, r4
 80017e8:	f7ff ffd6 	bl	8001798 <IntToUnicode>
}
 80017ec:	4804      	ldr	r0, [pc, #16]	; (8001800 <USBD_VCP_SerialStrDescriptor+0x3c>)
 80017ee:	bd10      	pop	{r4, pc}
 80017f0:	1fff7a10 	.word	0x1fff7a10
 80017f4:	1fff7a14 	.word	0x1fff7a14
 80017f8:	20000036 	.word	0x20000036
 80017fc:	20000046 	.word	0x20000046
 8001800:	20000034 	.word	0x20000034

08001804 <USBD_VCP_ProductStrDescriptor>:
{  
 8001804:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8001806:	4c04      	ldr	r4, [pc, #16]	; (8001818 <USBD_VCP_ProductStrDescriptor+0x14>)
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <USBD_VCP_ProductStrDescriptor+0x18>)
 800180a:	460a      	mov	r2, r1
 800180c:	4621      	mov	r1, r4
 800180e:	f005 fc7e 	bl	800710e <USBD_GetString>
}
 8001812:	4620      	mov	r0, r4
 8001814:	bd10      	pop	{r4, pc}
 8001816:	bf00      	nop
 8001818:	200027cc 	.word	0x200027cc
 800181c:	0800981b 	.word	0x0800981b

08001820 <USBD_VCP_ManufacturerStrDescriptor>:
{
 8001820:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001822:	4c04      	ldr	r4, [pc, #16]	; (8001834 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 8001826:	460a      	mov	r2, r1
 8001828:	4621      	mov	r1, r4
 800182a:	f005 fc70 	bl	800710e <USBD_GetString>
}
 800182e:	4620      	mov	r0, r4
 8001830:	bd10      	pop	{r4, pc}
 8001832:	bf00      	nop
 8001834:	200027cc 	.word	0x200027cc
 8001838:	0800983c 	.word	0x0800983c

0800183c <USBD_VCP_ConfigStrDescriptor>:
{ 
 800183c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800183e:	4c04      	ldr	r4, [pc, #16]	; (8001850 <USBD_VCP_ConfigStrDescriptor+0x14>)
 8001840:	4804      	ldr	r0, [pc, #16]	; (8001854 <USBD_VCP_ConfigStrDescriptor+0x18>)
 8001842:	460a      	mov	r2, r1
 8001844:	4621      	mov	r1, r4
 8001846:	f005 fc62 	bl	800710e <USBD_GetString>
}
 800184a:	4620      	mov	r0, r4
 800184c:	bd10      	pop	{r4, pc}
 800184e:	bf00      	nop
 8001850:	200027cc 	.word	0x200027cc
 8001854:	0800984f 	.word	0x0800984f

08001858 <USBD_VCP_InterfaceStrDescriptor>:
{
 8001858:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800185a:	4c04      	ldr	r4, [pc, #16]	; (800186c <USBD_VCP_InterfaceStrDescriptor+0x14>)
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <USBD_VCP_InterfaceStrDescriptor+0x18>)
 800185e:	460a      	mov	r2, r1
 8001860:	4621      	mov	r1, r4
 8001862:	f005 fc54 	bl	800710e <USBD_GetString>
}
 8001866:	4620      	mov	r0, r4
 8001868:	bd10      	pop	{r4, pc}
 800186a:	bf00      	nop
 800186c:	200027cc 	.word	0x200027cc
 8001870:	0800985a 	.word	0x0800985a

08001874 <HTS221_GetCapabilities>:
  (void)(pObj);

  Capabilities->Humidity    = 1;
  Capabilities->Pressure    = 0;
  Capabilities->Temperature = 1;
  Capabilities->LowPower    = 0;
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <HTS221_GetCapabilities+0x14>)
  Capabilities->HumMaxOdr   = 12.5f;
 8001876:	608b      	str	r3, [r1, #8]
  Capabilities->LowPower    = 0;
 8001878:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  Capabilities->TempMaxOdr  = 12.5f;
 800187c:	2000      	movs	r0, #0
  Capabilities->LowPower    = 0;
 800187e:	e9c1 2300 	strd	r2, r3, [r1]
  Capabilities->TempMaxOdr  = 12.5f;
 8001882:	60c8      	str	r0, [r1, #12]
  Capabilities->PressMaxOdr = 0.0f;
  return HTS221_OK;
}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	41480000 	.word	0x41480000

0800188c <HTS221_SetOutputDataRate>:
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800188c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001890:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8001898:	b508      	push	{r3, lr}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800189a:	d910      	bls.n	80018be <HTS221_SetOutputDataRate+0x32>
 800189c:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 80018a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	bf94      	ite	ls
 80018aa:	2102      	movls	r1, #2
 80018ac:	2103      	movhi	r1, #3
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80018ae:	301c      	adds	r0, #28
 80018b0:	f000 f9de 	bl	8001c70 <hts221_data_rate_set>
 80018b4:	3000      	adds	r0, #0
 80018b6:	bf18      	it	ne
 80018b8:	2001      	movne	r0, #1
  {
    return HTS221_ERROR;
  }

  return HTS221_OK;
}
 80018ba:	4240      	negs	r0, r0
 80018bc:	bd08      	pop	{r3, pc}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80018be:	2101      	movs	r1, #1
 80018c0:	e7f5      	b.n	80018ae <HTS221_SetOutputDataRate+0x22>

080018c2 <HTS221_Init>:
{
 80018c2:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 80018c4:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
{
 80018c8:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 80018ca:	b121      	cbz	r1, 80018d6 <HTS221_Init+0x14>
  pObj->is_initialized = 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return HTS221_OK;
 80018d2:	2000      	movs	r0, #0
}
 80018d4:	bd38      	pop	{r3, r4, r5, pc}
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80018d6:	f100 051c 	add.w	r5, r0, #28
 80018da:	4628      	mov	r0, r5
 80018dc:	f000 fa22 	bl	8001d24 <hts221_power_on_set>
 80018e0:	b110      	cbz	r0, 80018e8 <HTS221_Init+0x26>
      return HTS221_ERROR;
 80018e2:	f04f 30ff 	mov.w	r0, #4294967295
 80018e6:	e7f5      	b.n	80018d4 <HTS221_Init+0x12>
  {
    return HTS221_ERROR;
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80018e8:	2101      	movs	r1, #1
 80018ea:	4628      	mov	r0, r5
 80018ec:	f000 f9f4 	bl	8001cd8 <hts221_block_data_update_set>
 80018f0:	2800      	cmp	r0, #0
 80018f2:	d1f6      	bne.n	80018e2 <HTS221_Init+0x20>
  {
    return HTS221_ERROR;
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80018f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff ffc7 	bl	800188c <HTS221_SetOutputDataRate>
 80018fe:	2800      	cmp	r0, #0
 8001900:	d0e4      	beq.n	80018cc <HTS221_Init+0xa>
 8001902:	e7ee      	b.n	80018e2 <HTS221_Init+0x20>

08001904 <HTS221_HUM_SetOutputDataRate>:
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001904:	f7ff bfc2 	b.w	800188c <HTS221_SetOutputDataRate>

08001908 <HTS221_ReadID>:
{
 8001908:	b508      	push	{r3, lr}
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 800190a:	301c      	adds	r0, #28
 800190c:	f000 fa05 	bl	8001d1a <hts221_device_id_get>
 8001910:	3000      	adds	r0, #0
 8001912:	bf18      	it	ne
 8001914:	2001      	movne	r0, #1
}
 8001916:	4240      	negs	r0, r0
 8001918:	bd08      	pop	{r3, pc}
	...

0800191c <HTS221_GetOutputDataRate>:
{
 800191c:	b513      	push	{r0, r1, r4, lr}
 800191e:	460c      	mov	r4, r1
  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8001920:	301c      	adds	r0, #28
 8001922:	f10d 0107 	add.w	r1, sp, #7
 8001926:	f000 f9ba 	bl	8001c9e <hts221_data_rate_get>
 800192a:	b990      	cbnz	r0, 8001952 <HTS221_GetOutputDataRate+0x36>
  switch (odr_low_level)
 800192c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d80e      	bhi.n	8001952 <HTS221_GetOutputDataRate+0x36>
 8001934:	e8df f003 	tbb	[pc, r3]
 8001938:	0b090602 	.word	0x0b090602
      *Odr = 0.0f;
 800193c:	2300      	movs	r3, #0
      *Odr = 12.5f;
 800193e:	6023      	str	r3, [r4, #0]
}
 8001940:	b002      	add	sp, #8
 8001942:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 8001944:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001948:	e7f9      	b.n	800193e <HTS221_GetOutputDataRate+0x22>
      *Odr = 7.0f;
 800194a:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HTS221_GetOutputDataRate+0x3c>)
 800194c:	e7f7      	b.n	800193e <HTS221_GetOutputDataRate+0x22>
      *Odr = 12.5f;
 800194e:	4b03      	ldr	r3, [pc, #12]	; (800195c <HTS221_GetOutputDataRate+0x40>)
 8001950:	e7f5      	b.n	800193e <HTS221_GetOutputDataRate+0x22>
      ret = HTS221_ERROR;
 8001952:	f04f 30ff 	mov.w	r0, #4294967295
 8001956:	e7f3      	b.n	8001940 <HTS221_GetOutputDataRate+0x24>
 8001958:	40e00000 	.word	0x40e00000
 800195c:	41480000 	.word	0x41480000

08001960 <HTS221_HUM_GetOutputDataRate>:
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001960:	f7ff bfdc 	b.w	800191c <HTS221_GetOutputDataRate>

08001964 <HTS221_HUM_GetHumidity>:
{
 8001964:	b530      	push	{r4, r5, lr}
 8001966:	ed2d 8b04 	vpush	{d8-d9}
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800196a:	f100 041c 	add.w	r4, r0, #28
{
 800196e:	b083      	sub	sp, #12
 8001970:	460d      	mov	r5, r1
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001972:	4620      	mov	r0, r4
 8001974:	a901      	add	r1, sp, #4
 8001976:	f000 fa3a 	bl	8001dee <hts221_hum_adc_point_0_get>
 800197a:	b128      	cbz	r0, 8001988 <HTS221_HUM_GetHumidity+0x24>
    return HTS221_ERROR;
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001980:	b003      	add	sp, #12
 8001982:	ecbd 8b04 	vpop	{d8-d9}
 8001986:	bd30      	pop	{r4, r5, pc}
  lin_hum.x0 = (float)coeff.i16bit;
 8001988:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800198c:	ee08 3a10 	vmov	s16, r3
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001990:	a901      	add	r1, sp, #4
 8001992:	4620      	mov	r0, r4
  lin_hum.x0 = (float)coeff.i16bit;
 8001994:	eeb8 9ac8 	vcvt.f32.s32	s18, s16
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001998:	f000 f9db 	bl	8001d52 <hts221_hum_rh_point_0_get>
 800199c:	2800      	cmp	r0, #0
 800199e:	d1ed      	bne.n	800197c <HTS221_HUM_GetHumidity+0x18>
  lin_hum.y0 = (float)coeff.u8bit[0];
 80019a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80019a4:	ee08 3a90 	vmov	s17, r3
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80019a8:	a901      	add	r1, sp, #4
 80019aa:	4620      	mov	r0, r4
  lin_hum.y0 = (float)coeff.u8bit[0];
 80019ac:	eef8 9a68 	vcvt.f32.u32	s19, s17
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80019b0:	f000 fa22 	bl	8001df8 <hts221_hum_adc_point_1_get>
 80019b4:	2800      	cmp	r0, #0
 80019b6:	d1e1      	bne.n	800197c <HTS221_HUM_GetHumidity+0x18>
  lin_hum.x1 = (float)coeff.i16bit;
 80019b8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80019bc:	ee08 3a10 	vmov	s16, r3
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80019c0:	a901      	add	r1, sp, #4
 80019c2:	4620      	mov	r0, r4
  lin_hum.x1 = (float)coeff.i16bit;
 80019c4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80019c8:	f000 f9ce 	bl	8001d68 <hts221_hum_rh_point_1_get>
 80019cc:	2800      	cmp	r0, #0
 80019ce:	d1d5      	bne.n	800197c <HTS221_HUM_GetHumidity+0x18>
  lin_hum.y1 = (float)coeff.u8bit[0];
 80019d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 80019d4:	f8ad 0000 	strh.w	r0, [sp]
  lin_hum.y1 = (float)coeff.u8bit[0];
 80019d8:	ee08 3a90 	vmov	s17, r3
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 80019dc:	4669      	mov	r1, sp
 80019de:	4620      	mov	r0, r4
  lin_hum.y1 = (float)coeff.u8bit[0];
 80019e0:	eef8 8a68 	vcvt.f32.u32	s17, s17
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 80019e4:	f000 f98f 	bl	8001d06 <hts221_humidity_raw_get>
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d1c7      	bne.n	800197c <HTS221_HUM_GetHumidity+0x18>
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80019ec:	ee28 7ac9 	vnmul.f32	s14, s17, s18
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80019f0:	f9bd 3000 	ldrsh.w	r3, [sp]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80019f4:	eea9 7a88 	vfma.f32	s14, s19, s16
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80019f8:	ee07 3a90 	vmov	s15, r3
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80019fc:	ee78 8ae9 	vsub.f32	s17, s17, s19
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001a04:	ee38 8a49 	vsub.f32	s16, s16, s18
 8001a08:	eea7 7aa8 	vfma.f32	s14, s15, s17
 8001a0c:	eec7 7a08 	vdiv.f32	s15, s14, s16
  if (*Value < 0.0f)
 8001a10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001a18:	edc5 7a00 	vstr	s15, [r5]
  if (*Value < 0.0f)
 8001a1c:	d409      	bmi.n	8001a32 <HTS221_HUM_GetHumidity+0xce>
  if (*Value > 100.0f)
 8001a1e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001a40 <HTS221_HUM_GetHumidity+0xdc>
 8001a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	dc05      	bgt.n	8001a38 <HTS221_HUM_GetHumidity+0xd4>
 8001a2c:	edc5 7a00 	vstr	s15, [r5]
 8001a30:	e7a6      	b.n	8001980 <HTS221_HUM_GetHumidity+0x1c>
    *Value = 0.0f;
 8001a32:	eddf 7a04 	vldr	s15, [pc, #16]	; 8001a44 <HTS221_HUM_GetHumidity+0xe0>
 8001a36:	e7f9      	b.n	8001a2c <HTS221_HUM_GetHumidity+0xc8>
    *Value = 100.0f;
 8001a38:	ed85 7a00 	vstr	s14, [r5]
 8001a3c:	e7a0      	b.n	8001980 <HTS221_HUM_GetHumidity+0x1c>
 8001a3e:	bf00      	nop
 8001a40:	42c80000 	.word	0x42c80000
 8001a44:	00000000 	.word	0x00000000

08001a48 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a48:	b430      	push	{r4, r5}
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	6945      	ldr	r5, [r0, #20]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001a4e:	68a4      	ldr	r4, [r4, #8]
 8001a50:	7b00      	ldrb	r0, [r0, #12]
 8001a52:	b924      	cbnz	r4, 8001a5e <ReadRegWrap+0x16>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001a54:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001a58:	46ac      	mov	ip, r5
  }
}
 8001a5a:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001a5c:	4760      	bx	ip
 8001a5e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001a62:	e7f9      	b.n	8001a58 <ReadRegWrap+0x10>

08001a64 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a64:	b430      	push	{r4, r5}
 8001a66:	4604      	mov	r4, r0
 8001a68:	6905      	ldr	r5, [r0, #16]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001a6a:	68a4      	ldr	r4, [r4, #8]
 8001a6c:	7b00      	ldrb	r0, [r0, #12]
 8001a6e:	b924      	cbnz	r4, 8001a7a <WriteRegWrap+0x16>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001a70:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001a74:	46ac      	mov	ip, r5
  }
}
 8001a76:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001a78:	4760      	bx	ip
 8001a7a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001a7e:	e7f9      	b.n	8001a74 <WriteRegWrap+0x10>

08001a80 <HTS221_HUM_Enable>:
{
 8001a80:	b510      	push	{r4, lr}
  if (pObj->hum_is_enabled == 1U)
 8001a82:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001a86:	2b01      	cmp	r3, #1
{
 8001a88:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 1U)
 8001a8a:	d005      	beq.n	8001a98 <HTS221_HUM_Enable+0x18>
  if (pObj->temp_is_enabled == 0U)
 8001a8c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8001a90:	b123      	cbz	r3, 8001a9c <HTS221_HUM_Enable+0x1c>
  pObj->hum_is_enabled = 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    return HTS221_OK;
 8001a98:	2000      	movs	r0, #0
 8001a9a:	e007      	b.n	8001aac <HTS221_HUM_Enable+0x2c>
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	301c      	adds	r0, #28
 8001aa0:	f000 f940 	bl	8001d24 <hts221_power_on_set>
 8001aa4:	2800      	cmp	r0, #0
 8001aa6:	d0f4      	beq.n	8001a92 <HTS221_HUM_Enable+0x12>
      return HTS221_ERROR;
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001aac:	bd10      	pop	{r4, pc}

08001aae <HTS221_HUM_Disable>:
{
 8001aae:	b510      	push	{r4, lr}
 8001ab0:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 8001ab2:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8001ab6:	b128      	cbz	r0, 8001ac4 <HTS221_HUM_Disable+0x16>
  if (pObj->temp_is_enabled == 0U)
 8001ab8:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8001abc:	b119      	cbz	r1, 8001ac6 <HTS221_HUM_Disable+0x18>
  pObj->hum_is_enabled = 0;
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8001ac4:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001ac6:	f104 001c 	add.w	r0, r4, #28
 8001aca:	f000 f92b 	bl	8001d24 <hts221_power_on_set>
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d0f5      	beq.n	8001abe <HTS221_HUM_Disable+0x10>
      return HTS221_ERROR;
 8001ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad6:	e7f5      	b.n	8001ac4 <HTS221_HUM_Disable+0x16>

08001ad8 <HTS221_TEMP_Enable>:
{
 8001ad8:	b510      	push	{r4, lr}
  if (pObj->temp_is_enabled == 1U)
 8001ada:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8001ade:	2b01      	cmp	r3, #1
{
 8001ae0:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 1U)
 8001ae2:	d005      	beq.n	8001af0 <HTS221_TEMP_Enable+0x18>
  if (pObj->hum_is_enabled == 0U)
 8001ae4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001ae8:	b123      	cbz	r3, 8001af4 <HTS221_TEMP_Enable+0x1c>
  pObj->temp_is_enabled = 1;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    return HTS221_OK;
 8001af0:	2000      	movs	r0, #0
 8001af2:	e007      	b.n	8001b04 <HTS221_TEMP_Enable+0x2c>
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001af4:	2101      	movs	r1, #1
 8001af6:	301c      	adds	r0, #28
 8001af8:	f000 f914 	bl	8001d24 <hts221_power_on_set>
 8001afc:	2800      	cmp	r0, #0
 8001afe:	d0f4      	beq.n	8001aea <HTS221_TEMP_Enable+0x12>
      return HTS221_ERROR;
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001b04:	bd10      	pop	{r4, pc}

08001b06 <HTS221_TEMP_Disable>:
{
 8001b06:	b510      	push	{r4, lr}
 8001b08:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 8001b0a:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8001b0e:	b128      	cbz	r0, 8001b1c <HTS221_TEMP_Disable+0x16>
  if (pObj->hum_is_enabled == 0U)
 8001b10:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8001b14:	b119      	cbz	r1, 8001b1e <HTS221_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 8001b16:	2000      	movs	r0, #0
 8001b18:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
}
 8001b1c:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001b1e:	f104 001c 	add.w	r0, r4, #28
 8001b22:	f000 f8ff 	bl	8001d24 <hts221_power_on_set>
 8001b26:	2800      	cmp	r0, #0
 8001b28:	d0f5      	beq.n	8001b16 <HTS221_TEMP_Disable+0x10>
      return HTS221_ERROR;
 8001b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2e:	e7f5      	b.n	8001b1c <HTS221_TEMP_Disable+0x16>

08001b30 <HTS221_DeInit>:
{
 8001b30:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 8001b32:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8001b36:	2b01      	cmp	r3, #1
{
 8001b38:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8001b3a:	d003      	beq.n	8001b44 <HTS221_DeInit+0x14>
  pObj->is_initialized = 0;
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 8001b42:	bd10      	pop	{r4, pc}
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8001b44:	f7ff ffb3 	bl	8001aae <HTS221_HUM_Disable>
 8001b48:	b110      	cbz	r0, 8001b50 <HTS221_DeInit+0x20>
      return HTS221_ERROR;
 8001b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4e:	e7f8      	b.n	8001b42 <HTS221_DeInit+0x12>
    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8001b50:	4620      	mov	r0, r4
 8001b52:	f7ff ffd8 	bl	8001b06 <HTS221_TEMP_Disable>
 8001b56:	2800      	cmp	r0, #0
 8001b58:	d0f0      	beq.n	8001b3c <HTS221_DeInit+0xc>
 8001b5a:	e7f6      	b.n	8001b4a <HTS221_DeInit+0x1a>

08001b5c <HTS221_TEMP_SetOutputDataRate>:
 8001b5c:	f7ff be96 	b.w	800188c <HTS221_SetOutputDataRate>

08001b60 <HTS221_TEMP_GetOutputDataRate>:
 8001b60:	f7ff bedc 	b.w	800191c <HTS221_GetOutputDataRate>

08001b64 <HTS221_TEMP_GetTemperature>:
{
 8001b64:	b530      	push	{r4, r5, lr}
 8001b66:	ed2d 8b04 	vpush	{d8-d9}
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001b6a:	f100 041c 	add.w	r4, r0, #28
{
 8001b6e:	b083      	sub	sp, #12
 8001b70:	460d      	mov	r5, r1
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001b72:	4620      	mov	r0, r4
 8001b74:	a901      	add	r1, sp, #4
 8001b76:	f000 f944 	bl	8001e02 <hts221_temp_adc_point_0_get>
 8001b7a:	b128      	cbz	r0, 8001b88 <HTS221_TEMP_GetTemperature+0x24>
    return HTS221_ERROR;
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001b80:	b003      	add	sp, #12
 8001b82:	ecbd 8b04 	vpop	{d8-d9}
 8001b86:	bd30      	pop	{r4, r5, pc}
  lin_temp.x0 = (float)coeff.i16bit;
 8001b88:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8001b8c:	ee08 3a10 	vmov	s16, r3
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001b90:	a901      	add	r1, sp, #4
 8001b92:	4620      	mov	r0, r4
  lin_temp.x0 = (float)coeff.i16bit;
 8001b94:	eeb8 9ac8 	vcvt.f32.s32	s18, s16
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001b98:	f000 f8f1 	bl	8001d7e <hts221_temp_deg_point_0_get>
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	d1ed      	bne.n	8001b7c <HTS221_TEMP_GetTemperature+0x18>
  lin_temp.y0 = (float)coeff.u8bit[0];
 8001ba0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001ba4:	ee08 3a90 	vmov	s17, r3
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001ba8:	a901      	add	r1, sp, #4
 8001baa:	4620      	mov	r0, r4
  lin_temp.y0 = (float)coeff.u8bit[0];
 8001bac:	eef8 9a68 	vcvt.f32.u32	s19, s17
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001bb0:	f000 f92c 	bl	8001e0c <hts221_temp_adc_point_1_get>
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	d1e1      	bne.n	8001b7c <HTS221_TEMP_GetTemperature+0x18>
  lin_temp.x1 = (float)coeff.i16bit;
 8001bb8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8001bbc:	ee08 3a10 	vmov	s16, r3
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001bc0:	a901      	add	r1, sp, #4
 8001bc2:	4620      	mov	r0, r4
  lin_temp.x1 = (float)coeff.i16bit;
 8001bc4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001bc8:	f000 f8f5 	bl	8001db6 <hts221_temp_deg_point_1_get>
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d1d5      	bne.n	8001b7c <HTS221_TEMP_GetTemperature+0x18>
  lin_temp.y1 = (float)coeff.u8bit[0];
 8001bd0:	f89d 3004 	ldrb.w	r3, [sp, #4]
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8001bd4:	f8ad 0000 	strh.w	r0, [sp]
  lin_temp.y1 = (float)coeff.u8bit[0];
 8001bd8:	ee08 3a90 	vmov	s17, r3
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 8001bdc:	4669      	mov	r1, sp
 8001bde:	4620      	mov	r0, r4
  lin_temp.y1 = (float)coeff.u8bit[0];
 8001be0:	eef8 8a68 	vcvt.f32.u32	s17, s17
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 8001be4:	f000 f894 	bl	8001d10 <hts221_temperature_raw_get>
 8001be8:	2800      	cmp	r0, #0
 8001bea:	d1c7      	bne.n	8001b7c <HTS221_TEMP_GetTemperature+0x18>
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001bec:	ee68 7ac9 	vnmul.f32	s15, s17, s18
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001bf0:	f9bd 3000 	ldrsh.w	r3, [sp]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001bf4:	eee9 7a88 	vfma.f32	s15, s19, s16
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001bf8:	ee07 3a10 	vmov	s14, r3
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001bfc:	ee78 8ae9 	vsub.f32	s17, s17, s19
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001c00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001c04:	ee38 8a49 	vsub.f32	s16, s16, s18
 8001c08:	eee7 7a28 	vfma.f32	s15, s14, s17
 8001c0c:	ee87 7a88 	vdiv.f32	s14, s15, s16
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001c10:	ed85 7a00 	vstr	s14, [r5]
  return HTS221_OK;
 8001c14:	e7b4      	b.n	8001b80 <HTS221_TEMP_GetTemperature+0x1c>
	...

08001c18 <HTS221_RegisterBusIO>:
  if (pObj == NULL)
 8001c18:	b1a0      	cbz	r0, 8001c44 <HTS221_RegisterBusIO+0x2c>
    pObj->IO.DeInit    = pIO->DeInit;
 8001c1a:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8001c1c:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001c1e:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001c20:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8001c22:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 8001c24:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8001c26:	7b0a      	ldrb	r2, [r1, #12]
 8001c28:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001c2a:	690a      	ldr	r2, [r1, #16]
 8001c2c:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001c2e:	694a      	ldr	r2, [r1, #20]
 8001c30:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001c32:	698a      	ldr	r2, [r1, #24]
 8001c34:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <HTS221_RegisterBusIO+0x34>)
 8001c38:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <HTS221_RegisterBusIO+0x38>)
 8001c3c:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 8001c3e:	6240      	str	r0, [r0, #36]	; 0x24
    if (pObj->IO.Init != NULL)
 8001c40:	b103      	cbz	r3, 8001c44 <HTS221_RegisterBusIO+0x2c>
      ret = pObj->IO.Init();
 8001c42:	4718      	bx	r3
}
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	08001a49 	.word	0x08001a49
 8001c50:	08001a65 	.word	0x08001a65

08001c54 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(hts221_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 8001c54:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001c56:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8001c5a:	46a4      	mov	ip, r4
  return ret;
}
 8001c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001c60:	4760      	bx	ip

08001c62 <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(hts221_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8001c62:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001c64:	6804      	ldr	r4, [r0, #0]
 8001c66:	6880      	ldr	r0, [r0, #8]
 8001c68:	46a4      	mov	ip, r4
  return ret;
}
 8001c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001c6e:	4760      	bx	ip

08001c70 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(hts221_ctx_t *ctx, hts221_odr_t val)
{
 8001c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001c72:	2301      	movs	r3, #1
{
 8001c74:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001c76:	aa01      	add	r2, sp, #4
 8001c78:	2120      	movs	r1, #32
{
 8001c7a:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001c7c:	f7ff ffea 	bl	8001c54 <hts221_read_reg>

  if(ret == 0){
 8001c80:	b958      	cbnz	r0, 8001c9a <hts221_data_rate_set+0x2a>
    reg.odr = (uint8_t)val;
 8001c82:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001c86:	f365 0301 	bfi	r3, r5, #0, #2
 8001c8a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001c8e:	aa01      	add	r2, sp, #4
 8001c90:	2301      	movs	r3, #1
 8001c92:	2120      	movs	r1, #32
 8001c94:	4620      	mov	r0, r4
 8001c96:	f7ff ffe4 	bl	8001c62 <hts221_write_reg>
  }

  return ret;
}
 8001c9a:	b003      	add	sp, #12
 8001c9c:	bd30      	pop	{r4, r5, pc}

08001c9e <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(hts221_ctx_t *ctx, hts221_odr_t *val)
{
 8001c9e:	b513      	push	{r0, r1, r4, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001ca0:	2301      	movs	r3, #1
{
 8001ca2:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001ca4:	aa01      	add	r2, sp, #4
 8001ca6:	2120      	movs	r1, #32
 8001ca8:	f7ff ffd4 	bl	8001c54 <hts221_read_reg>

  switch (reg.odr) {
 8001cac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d80d      	bhi.n	8001cd4 <hts221_data_rate_get+0x36>
 8001cb8:	e8df f003 	tbb	[pc, r3]
 8001cbc:	0a080602 	.word	0x0a080602
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8001cc0:	2300      	movs	r3, #0
      break;
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
      break;
    default:
      *val = HTS221_ODR_ND;
 8001cc2:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 8001cc4:	b002      	add	sp, #8
 8001cc6:	bd10      	pop	{r4, pc}
      *val = HTS221_ODR_1Hz;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e7fa      	b.n	8001cc2 <hts221_data_rate_get+0x24>
      *val = HTS221_ODR_7Hz;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e7f8      	b.n	8001cc2 <hts221_data_rate_get+0x24>
      *val = HTS221_ODR_12Hz5;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e7f6      	b.n	8001cc2 <hts221_data_rate_get+0x24>
      *val = HTS221_ODR_ND;
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	e7f4      	b.n	8001cc2 <hts221_data_rate_get+0x24>

08001cd8 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(hts221_ctx_t *ctx, uint8_t val)
{
 8001cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001cda:	2301      	movs	r3, #1
{
 8001cdc:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001cde:	aa01      	add	r2, sp, #4
 8001ce0:	2120      	movs	r1, #32
{
 8001ce2:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001ce4:	f7ff ffb6 	bl	8001c54 <hts221_read_reg>

  if(ret == 0){
 8001ce8:	b958      	cbnz	r0, 8001d02 <hts221_block_data_update_set+0x2a>
    reg.bdu = val;
 8001cea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001cee:	f365 0382 	bfi	r3, r5, #2, #1
 8001cf2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001cf6:	aa01      	add	r2, sp, #4
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	2120      	movs	r1, #32
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	f7ff ffb0 	bl	8001c62 <hts221_write_reg>
  }

  return ret;
}
 8001d02:	b003      	add	sp, #12
 8001d04:	bd30      	pop	{r4, r5, pc}

08001d06 <hts221_humidity_raw_get>:
  *
  */
int32_t hts221_humidity_raw_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8001d06:	460a      	mov	r2, r1
 8001d08:	2302      	movs	r3, #2
 8001d0a:	2128      	movs	r1, #40	; 0x28
 8001d0c:	f7ff bfa2 	b.w	8001c54 <hts221_read_reg>

08001d10 <hts221_temperature_raw_get>:
  *
  */
int32_t hts221_temperature_raw_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8001d10:	460a      	mov	r2, r1
 8001d12:	2302      	movs	r3, #2
 8001d14:	212a      	movs	r1, #42	; 0x2a
 8001d16:	f7ff bf9d 	b.w	8001c54 <hts221_read_reg>

08001d1a <hts221_device_id_get>:
  *
  */
int32_t hts221_device_id_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8001d1a:	460a      	mov	r2, r1
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	210f      	movs	r1, #15
 8001d20:	f7ff bf98 	b.w	8001c54 <hts221_read_reg>

08001d24 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(hts221_ctx_t *ctx, uint8_t val)
{
 8001d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001d26:	2301      	movs	r3, #1
{
 8001d28:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001d2a:	aa01      	add	r2, sp, #4
 8001d2c:	2120      	movs	r1, #32
{
 8001d2e:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001d30:	f7ff ff90 	bl	8001c54 <hts221_read_reg>

  if(ret == 0){
 8001d34:	b958      	cbnz	r0, 8001d4e <hts221_power_on_set+0x2a>
    reg.pd = val;
 8001d36:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001d3a:	f365 13c7 	bfi	r3, r5, #7, #1
 8001d3e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001d42:	aa01      	add	r2, sp, #4
 8001d44:	2301      	movs	r3, #1
 8001d46:	2120      	movs	r1, #32
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f7ff ff8a 	bl	8001c62 <hts221_write_reg>
  }
  return ret;
}
 8001d4e:	b003      	add	sp, #12
 8001d50:	bd30      	pop	{r4, r5, pc}

08001d52 <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8001d52:	b510      	push	{r4, lr}
 8001d54:	460c      	mov	r4, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 8001d56:	460a      	mov	r2, r1
 8001d58:	2301      	movs	r3, #1
 8001d5a:	2130      	movs	r1, #48	; 0x30
 8001d5c:	f7ff ff7a 	bl	8001c54 <hts221_read_reg>
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8001d60:	7823      	ldrb	r3, [r4, #0]
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8001d66:	bd10      	pop	{r4, pc}

08001d68 <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8001d68:	b510      	push	{r4, lr}
 8001d6a:	460c      	mov	r4, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 8001d6c:	460a      	mov	r2, r1
 8001d6e:	2301      	movs	r3, #1
 8001d70:	2131      	movs	r1, #49	; 0x31
 8001d72:	f7ff ff6f 	bl	8001c54 <hts221_read_reg>
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8001d76:	7823      	ldrb	r3, [r4, #0]
 8001d78:	085b      	lsrs	r3, r3, #1
 8001d7a:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8001d7c:	bd10      	pop	{r4, pc}

08001d7e <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8001d7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8001d80:	2301      	movs	r3, #1
{
 8001d82:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8001d84:	f10d 0207 	add.w	r2, sp, #7
 8001d88:	2132      	movs	r1, #50	; 0x32
{
 8001d8a:	4605      	mov	r5, r0
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8001d8c:	f7ff ff62 	bl	8001c54 <hts221_read_reg>

  if(ret == 0){
 8001d90:	b978      	cbnz	r0, 8001db2 <hts221_temp_deg_point_0_get+0x34>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8001d92:	2301      	movs	r3, #1
 8001d94:	aa01      	add	r2, sp, #4
 8001d96:	2135      	movs	r1, #53	; 0x35
 8001d98:	4628      	mov	r0, r5
 8001d9a:	f7ff ff5b 	bl	8001c54 <hts221_read_reg>
    coeff_h = reg.t0_msb;
 8001d9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8001da2:	f003 0203 	and.w	r2, r3, #3
 8001da6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001daa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001dae:	10db      	asrs	r3, r3, #3
 8001db0:	7023      	strb	r3, [r4, #0]
  }

  return ret;
}
 8001db2:	b003      	add	sp, #12
 8001db4:	bd30      	pop	{r4, r5, pc}

08001db6 <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8001db6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001db8:	2301      	movs	r3, #1
{
 8001dba:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001dbc:	f10d 0207 	add.w	r2, sp, #7
 8001dc0:	2133      	movs	r1, #51	; 0x33
{
 8001dc2:	4605      	mov	r5, r0
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001dc4:	f7ff ff46 	bl	8001c54 <hts221_read_reg>

  if(ret == 0){
 8001dc8:	b978      	cbnz	r0, 8001dea <hts221_temp_deg_point_1_get+0x34>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8001dca:	2301      	movs	r3, #1
 8001dcc:	aa01      	add	r2, sp, #4
 8001dce:	2135      	movs	r1, #53	; 0x35
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	f7ff ff3f 	bl	8001c54 <hts221_read_reg>
    coeff_h = reg.t1_msb;
 8001dd6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8001dda:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8001dde:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001de2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001de6:	10db      	asrs	r3, r3, #3
 8001de8:	7023      	strb	r3, [r4, #0]
  }

  return ret;
}
 8001dea:	b003      	add	sp, #12
 8001dec:	bd30      	pop	{r4, r5, pc}

08001dee <hts221_hum_adc_point_0_get>:
  *
  */
int32_t hts221_hum_adc_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 8001dee:	460a      	mov	r2, r1
 8001df0:	2302      	movs	r3, #2
 8001df2:	2136      	movs	r1, #54	; 0x36
 8001df4:	f7ff bf2e 	b.w	8001c54 <hts221_read_reg>

08001df8 <hts221_hum_adc_point_1_get>:
  *
  */
int32_t hts221_hum_adc_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 8001df8:	460a      	mov	r2, r1
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	213a      	movs	r1, #58	; 0x3a
 8001dfe:	f7ff bf29 	b.w	8001c54 <hts221_read_reg>

08001e02 <hts221_temp_adc_point_0_get>:
  *
  */
int32_t hts221_temp_adc_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 8001e02:	460a      	mov	r2, r1
 8001e04:	2302      	movs	r3, #2
 8001e06:	213c      	movs	r1, #60	; 0x3c
 8001e08:	f7ff bf24 	b.w	8001c54 <hts221_read_reg>

08001e0c <hts221_temp_adc_point_1_get>:
  *
  */
int32_t hts221_temp_adc_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	2302      	movs	r3, #2
 8001e10:	213e      	movs	r1, #62	; 0x3e
 8001e12:	f7ff bf1f 	b.w	8001c54 <hts221_read_reg>
	...

08001e18 <LPS22HB_GetCapabilities>:
  (void)(pObj);

  Capabilities->Humidity    = 0;
  Capabilities->Pressure    = 1;
  Capabilities->Temperature = 1;
  Capabilities->LowPower    = 0;
 8001e18:	f240 1301 	movw	r3, #257	; 0x101
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	e9c1 3000 	strd	r3, r0, [r1]
  Capabilities->HumMaxOdr   = 0.0f;
 8001e22:	4b02      	ldr	r3, [pc, #8]	; (8001e2c <LPS22HB_GetCapabilities+0x14>)
  Capabilities->TempMaxOdr  = 75.0f;
 8001e24:	e9c1 3302 	strd	r3, r3, [r1, #8]
  Capabilities->PressMaxOdr = 75.0f;
  return LPS22HB_OK;
}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	42960000 	.word	0x42960000

08001e30 <LPS22HB_Init>:
{
 8001e30:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 8001e32:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
 8001e36:	4605      	mov	r5, r0
  if (pObj->is_initialized == 0U)
 8001e38:	bb2b      	cbnz	r3, 8001e86 <LPS22HB_Init+0x56>
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001e3a:	f100 041c 	add.w	r4, r0, #28
 8001e3e:	2101      	movs	r1, #1
 8001e40:	4620      	mov	r0, r4
 8001e42:	f000 fab8 	bl	80023b6 <lps22hb_low_power_set>
 8001e46:	4601      	mov	r1, r0
 8001e48:	b110      	cbz	r0, 8001e50 <LPS22HB_Init+0x20>
      return LPS22HB_ERROR;
 8001e4a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001e4e:	bd38      	pop	{r3, r4, r5, pc}
  {
    return LPS22HB_ERROR;
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001e50:	4620      	mov	r0, r4
 8001e52:	f000 fa67 	bl	8002324 <lps22hb_data_rate_set>
 8001e56:	2800      	cmp	r0, #0
 8001e58:	d1f7      	bne.n	8001e4a <LPS22HB_Init+0x1a>
  {
    return LPS22HB_ERROR;
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	f000 fa4b 	bl	80022f8 <lps22hb_low_pass_filter_mode_set>
 8001e62:	2800      	cmp	r0, #0
 8001e64:	d1f1      	bne.n	8001e4a <LPS22HB_Init+0x1a>
  {
    return LPS22HB_ERROR;
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001e66:	2101      	movs	r1, #1
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f000 fa2f 	bl	80022cc <lps22hb_block_data_update_set>
 8001e6e:	2800      	cmp	r0, #0
 8001e70:	d1eb      	bne.n	8001e4a <LPS22HB_Init+0x1a>
  {
    return LPS22HB_ERROR;
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8001e72:	68a9      	ldr	r1, [r5, #8]
 8001e74:	b961      	cbnz	r1, 8001e90 <LPS22HB_Init+0x60>
      return LPS22HB_ERROR;
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001e76:	4620      	mov	r0, r4
 8001e78:	f000 fac9 	bl	800240e <lps22hb_auto_add_inc_set>
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d1e4      	bne.n	8001e4a <LPS22HB_Init+0x1a>
    {
      return LPS22HB_ERROR;
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8001e80:	2303      	movs	r3, #3
 8001e82:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
  pObj->is_initialized = 1U;
 8001e86:	2301      	movs	r3, #1
 8001e88:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
  return LPS22HB_OK;
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	e7de      	b.n	8001e4e <LPS22HB_Init+0x1e>
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001e90:	2101      	movs	r1, #1
 8001e92:	e7f0      	b.n	8001e76 <LPS22HB_Init+0x46>

08001e94 <LPS22HB_ReadID>:
{
 8001e94:	b508      	push	{r3, lr}
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8001e96:	301c      	adds	r0, #28
 8001e98:	f000 fa72 	bl	8002380 <lps22hb_device_id_get>
 8001e9c:	3000      	adds	r0, #0
 8001e9e:	bf18      	it	ne
 8001ea0:	2001      	movne	r0, #1
}
 8001ea2:	4240      	negs	r0, r0
 8001ea4:	bd08      	pop	{r3, pc}
	...

08001ea8 <LPS22HB_GetOutputDataRate>:
{
 8001ea8:	b513      	push	{r0, r1, r4, lr}
 8001eaa:	460c      	mov	r4, r1
  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8001eac:	301c      	adds	r0, #28
 8001eae:	f10d 0107 	add.w	r1, sp, #7
 8001eb2:	f000 fa4d 	bl	8002350 <lps22hb_data_rate_get>
 8001eb6:	b9b8      	cbnz	r0, 8001ee8 <LPS22HB_GetOutputDataRate+0x40>
  switch (odr_low_level)
 8001eb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d813      	bhi.n	8001ee8 <LPS22HB_GetOutputDataRate+0x40>
 8001ec0:	e8df f003 	tbb	[pc, r3]
 8001ec4:	0c0a0703 	.word	0x0c0a0703
 8001ec8:	100e      	.short	0x100e
      *Odr = 0.0f;
 8001eca:	2300      	movs	r3, #0
      *Odr = 75.0f;
 8001ecc:	6023      	str	r3, [r4, #0]
}
 8001ece:	b002      	add	sp, #8
 8001ed0:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 8001ed2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ed6:	e7f9      	b.n	8001ecc <LPS22HB_GetOutputDataRate+0x24>
      *Odr = 10.0f;
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <LPS22HB_GetOutputDataRate+0x48>)
 8001eda:	e7f7      	b.n	8001ecc <LPS22HB_GetOutputDataRate+0x24>
      *Odr = 25.0f;
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <LPS22HB_GetOutputDataRate+0x4c>)
 8001ede:	e7f5      	b.n	8001ecc <LPS22HB_GetOutputDataRate+0x24>
      *Odr = 50.0f;
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <LPS22HB_GetOutputDataRate+0x50>)
 8001ee2:	e7f3      	b.n	8001ecc <LPS22HB_GetOutputDataRate+0x24>
      *Odr = 75.0f;
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <LPS22HB_GetOutputDataRate+0x54>)
 8001ee6:	e7f1      	b.n	8001ecc <LPS22HB_GetOutputDataRate+0x24>
      ret = LPS22HB_ERROR;
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	e7ef      	b.n	8001ece <LPS22HB_GetOutputDataRate+0x26>
 8001eee:	bf00      	nop
 8001ef0:	41200000 	.word	0x41200000
 8001ef4:	41c80000 	.word	0x41c80000
 8001ef8:	42480000 	.word	0x42480000
 8001efc:	42960000 	.word	0x42960000

08001f00 <LPS22HB_PRESS_GetOutputDataRate>:
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001f00:	f7ff bfd2 	b.w	8001ea8 <LPS22HB_GetOutputDataRate>

08001f04 <LPS22HB_SetOutputDataRate_When_Enabled>:
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001f04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001f08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8001f10:	b538      	push	{r3, r4, r5, lr}
 8001f12:	4605      	mov	r5, r0
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001f14:	d926      	bls.n	8001f64 <LPS22HB_SetOutputDataRate_When_Enabled+0x60>
 8001f16:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001f1a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f22:	d921      	bls.n	8001f68 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8001f24:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8001f28:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	d91c      	bls.n	8001f6c <LPS22HB_SetOutputDataRate_When_Enabled+0x68>
 8001f32:	eddf 7a11 	vldr	s15, [pc, #68]	; 8001f78 <LPS22HB_SetOutputDataRate_When_Enabled+0x74>
 8001f36:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3e:	bf94      	ite	ls
 8001f40:	2104      	movls	r1, #4
 8001f42:	2105      	movhi	r1, #5
  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8001f44:	f105 041c 	add.w	r4, r5, #28
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f000 f9eb 	bl	8002324 <lps22hb_data_rate_set>
 8001f4e:	b978      	cbnz	r0, 8001f70 <LPS22HB_SetOutputDataRate_When_Enabled+0x6c>
  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001f50:	f105 012b 	add.w	r1, r5, #43	; 0x2b
 8001f54:	4620      	mov	r0, r4
 8001f56:	f000 f9fb 	bl	8002350 <lps22hb_data_rate_get>
 8001f5a:	3000      	adds	r0, #0
 8001f5c:	bf18      	it	ne
 8001f5e:	2001      	movne	r0, #1
 8001f60:	4240      	negs	r0, r0
}
 8001f62:	bd38      	pop	{r3, r4, r5, pc}
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001f64:	2101      	movs	r1, #1
 8001f66:	e7ed      	b.n	8001f44 <LPS22HB_SetOutputDataRate_When_Enabled+0x40>
 8001f68:	2102      	movs	r1, #2
 8001f6a:	e7eb      	b.n	8001f44 <LPS22HB_SetOutputDataRate_When_Enabled+0x40>
 8001f6c:	2103      	movs	r1, #3
 8001f6e:	e7e9      	b.n	8001f44 <LPS22HB_SetOutputDataRate_When_Enabled+0x40>
    return LPS22HB_ERROR;
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	e7f5      	b.n	8001f62 <LPS22HB_SetOutputDataRate_When_Enabled+0x5e>
 8001f76:	bf00      	nop
 8001f78:	42480000 	.word	0x42480000

08001f7c <LPS22HB_PRESS_GetPressure>:
{
 8001f7c:	b513      	push	{r0, r1, r4, lr}
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8001f7e:	2300      	movs	r3, #0
{
 8001f80:	460c      	mov	r4, r1
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 8001f82:	301c      	adds	r0, #28
 8001f84:	a901      	add	r1, sp, #4
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8001f86:	9301      	str	r3, [sp, #4]
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 8001f88:	f000 f9f0 	bl	800236c <lps22hb_pressure_raw_get>
 8001f8c:	b938      	cbnz	r0, 8001f9e <LPS22HB_PRESS_GetPressure+0x22>
  *Value = LPS22HB_FROM_LSB_TO_hPa((float)(data_raw_pressure.i32bit));
 8001f8e:	eddd 7a01 	vldr	s15, [sp, #4]
 8001f92:	eefa 7aca 	vcvt.f32.s32	s15, s15, #12
 8001f96:	edc4 7a00 	vstr	s15, [r4]
}
 8001f9a:	b002      	add	sp, #8
 8001f9c:	bd10      	pop	{r4, pc}
    return LPS22HB_ERROR;
 8001f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa2:	e7fa      	b.n	8001f9a <LPS22HB_PRESS_GetPressure+0x1e>

08001fa4 <LPS22HB_TEMP_GetTemperature>:
{
 8001fa4:	b513      	push	{r0, r1, r4, lr}
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8001fa6:	2300      	movs	r3, #0
{
 8001fa8:	460c      	mov	r4, r1
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 8001faa:	301c      	adds	r0, #28
 8001fac:	a901      	add	r1, sp, #4
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8001fae:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 8001fb2:	f000 f9e0 	bl	8002376 <lps22hb_temperature_raw_get>
 8001fb6:	b968      	cbnz	r0, 8001fd4 <LPS22HB_TEMP_GetTemperature+0x30>
  *Value = LPS22HB_FROM_LSB_TO_degC((float)(data_raw_temperature.i16bit));
 8001fb8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8001fbc:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001fdc <LPS22HB_TEMP_GetTemperature+0x38>
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fcc:	ed84 7a00 	vstr	s14, [r4]
}
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd10      	pop	{r4, pc}
    return LPS22HB_ERROR;
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	e7fa      	b.n	8001fd0 <LPS22HB_TEMP_GetTemperature+0x2c>
 8001fda:	bf00      	nop
 8001fdc:	42c80000 	.word	0x42c80000

08001fe0 <LPS22HB_TEMP_SetOutputDataRate>:
  if (pObj->temp_is_enabled == 1U)
 8001fe0:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8001fe4:	2b01      	cmp	r3, #1
{
 8001fe6:	4602      	mov	r2, r0
  if (pObj->temp_is_enabled == 1U)
 8001fe8:	d101      	bne.n	8001fee <LPS22HB_TEMP_SetOutputDataRate+0xe>
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001fea:	f7ff bf8b 	b.w	8001f04 <LPS22HB_SetOutputDataRate_When_Enabled>
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001fee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ff2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8001ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffa:	d91a      	bls.n	8002032 <LPS22HB_TEMP_SetOutputDataRate+0x52>
 8001ffc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002000:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8002004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002008:	d915      	bls.n	8002036 <LPS22HB_TEMP_SetOutputDataRate+0x56>
 800200a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800200e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8002012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002016:	d910      	bls.n	800203a <LPS22HB_TEMP_SetOutputDataRate+0x5a>
 8002018:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002040 <LPS22HB_TEMP_SetOutputDataRate+0x60>
 800201c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8002020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002024:	bf94      	ite	ls
 8002026:	2304      	movls	r3, #4
 8002028:	2305      	movhi	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 800202a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
}
 800202e:	2000      	movs	r0, #0
 8002030:	4770      	bx	lr
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8002032:	2301      	movs	r3, #1
 8002034:	e7f9      	b.n	800202a <LPS22HB_TEMP_SetOutputDataRate+0x4a>
 8002036:	2302      	movs	r3, #2
 8002038:	e7f7      	b.n	800202a <LPS22HB_TEMP_SetOutputDataRate+0x4a>
 800203a:	2303      	movs	r3, #3
 800203c:	e7f5      	b.n	800202a <LPS22HB_TEMP_SetOutputDataRate+0x4a>
 800203e:	bf00      	nop
 8002040:	42480000 	.word	0x42480000

08002044 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t i;
  int32_t ret = LPS22HB_OK;
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8002048:	6884      	ldr	r4, [r0, #8]
{
 800204a:	4605      	mov	r5, r0
 800204c:	460e      	mov	r6, r1
 800204e:	4691      	mov	r9, r2
 8002050:	4698      	mov	r8, r3
  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8002052:	b994      	cbnz	r4, 800207a <ReadRegWrap+0x36>
  {
    for (i = 0; i < Length; i++)
 8002054:	4544      	cmp	r4, r8
 8002056:	d102      	bne.n	800205e <ReadRegWrap+0x1a>
      {
        return LPS22HB_ERROR;
      }
    }

    return ret;
 8002058:	2000      	movs	r0, #0
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
  }
}
 800205a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800205e:	19a1      	adds	r1, r4, r6
 8002060:	eb09 0204 	add.w	r2, r9, r4
 8002064:	696f      	ldr	r7, [r5, #20]
 8002066:	7b28      	ldrb	r0, [r5, #12]
 8002068:	2301      	movs	r3, #1
 800206a:	b289      	uxth	r1, r1
 800206c:	47b8      	blx	r7
 800206e:	3401      	adds	r4, #1
      if (ret != LPS22HB_OK)
 8002070:	2800      	cmp	r0, #0
 8002072:	d0ef      	beq.n	8002054 <ReadRegWrap+0x10>
        return LPS22HB_ERROR;
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	e7ef      	b.n	800205a <ReadRegWrap+0x16>
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800207a:	6944      	ldr	r4, [r0, #20]
 800207c:	7b00      	ldrb	r0, [r0, #12]
 800207e:	46a4      	mov	ip, r4
}
 8002080:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002084:	4760      	bx	ip

08002086 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t i;
  int32_t ret = LPS22HB_OK;
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800208a:	6884      	ldr	r4, [r0, #8]
{
 800208c:	4605      	mov	r5, r0
 800208e:	460e      	mov	r6, r1
 8002090:	4691      	mov	r9, r2
 8002092:	4698      	mov	r8, r3
  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8002094:	b994      	cbnz	r4, 80020bc <WriteRegWrap+0x36>
  {
    for (i = 0; i < Length; i++)
 8002096:	4544      	cmp	r4, r8
 8002098:	d102      	bne.n	80020a0 <WriteRegWrap+0x1a>
      {
        return LPS22HB_ERROR;
      }
    }

    return ret;
 800209a:	2000      	movs	r0, #0
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
  }
}
 800209c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80020a0:	19a1      	adds	r1, r4, r6
 80020a2:	eb09 0204 	add.w	r2, r9, r4
 80020a6:	692f      	ldr	r7, [r5, #16]
 80020a8:	7b28      	ldrb	r0, [r5, #12]
 80020aa:	2301      	movs	r3, #1
 80020ac:	b289      	uxth	r1, r1
 80020ae:	47b8      	blx	r7
 80020b0:	3401      	adds	r4, #1
      if (ret != LPS22HB_OK)
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d0ef      	beq.n	8002096 <WriteRegWrap+0x10>
        return LPS22HB_ERROR;
 80020b6:	f04f 30ff 	mov.w	r0, #4294967295
 80020ba:	e7ef      	b.n	800209c <WriteRegWrap+0x16>
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80020bc:	6904      	ldr	r4, [r0, #16]
 80020be:	7b00      	ldrb	r0, [r0, #12]
 80020c0:	46a4      	mov	ip, r4
}
 80020c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80020c6:	4760      	bx	ip

080020c8 <LPS22HB_PRESS_Enable>:
{
 80020c8:	b510      	push	{r4, lr}
  if (pObj->press_is_enabled == 1U)
 80020ca:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80020ce:	2b01      	cmp	r3, #1
{
 80020d0:	4604      	mov	r4, r0
  if (pObj->press_is_enabled == 1U)
 80020d2:	d009      	beq.n	80020e8 <LPS22HB_PRESS_Enable+0x20>
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80020d4:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 80020d8:	301c      	adds	r0, #28
 80020da:	f000 f923 	bl	8002324 <lps22hb_data_rate_set>
 80020de:	b928      	cbnz	r0, 80020ec <LPS22HB_PRESS_Enable+0x24>
  pObj->press_is_enabled = 1;
 80020e0:	2301      	movs	r3, #1
 80020e2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 80020e6:	bd10      	pop	{r4, pc}
    return LPS22HB_OK;
 80020e8:	2000      	movs	r0, #0
 80020ea:	e7fc      	b.n	80020e6 <LPS22HB_PRESS_Enable+0x1e>
    return LPS22HB_ERROR;
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	e7f9      	b.n	80020e6 <LPS22HB_PRESS_Enable+0x1e>

080020f2 <LPS22HB_TEMP_Enable>:
{
 80020f2:	b510      	push	{r4, lr}
  if (pObj->temp_is_enabled == 1U)
 80020f4:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80020f8:	2b01      	cmp	r3, #1
{
 80020fa:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 1U)
 80020fc:	d009      	beq.n	8002112 <LPS22HB_TEMP_Enable+0x20>
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80020fe:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8002102:	301c      	adds	r0, #28
 8002104:	f000 f90e 	bl	8002324 <lps22hb_data_rate_set>
 8002108:	b928      	cbnz	r0, 8002116 <LPS22HB_TEMP_Enable+0x24>
  pObj->temp_is_enabled = 1;
 800210a:	2301      	movs	r3, #1
 800210c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
}
 8002110:	bd10      	pop	{r4, pc}
    return LPS22HB_OK;
 8002112:	2000      	movs	r0, #0
 8002114:	e7fc      	b.n	8002110 <LPS22HB_TEMP_Enable+0x1e>
    return LPS22HB_ERROR;
 8002116:	f04f 30ff 	mov.w	r0, #4294967295
 800211a:	e7f9      	b.n	8002110 <LPS22HB_TEMP_Enable+0x1e>

0800211c <LPS22HB_PRESS_Disable>:
{
 800211c:	b538      	push	{r3, r4, r5, lr}
 800211e:	4604      	mov	r4, r0
  if (pObj->press_is_enabled == 0U)
 8002120:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8002124:	b128      	cbz	r0, 8002132 <LPS22HB_PRESS_Disable+0x16>
  if (pObj->temp_is_enabled == 0U)
 8002126:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800212a:	b11b      	cbz	r3, 8002134 <LPS22HB_PRESS_Disable+0x18>
  pObj->press_is_enabled = 0;
 800212c:	2000      	movs	r0, #0
 800212e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8002132:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8002134:	f104 051c 	add.w	r5, r4, #28
 8002138:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 800213c:	4628      	mov	r0, r5
 800213e:	f000 f907 	bl	8002350 <lps22hb_data_rate_get>
 8002142:	4601      	mov	r1, r0
 8002144:	b110      	cbz	r0, 800214c <LPS22HB_PRESS_Disable+0x30>
      return LPS22HB_ERROR;
 8002146:	f04f 30ff 	mov.w	r0, #4294967295
 800214a:	e7f2      	b.n	8002132 <LPS22HB_PRESS_Disable+0x16>
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 800214c:	4628      	mov	r0, r5
 800214e:	f000 f8e9 	bl	8002324 <lps22hb_data_rate_set>
 8002152:	2800      	cmp	r0, #0
 8002154:	d0ea      	beq.n	800212c <LPS22HB_PRESS_Disable+0x10>
 8002156:	e7f6      	b.n	8002146 <LPS22HB_PRESS_Disable+0x2a>

08002158 <LPS22HB_TEMP_Disable>:
{
 8002158:	b538      	push	{r3, r4, r5, lr}
 800215a:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 800215c:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8002160:	b128      	cbz	r0, 800216e <LPS22HB_TEMP_Disable+0x16>
  if (pObj->press_is_enabled == 0U)
 8002162:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8002166:	b11b      	cbz	r3, 8002170 <LPS22HB_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 8002168:	2000      	movs	r0, #0
 800216a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
}
 800216e:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8002170:	f104 051c 	add.w	r5, r4, #28
 8002174:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8002178:	4628      	mov	r0, r5
 800217a:	f000 f8e9 	bl	8002350 <lps22hb_data_rate_get>
 800217e:	4601      	mov	r1, r0
 8002180:	b110      	cbz	r0, 8002188 <LPS22HB_TEMP_Disable+0x30>
      return LPS22HB_ERROR;
 8002182:	f04f 30ff 	mov.w	r0, #4294967295
 8002186:	e7f2      	b.n	800216e <LPS22HB_TEMP_Disable+0x16>
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8002188:	4628      	mov	r0, r5
 800218a:	f000 f8cb 	bl	8002324 <lps22hb_data_rate_set>
 800218e:	2800      	cmp	r0, #0
 8002190:	d0ea      	beq.n	8002168 <LPS22HB_TEMP_Disable+0x10>
 8002192:	e7f6      	b.n	8002182 <LPS22HB_TEMP_Disable+0x2a>

08002194 <LPS22HB_DeInit>:
{
 8002194:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 8002196:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800219a:	2b01      	cmp	r3, #1
{
 800219c:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 800219e:	d003      	beq.n	80021a8 <LPS22HB_DeInit+0x14>
  pObj->is_initialized = 0;
 80021a0:	2000      	movs	r0, #0
 80021a2:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 80021a6:	bd10      	pop	{r4, pc}
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 80021a8:	f7ff ffb8 	bl	800211c <LPS22HB_PRESS_Disable>
 80021ac:	b110      	cbz	r0, 80021b4 <LPS22HB_DeInit+0x20>
      return LPS22HB_ERROR;
 80021ae:	f04f 30ff 	mov.w	r0, #4294967295
 80021b2:	e7f8      	b.n	80021a6 <LPS22HB_DeInit+0x12>
    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 80021b4:	4620      	mov	r0, r4
 80021b6:	f7ff ffcf 	bl	8002158 <LPS22HB_TEMP_Disable>
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d0f0      	beq.n	80021a0 <LPS22HB_DeInit+0xc>
 80021be:	e7f6      	b.n	80021ae <LPS22HB_DeInit+0x1a>

080021c0 <LPS22HB_TEMP_GetOutputDataRate>:
 80021c0:	f7ff be72 	b.w	8001ea8 <LPS22HB_GetOutputDataRate>

080021c4 <LPS22HB_PRESS_SetOutputDataRate>:
  if (pObj->press_is_enabled == 1U)
 80021c4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80021c8:	2b01      	cmp	r3, #1
{
 80021ca:	4602      	mov	r2, r0
  if (pObj->press_is_enabled == 1U)
 80021cc:	d101      	bne.n	80021d2 <LPS22HB_PRESS_SetOutputDataRate+0xe>
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 80021ce:	f7ff be99 	b.w	8001f04 <LPS22HB_SetOutputDataRate_When_Enabled>
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 80021d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021d6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80021da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021de:	d91a      	bls.n	8002216 <LPS22HB_PRESS_SetOutputDataRate+0x52>
 80021e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021e4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80021e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ec:	d915      	bls.n	800221a <LPS22HB_PRESS_SetOutputDataRate+0x56>
 80021ee:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80021f2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80021f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fa:	d910      	bls.n	800221e <LPS22HB_PRESS_SetOutputDataRate+0x5a>
 80021fc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002224 <LPS22HB_PRESS_SetOutputDataRate+0x60>
 8002200:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8002204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002208:	bf94      	ite	ls
 800220a:	2304      	movls	r3, #4
 800220c:	2305      	movhi	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 800220e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
}
 8002212:	2000      	movs	r0, #0
 8002214:	4770      	bx	lr
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8002216:	2301      	movs	r3, #1
 8002218:	e7f9      	b.n	800220e <LPS22HB_PRESS_SetOutputDataRate+0x4a>
 800221a:	2302      	movs	r3, #2
 800221c:	e7f7      	b.n	800220e <LPS22HB_PRESS_SetOutputDataRate+0x4a>
 800221e:	2303      	movs	r3, #3
 8002220:	e7f5      	b.n	800220e <LPS22HB_PRESS_SetOutputDataRate+0x4a>
 8002222:	bf00      	nop
 8002224:	42480000 	.word	0x42480000

08002228 <LPS22HB_Write_Reg>:
{
 8002228:	b513      	push	{r0, r1, r4, lr}
 800222a:	ac02      	add	r4, sp, #8
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 800222c:	2301      	movs	r3, #1
{
 800222e:	f804 2d01 	strb.w	r2, [r4, #-1]!
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8002232:	301c      	adds	r0, #28
 8002234:	4622      	mov	r2, r4
 8002236:	f000 f842 	bl	80022be <lps22hb_write_reg>
 800223a:	3000      	adds	r0, #0
 800223c:	bf18      	it	ne
 800223e:	2001      	movne	r0, #1
}
 8002240:	4240      	negs	r0, r0
 8002242:	b002      	add	sp, #8
 8002244:	bd10      	pop	{r4, pc}
	...

08002248 <LPS22HB_RegisterBusIO>:
{
 8002248:	b510      	push	{r4, lr}
  if (pObj == NULL)
 800224a:	4604      	mov	r4, r0
 800224c:	b910      	cbnz	r0, 8002254 <LPS22HB_RegisterBusIO+0xc>
    ret = LPS22HB_ERROR;
 800224e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002252:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 8002254:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8002256:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002258:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 800225a:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 800225c:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 800225e:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8002260:	7b0a      	ldrb	r2, [r1, #12]
 8002262:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002264:	690a      	ldr	r2, [r1, #16]
 8002266:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002268:	694a      	ldr	r2, [r1, #20]
 800226a:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800226c:	698a      	ldr	r2, [r1, #24]
 800226e:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <LPS22HB_RegisterBusIO+0x60>)
 8002272:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002274:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <LPS22HB_RegisterBusIO+0x64>)
 8002276:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 8002278:	6260      	str	r0, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0e7      	beq.n	800224e <LPS22HB_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != LPS22HB_OK)
 800227e:	4798      	blx	r3
 8002280:	2800      	cmp	r0, #0
 8002282:	d1e4      	bne.n	800224e <LPS22HB_RegisterBusIO+0x6>
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002284:	68a3      	ldr	r3, [r4, #8]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d1e3      	bne.n	8002252 <LPS22HB_RegisterBusIO+0xa>
        if (pObj->is_initialized == 0U)
 800228a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1df      	bne.n	8002252 <LPS22HB_RegisterBusIO+0xa>
          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8002292:	2201      	movs	r2, #1
 8002294:	2110      	movs	r1, #16
 8002296:	4620      	mov	r0, r4
 8002298:	f7ff ffc6 	bl	8002228 <LPS22HB_Write_Reg>
 800229c:	3000      	adds	r0, #0
 800229e:	bf18      	it	ne
 80022a0:	2001      	movne	r0, #1
 80022a2:	4240      	negs	r0, r0
  return ret;
 80022a4:	e7d5      	b.n	8002252 <LPS22HB_RegisterBusIO+0xa>
 80022a6:	bf00      	nop
 80022a8:	08002045 	.word	0x08002045
 80022ac:	08002087 	.word	0x08002087

080022b0 <lps22hb_read_reg>:
  * @param  uint16_t len: number of consecutive register to read
  *
  */
int32_t lps22hb_read_reg(lps22hb_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80022b0:	b410      	push	{r4}
  return ctx->read_reg(ctx->handle, reg, data, len);
 80022b2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80022b6:	46a4      	mov	ip, r4
}
 80022b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->read_reg(ctx->handle, reg, data, len);
 80022bc:	4760      	bx	ip

080022be <lps22hb_write_reg>:
  * @param  uint16_t len: number of consecutive register to write
  *
*/
int32_t lps22hb_write_reg(lps22hb_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80022be:	b410      	push	{r4}
  return ctx->write_reg(ctx->handle, reg, data, len);
 80022c0:	6804      	ldr	r4, [r0, #0]
 80022c2:	6880      	ldr	r0, [r0, #8]
 80022c4:	46a4      	mov	ip, r4
}
 80022c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->write_reg(ctx->handle, reg, data, len);
 80022ca:	4760      	bx	ip

080022cc <lps22hb_block_data_update_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of bdu in reg CTRL_REG1
  *
  */
int32_t lps22hb_block_data_update_set(lps22hb_ctx_t *ctx, uint8_t val)
{
 80022cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t mm_error;

  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 80022ce:	2301      	movs	r3, #1
{
 80022d0:	460d      	mov	r5, r1
  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 80022d2:	aa01      	add	r2, sp, #4
 80022d4:	2110      	movs	r1, #16
{
 80022d6:	4604      	mov	r4, r0
  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 80022d8:	f7ff ffea 	bl	80022b0 <lps22hb_read_reg>
  reg.ctrl_reg1.bdu = val;
 80022dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022e0:	f365 0341 	bfi	r3, r5, #1, #1
 80022e4:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 80022e8:	aa01      	add	r2, sp, #4
 80022ea:	2301      	movs	r3, #1
 80022ec:	2110      	movs	r1, #16
 80022ee:	4620      	mov	r0, r4
 80022f0:	f7ff ffe5 	bl	80022be <lps22hb_write_reg>

  return mm_error;
}
 80022f4:	b003      	add	sp, #12
 80022f6:	bd30      	pop	{r4, r5, pc}

080022f8 <lps22hb_low_pass_filter_mode_set>:
  * @param  lps22hb_lpfp_t: change the values of lpfp in reg CTRL_REG1
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(lps22hb_ctx_t *ctx,
                                          lps22hb_lpfp_t val)
{
 80022f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t mm_error;

  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 80022fa:	2301      	movs	r3, #1
{
 80022fc:	460d      	mov	r5, r1
  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 80022fe:	aa01      	add	r2, sp, #4
 8002300:	2110      	movs	r1, #16
{
 8002302:	4604      	mov	r4, r0
  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002304:	f7ff ffd4 	bl	80022b0 <lps22hb_read_reg>
  reg.ctrl_reg1.lpfp = val;
 8002308:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800230c:	f365 0383 	bfi	r3, r5, #2, #2
 8002310:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002314:	aa01      	add	r2, sp, #4
 8002316:	2301      	movs	r3, #1
 8002318:	2110      	movs	r1, #16
 800231a:	4620      	mov	r0, r4
 800231c:	f7ff ffcf 	bl	80022be <lps22hb_write_reg>

  return mm_error;
}
 8002320:	b003      	add	sp, #12
 8002322:	bd30      	pop	{r4, r5, pc}

08002324 <lps22hb_data_rate_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  lps22hb_odr_t: change the values of odr in reg CTRL_REG1
  *
  */
int32_t lps22hb_data_rate_set(lps22hb_ctx_t *ctx, lps22hb_odr_t val)
{
 8002324:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t mm_error;

  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002326:	2301      	movs	r3, #1
{
 8002328:	460d      	mov	r5, r1
  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 800232a:	aa01      	add	r2, sp, #4
 800232c:	2110      	movs	r1, #16
{
 800232e:	4604      	mov	r4, r0
  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002330:	f7ff ffbe 	bl	80022b0 <lps22hb_read_reg>
  reg.ctrl_reg1.odr = val;
 8002334:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002338:	f365 1306 	bfi	r3, r5, #4, #3
 800233c:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002340:	aa01      	add	r2, sp, #4
 8002342:	2301      	movs	r3, #1
 8002344:	2110      	movs	r1, #16
 8002346:	4620      	mov	r0, r4
 8002348:	f7ff ffb9 	bl	80022be <lps22hb_write_reg>

  return mm_error;
}
 800234c:	b003      	add	sp, #12
 800234e:	bd30      	pop	{r4, r5, pc}

08002350 <lps22hb_data_rate_get>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  lps22hb_odr_t: Get the values of odr in reg CTRL_REG1
  *
  */
int32_t lps22hb_data_rate_get(lps22hb_ctx_t *ctx, lps22hb_odr_t *val)
{
 8002350:	b513      	push	{r0, r1, r4, lr}
  lps22hb_reg_t reg;
  int32_t mm_error;

  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002352:	2301      	movs	r3, #1
{
 8002354:	460c      	mov	r4, r1
  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002356:	aa01      	add	r2, sp, #4
 8002358:	2110      	movs	r1, #16
 800235a:	f7ff ffa9 	bl	80022b0 <lps22hb_read_reg>
  *val = (lps22hb_odr_t) reg.ctrl_reg1.odr;
 800235e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002362:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002366:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 8002368:	b002      	add	sp, #8
 800236a:	bd10      	pop	{r4, pc}

0800236c <lps22hb_pressure_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lps22hb_pressure_raw_get(lps22hb_ctx_t *ctx, uint8_t *buff)
{
  return lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 800236c:	460a      	mov	r2, r1
 800236e:	2303      	movs	r3, #3
 8002370:	2128      	movs	r1, #40	; 0x28
 8002372:	f7ff bf9d 	b.w	80022b0 <lps22hb_read_reg>

08002376 <lps22hb_temperature_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lps22hb_temperature_raw_get(lps22hb_ctx_t *ctx, uint8_t *buff)
{
  return lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t*) buff, 2);
 8002376:	460a      	mov	r2, r1
 8002378:	2302      	movs	r3, #2
 800237a:	212b      	movs	r1, #43	; 0x2b
 800237c:	f7ff bf98 	b.w	80022b0 <lps22hb_read_reg>

08002380 <lps22hb_device_id_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lps22hb_device_id_get(lps22hb_ctx_t *ctx, uint8_t *buff)
{
  return lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
 8002380:	460a      	mov	r2, r1
 8002382:	2301      	movs	r3, #1
 8002384:	210f      	movs	r1, #15
 8002386:	f7ff bf93 	b.w	80022b0 <lps22hb_read_reg>

0800238a <lps22hb_boot_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of boot in reg CTRL_REG2
  *
  */
int32_t lps22hb_boot_set(lps22hb_ctx_t *ctx, uint8_t val)
{
 800238a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t mm_error;

  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 800238c:	2301      	movs	r3, #1
{
 800238e:	460d      	mov	r5, r1
  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 8002390:	aa01      	add	r2, sp, #4
 8002392:	2111      	movs	r1, #17
{
 8002394:	4604      	mov	r4, r0
  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 8002396:	f7ff ff8b 	bl	80022b0 <lps22hb_read_reg>
  reg.ctrl_reg2.boot = val;
 800239a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800239e:	f365 13c7 	bfi	r3, r5, #7, #1
 80023a2:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 80023a6:	aa01      	add	r2, sp, #4
 80023a8:	2301      	movs	r3, #1
 80023aa:	2111      	movs	r1, #17
 80023ac:	4620      	mov	r0, r4
 80023ae:	f7ff ff86 	bl	80022be <lps22hb_write_reg>

  return mm_error;
}
 80023b2:	b003      	add	sp, #12
 80023b4:	bd30      	pop	{r4, r5, pc}

080023b6 <lps22hb_low_power_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of lc_en in reg RES_CONF
  *
  */
int32_t lps22hb_low_power_set(lps22hb_ctx_t *ctx, uint8_t val)
{
 80023b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t mm_error;

  mm_error = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
 80023b8:	2301      	movs	r3, #1
{
 80023ba:	460d      	mov	r5, r1
  mm_error = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
 80023bc:	aa01      	add	r2, sp, #4
 80023be:	211a      	movs	r1, #26
{
 80023c0:	4604      	mov	r4, r0
  mm_error = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
 80023c2:	f7ff ff75 	bl	80022b0 <lps22hb_read_reg>
  reg.res_conf.lc_en = val;
 80023c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80023ca:	f365 0300 	bfi	r3, r5, #0, #1
 80023ce:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
 80023d2:	aa01      	add	r2, sp, #4
 80023d4:	2301      	movs	r3, #1
 80023d6:	211a      	movs	r1, #26
 80023d8:	4620      	mov	r0, r4
 80023da:	f7ff ff70 	bl	80022be <lps22hb_write_reg>

  return mm_error;
}
 80023de:	b003      	add	sp, #12
 80023e0:	bd30      	pop	{r4, r5, pc}

080023e2 <lps22hb_i2c_interface_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  lps22hb_i2c_dis_t: change the values of i2c_dis in reg CTRL_REG2
  *
  */
int32_t lps22hb_i2c_interface_set(lps22hb_ctx_t *ctx, lps22hb_i2c_dis_t val)
{
 80023e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t mm_error;

  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 80023e4:	2301      	movs	r3, #1
{
 80023e6:	460d      	mov	r5, r1
  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 80023e8:	aa01      	add	r2, sp, #4
 80023ea:	2111      	movs	r1, #17
{
 80023ec:	4604      	mov	r4, r0
  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 80023ee:	f7ff ff5f 	bl	80022b0 <lps22hb_read_reg>
  reg.ctrl_reg2.i2c_dis = val;
 80023f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80023f6:	f365 03c3 	bfi	r3, r5, #3, #1
 80023fa:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 80023fe:	aa01      	add	r2, sp, #4
 8002400:	2301      	movs	r3, #1
 8002402:	2111      	movs	r1, #17
 8002404:	4620      	mov	r0, r4
 8002406:	f7ff ff5a 	bl	80022be <lps22hb_write_reg>

  return mm_error;
}
 800240a:	b003      	add	sp, #12
 800240c:	bd30      	pop	{r4, r5, pc}

0800240e <lps22hb_auto_add_inc_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of if_add_inc in reg CTRL_REG2
  *
  */
int32_t lps22hb_auto_add_inc_set(lps22hb_ctx_t *ctx, uint8_t val)
{
 800240e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t mm_error;

  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 8002410:	2301      	movs	r3, #1
{
 8002412:	460d      	mov	r5, r1
  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 8002414:	aa01      	add	r2, sp, #4
 8002416:	2111      	movs	r1, #17
{
 8002418:	4604      	mov	r4, r0
  mm_error = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 800241a:	f7ff ff49 	bl	80022b0 <lps22hb_read_reg>
  reg.ctrl_reg2.if_add_inc = val;
 800241e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002422:	f365 1304 	bfi	r3, r5, #4, #1
 8002426:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 800242a:	aa01      	add	r2, sp, #4
 800242c:	2301      	movs	r3, #1
 800242e:	2111      	movs	r1, #17
 8002430:	4620      	mov	r0, r4
 8002432:	f7ff ff44 	bl	80022be <lps22hb_write_reg>

  return mm_error;
}
 8002436:	b003      	add	sp, #12
 8002438:	bd30      	pop	{r4, r5, pc}
	...

0800243c <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 800243c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable VddIO2 for GPIOG  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4c1b      	ldr	r4, [pc, #108]	; (80024ac <BSP_LED_Init+0x70>)
 8002440:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002446:	65a3      	str	r3, [r4, #88]	; 0x58
 8002448:	6da3      	ldr	r3, [r4, #88]	; 0x58
{
 800244a:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_PWR_CLK_ENABLE();
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
{
 8002450:	4605      	mov	r5, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	9b00      	ldr	r3, [sp, #0]
  HAL_PWREx_EnableVddIO2();
 8002456:	f002 f9bf 	bl	80047d8 <HAL_PWREx_EnableVddIO2>

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800245a:	b9dd      	cbnz	r5, 8002494 <BSP_LED_Init+0x58>
 800245c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800245e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002462:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002464:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800246e:	4810      	ldr	r0, [pc, #64]	; (80024b0 <BSP_LED_Init+0x74>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002470:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <BSP_LED_Init+0x78>)
 8002472:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8002476:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002478:	eb00 0585 	add.w	r5, r0, r5, lsl #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2201      	movs	r2, #1
 800247e:	2300      	movs	r3, #0
 8002480:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002484:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002486:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002488:	6868      	ldr	r0, [r5, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800248a:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800248c:	f000 fdb4 	bl	8002ff8 <HAL_GPIO_Init>
}
 8002490:	b009      	add	sp, #36	; 0x24
 8002492:	bd30      	pop	{r4, r5, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8002494:	2d01      	cmp	r5, #1
 8002496:	d1ea      	bne.n	800246e <BSP_LED_Init+0x32>
 8002498:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	64e3      	str	r3, [r4, #76]	; 0x4c
 80024a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	9b02      	ldr	r3, [sp, #8]
 80024aa:	e7e0      	b.n	800246e <BSP_LED_Init+0x32>
 80024ac:	40021000 	.word	0x40021000
 80024b0:	200000dc 	.word	0x200000dc
 80024b4:	08009044 	.word	0x08009044

080024b8 <BSP_LED_On>:
*            @arg  LED4
* @retval None
*/
void BSP_LED_On(Led_TypeDef Led)
{
  if(Led == LED1)
 80024b8:	b930      	cbnz	r0, 80024c8 <BSP_LED_On+0x10>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <BSP_LED_On+0x24>)
 80024bc:	6858      	ldr	r0, [r3, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  }
  else if (Led == LEDSWD)
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80024c4:	f000 bf14 	b.w	80032f0 <HAL_GPIO_WritePin>
  else if (Led == LEDSWD)
 80024c8:	2801      	cmp	r0, #1
 80024ca:	d105      	bne.n	80024d8 <BSP_LED_On+0x20>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <BSP_LED_On+0x24>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024d4:	6898      	ldr	r0, [r3, #8]
 80024d6:	e7f5      	b.n	80024c4 <BSP_LED_On+0xc>
  }
}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	200000dc 	.word	0x200000dc

080024e0 <BSP_LED_Off>:
*            @arg  LED4
* @retval None
*/
void BSP_LED_Off(Led_TypeDef Led)
{
  if(Led == LED1)
 80024e0:	4602      	mov	r2, r0
 80024e2:	b928      	cbnz	r0, 80024f0 <BSP_LED_Off+0x10>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <BSP_LED_Off+0x20>)
 80024e6:	6858      	ldr	r0, [r3, #4]
 80024e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  }
  else if (Led == LEDSWD)
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80024ec:	f000 bf00 	b.w	80032f0 <HAL_GPIO_WritePin>
  else if (Led == LEDSWD)
 80024f0:	2801      	cmp	r0, #1
 80024f2:	d104      	bne.n	80024fe <BSP_LED_Off+0x1e>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80024f4:	4b02      	ldr	r3, [pc, #8]	; (8002500 <BSP_LED_Off+0x20>)
 80024f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024fa:	6898      	ldr	r0, [r3, #8]
 80024fc:	e7f6      	b.n	80024ec <BSP_LED_Off+0xc>
  }
}
 80024fe:	4770      	bx	lr
 8002500:	200000dc 	.word	0x200000dc

08002504 <BSP_LED_Toggle>:
*            @arg  LED4
* @retval None
*/
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <BSP_LED_Toggle+0x14>)
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <BSP_LED_Toggle+0x18>)
 8002508:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800250c:	f832 1020 	ldrh.w	r1, [r2, r0, lsl #2]
 8002510:	6858      	ldr	r0, [r3, #4]
 8002512:	f000 bef2 	b.w	80032fa <HAL_GPIO_TogglePin>
 8002516:	bf00      	nop
 8002518:	200000dc 	.word	0x200000dc
 800251c:	08009044 	.word	0x08009044

08002520 <BSP_I2C3_DeInit>:
{
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002520:	4a0c      	ldr	r2, [pc, #48]	; (8002554 <BSP_I2C3_DeInit+0x34>)
  
    /**I2C3 GPIO Configuration    
    PC1     ------> I2C3_SDA
    PC0     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_0);
 8002522:	480d      	ldr	r0, [pc, #52]	; (8002558 <BSP_I2C3_DeInit+0x38>)
int32_t BSP_I2C3_DeInit(void) {
 8002524:	b508      	push	{r3, lr}
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002526:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002528:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800252c:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_0);
 800252e:	2103      	movs	r1, #3
 8002530:	f000 fe3e 	bl	80031b0 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8002534:	2048      	movs	r0, #72	; 0x48
 8002536:	f000 fceb 	bl	8002f10 <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800253a:	2049      	movs	r0, #73	; 0x49
 800253c:	f000 fce8 	bl	8002f10 <HAL_NVIC_DisableIRQ>
  if (HAL_I2C_DeInit(&hbusi2c3) == HAL_OK) {
 8002540:	4806      	ldr	r0, [pc, #24]	; (800255c <BSP_I2C3_DeInit+0x3c>)
 8002542:	f001 f88c 	bl	800365e <HAL_I2C_DeInit>
 8002546:	2800      	cmp	r0, #0
}
 8002548:	bf14      	ite	ne
 800254a:	f06f 0007 	mvnne.w	r0, #7
 800254e:	2000      	moveq	r0, #0
 8002550:	bd08      	pop	{r3, pc}
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	48000800 	.word	0x48000800
 800255c:	200028cc 	.word	0x200028cc

08002560 <BSP_I2C3_WriteReg>:
int32_t BSP_I2C3_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len) {
 8002560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(HAL_I2C_Mem_Write(&hbusi2c3, (uint8_t)DevAddr,
 8002562:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002566:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800256a:	9200      	str	r2, [sp, #0]
 800256c:	2301      	movs	r3, #1
 800256e:	460a      	mov	r2, r1
 8002570:	b2c1      	uxtb	r1, r0
 8002572:	4805      	ldr	r0, [pc, #20]	; (8002588 <BSP_I2C3_WriteReg+0x28>)
 8002574:	f001 f88c 	bl	8003690 <HAL_I2C_Mem_Write>
 8002578:	2800      	cmp	r0, #0
}
 800257a:	bf14      	ite	ne
 800257c:	f06f 0007 	mvnne.w	r0, #7
 8002580:	2000      	moveq	r0, #0
 8002582:	b004      	add	sp, #16
 8002584:	bd10      	pop	{r4, pc}
 8002586:	bf00      	nop
 8002588:	200028cc 	.word	0x200028cc

0800258c <BSP_I2C3_ReadReg>:
int32_t  BSP_I2C3_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len) {
 800258c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (HAL_I2C_Mem_Read(&hbusi2c3, DevAddr, (uint16_t)Reg,
 800258e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002592:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002596:	9200      	str	r2, [sp, #0]
 8002598:	2301      	movs	r3, #1
 800259a:	460a      	mov	r2, r1
 800259c:	4601      	mov	r1, r0
 800259e:	4805      	ldr	r0, [pc, #20]	; (80025b4 <BSP_I2C3_ReadReg+0x28>)
 80025a0:	f001 f92a 	bl	80037f8 <HAL_I2C_Mem_Read>
 80025a4:	2800      	cmp	r0, #0
}
 80025a6:	bf14      	ite	ne
 80025a8:	f06f 0007 	mvnne.w	r0, #7
 80025ac:	2000      	moveq	r0, #0
 80025ae:	b004      	add	sp, #16
 80025b0:	bd10      	pop	{r4, pc}
 80025b2:	bf00      	nop
 80025b4:	200028cc 	.word	0x200028cc

080025b8 <BSP_SPI2_DeInit>:
    __HAL_RCC_SPI2_CLK_DISABLE();
 80025b8:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <BSP_SPI2_DeInit+0x28>)
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15|GPIO_PIN_13);
 80025ba:	480a      	ldr	r0, [pc, #40]	; (80025e4 <BSP_SPI2_DeInit+0x2c>)
int32_t BSP_SPI2_DeInit(void) {
 80025bc:	b508      	push	{r3, lr}
    __HAL_RCC_SPI2_CLK_DISABLE();
 80025be:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80025c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025c4:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15|GPIO_PIN_13);
 80025c6:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80025ca:	f000 fdf1 	bl	80031b0 <HAL_GPIO_DeInit>
  if (HAL_SPI_DeInit(&hbusspi2) == HAL_OK) {
 80025ce:	4806      	ldr	r0, [pc, #24]	; (80025e8 <BSP_SPI2_DeInit+0x30>)
 80025d0:	f003 f82f 	bl	8005632 <HAL_SPI_DeInit>
 80025d4:	2800      	cmp	r0, #0
}
 80025d6:	bf14      	ite	ne
 80025d8:	f06f 0007 	mvnne.w	r0, #7
 80025dc:	2000      	moveq	r0, #0
 80025de:	bd08      	pop	{r3, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	48000400 	.word	0x48000400
 80025e8:	20002918 	.word	0x20002918

080025ec <BSP_SPI2_Send>:
{
 80025ec:	b510      	push	{r4, lr}
  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 80025ee:	460a      	mov	r2, r1
{
 80025f0:	460c      	mov	r4, r1
  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 80025f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f6:	4601      	mov	r1, r0
 80025f8:	4804      	ldr	r0, [pc, #16]	; (800260c <BSP_SPI2_Send+0x20>)
 80025fa:	f003 f830 	bl	800565e <HAL_SPI_Transmit>
 80025fe:	2800      	cmp	r0, #0
}
 8002600:	bf0c      	ite	eq
 8002602:	4620      	moveq	r0, r4
 8002604:	f06f 0005 	mvnne.w	r0, #5
 8002608:	bd10      	pop	{r4, pc}
 800260a:	bf00      	nop
 800260c:	20002918 	.word	0x20002918

08002610 <BSP_SPI1_SendRecv>:
{
 8002610:	b513      	push	{r0, r1, r4, lr}
  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8002616:	4614      	mov	r4, r2
  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	4613      	mov	r3, r2
 800261c:	460a      	mov	r2, r1
 800261e:	4601      	mov	r1, r0
 8002620:	4804      	ldr	r0, [pc, #16]	; (8002634 <BSP_SPI1_SendRecv+0x24>)
 8002622:	f003 f8d8 	bl	80057d6 <HAL_SPI_TransmitReceive>
 8002626:	2800      	cmp	r0, #0
}
 8002628:	bf0c      	ite	eq
 800262a:	4620      	moveq	r0, r4
 800262c:	f06f 0005 	mvnne.w	r0, #5
 8002630:	b002      	add	sp, #8
 8002632:	bd10      	pop	{r4, pc}
 8002634:	2000297c 	.word	0x2000297c

08002638 <BSP_GetTick>:
  return HAL_GetTick();
 8002638:	f000 bc0e 	b.w	8002e58 <HAL_GetTick>

0800263c <MX_SPI2_Init>:
  hspi->Init.Mode = SPI_MODE_MASTER;
 800263c:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <MX_SPI2_Init+0x6c>)
{
 800263e:	b538      	push	{r3, r4, r5, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002640:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002644:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002648:	e9c0 2300 	strd	r2, r3, [r0]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800264c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002650:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8002654:	2502      	movs	r5, #2
 8002656:	2301      	movs	r3, #1
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002658:	f44f 7c00 	mov.w	ip, #512	; 0x200
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 800265c:	e9c0 5304 	strd	r5, r3, [r0, #16]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002660:	2330      	movs	r3, #48	; 0x30
 8002662:	e9c0 c306 	strd	ip, r3, [r0, #24]
  hspi->Init.CRCPolynomial = 7;
 8002666:	2207      	movs	r2, #7
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002668:	2300      	movs	r3, #0
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800266a:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800266e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002672:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002674:	6343      	str	r3, [r0, #52]	; 0x34
{
 8002676:	4604      	mov	r4, r0
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002678:	f002 ff89 	bl	800558e <HAL_SPI_Init>
 800267c:	4605      	mov	r5, r0
  HAL_Delay(5);
 800267e:	2005      	movs	r0, #5
 8002680:	f7fe f8a0 	bl	80007c4 <HAL_Delay>
  SPI_1LINE_TX(hspi);
 8002684:	6822      	ldr	r2, [r4, #0]
 8002686:	6813      	ldr	r3, [r2, #0]
 8002688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800268c:	6013      	str	r3, [r2, #0]
  HAL_Delay(5);
 800268e:	2005      	movs	r0, #5
 8002690:	f7fe f898 	bl	80007c4 <HAL_Delay>
  __HAL_SPI_ENABLE(hspi);
 8002694:	6822      	ldr	r2, [r4, #0]
 8002696:	6813      	ldr	r3, [r2, #0]
}
 8002698:	1c28      	adds	r0, r5, #0
  __HAL_SPI_ENABLE(hspi);
 800269a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800269e:	6013      	str	r3, [r2, #0]
}
 80026a0:	bf18      	it	ne
 80026a2:	2001      	movne	r0, #1
 80026a4:	bd38      	pop	{r3, r4, r5, pc}
 80026a6:	bf00      	nop
 80026a8:	40003800 	.word	0x40003800

080026ac <BSP_SPI2_Init>:
int32_t BSP_SPI2_Init(void) {
 80026ac:	b510      	push	{r4, lr}
  hbusspi2.Instance  = SPI2;
 80026ae:	4c1a      	ldr	r4, [pc, #104]	; (8002718 <BSP_SPI2_Init+0x6c>)
 80026b0:	4b1a      	ldr	r3, [pc, #104]	; (800271c <BSP_SPI2_Init+0x70>)
 80026b2:	6023      	str	r3, [r4, #0]
int32_t BSP_SPI2_Init(void) {
 80026b4:	b088      	sub	sp, #32
  if (HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET) 
 80026b6:	4620      	mov	r0, r4
 80026b8:	f003 f9ac 	bl	8005a14 <HAL_SPI_GetState>
 80026bc:	b110      	cbz	r0, 80026c4 <BSP_SPI2_Init+0x18>
  int32_t ret = BSP_ERROR_NONE;
 80026be:	2000      	movs	r0, #0
}
 80026c0:	b008      	add	sp, #32
 80026c2:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026c4:	4b16      	ldr	r3, [pc, #88]	; (8002720 <BSP_SPI2_Init+0x74>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c6:	4817      	ldr	r0, [pc, #92]	; (8002724 <BSP_SPI2_Init+0x78>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ce:	659a      	str	r2, [r3, #88]	; 0x58
 80026d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026d2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80026d6:	9201      	str	r2, [sp, #4]
 80026d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026dc:	f042 0202 	orr.w	r2, r2, #2
 80026e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80026e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	9302      	str	r3, [sp, #8]
 80026ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80026f0:	2302      	movs	r3, #2
 80026f2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026f6:	2201      	movs	r2, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026fe:	2305      	movs	r3, #5
 8002700:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002702:	f000 fc79 	bl	8002ff8 <HAL_GPIO_Init>
    if (MX_SPI2_Init(&hbusspi2) != HAL_OK)
 8002706:	4620      	mov	r0, r4
 8002708:	f7ff ff98 	bl	800263c <MX_SPI2_Init>
 800270c:	2800      	cmp	r0, #0
 800270e:	d0d6      	beq.n	80026be <BSP_SPI2_Init+0x12>
      ret = BSP_ERROR_BUS_FAILURE;
 8002710:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8002714:	e7d4      	b.n	80026c0 <BSP_SPI2_Init+0x14>
 8002716:	bf00      	nop
 8002718:	20002918 	.word	0x20002918
 800271c:	40003800 	.word	0x40003800
 8002720:	40021000 	.word	0x40021000
 8002724:	48000400 	.word	0x48000400

08002728 <MX_I2C3_Init>:
  hi2c->Init.Timing = 0x10801541;
 8002728:	4907      	ldr	r1, [pc, #28]	; (8002748 <MX_I2C3_Init+0x20>)
 800272a:	4a08      	ldr	r2, [pc, #32]	; (800274c <MX_I2C3_Init+0x24>)
{
 800272c:	b508      	push	{r3, lr}
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800272e:	f04f 0c33 	mov.w	ip, #51	; 0x33
  hi2c->Init.Timing = 0x10801541;
 8002732:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002736:	2201      	movs	r2, #1
 8002738:	e9c0 c202 	strd	ip, r2, [r0, #8]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800273c:	f000 ff3d 	bl	80035ba <HAL_I2C_Init>
}
 8002740:	3000      	adds	r0, #0
 8002742:	bf18      	it	ne
 8002744:	2001      	movne	r0, #1
 8002746:	bd08      	pop	{r3, pc}
 8002748:	40005c00 	.word	0x40005c00
 800274c:	10801541 	.word	0x10801541

08002750 <BSP_I2C3_Init>:
int32_t BSP_I2C3_Init(void) {
 8002750:	b570      	push	{r4, r5, r6, lr}
  hbusi2c3.Instance  = I2C3;
 8002752:	4e2b      	ldr	r6, [pc, #172]	; (8002800 <BSP_I2C3_Init+0xb0>)
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <BSP_I2C3_Init+0xb4>)
 8002756:	6033      	str	r3, [r6, #0]
int32_t BSP_I2C3_Init(void) {
 8002758:	b0aa      	sub	sp, #168	; 0xa8
  if (HAL_I2C_GetState(&hbusi2c3) == HAL_I2C_STATE_RESET)
 800275a:	4630      	mov	r0, r6
 800275c:	f001 fb5c 	bl	8003e18 <HAL_I2C_GetState>
 8002760:	2800      	cmp	r0, #0
 8002762:	d147      	bne.n	80027f4 <BSP_I2C3_Init+0xa4>
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002768:	9308      	str	r3, [sp, #32]
  if(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct)!=HAL_OK)
 800276a:	a808      	add	r0, sp, #32
  RCC_PeriphCLKInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 800276c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002770:	931e      	str	r3, [sp, #120]	; 0x78
  if(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct)!=HAL_OK)
 8002772:	f002 fc95 	bl	80050a0 <HAL_RCCEx_PeriphCLKConfig>
 8002776:	4605      	mov	r5, r0
 8002778:	b100      	cbz	r0, 800277c <BSP_I2C3_Init+0x2c>
 800277a:	e7fe      	b.n	800277a <BSP_I2C3_Init+0x2a>
  __GPIOC_CLK_ENABLE();
 800277c:	4c22      	ldr	r4, [pc, #136]	; (8002808 <BSP_I2C3_Init+0xb8>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800277e:	4823      	ldr	r0, [pc, #140]	; (800280c <BSP_I2C3_Init+0xbc>)
  __GPIOC_CLK_ENABLE();
 8002780:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002788:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002792:	2212      	movs	r2, #18
 8002794:	2303      	movs	r3, #3
 8002796:	e9cd 3203 	strd	r3, r2, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800279a:	2201      	movs	r2, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279c:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a0:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027a2:	2304      	movs	r3, #4
 80027a4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a6:	f000 fc27 	bl	8002ff8 <HAL_GPIO_Init>
  __HAL_RCC_I2C3_CLK_ENABLE();
 80027aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80027b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	9b02      	ldr	r3, [sp, #8]
  __I2C3_FORCE_RESET();
 80027bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027c2:	63a3      	str	r3, [r4, #56]	; 0x38
  __I2C3_RELEASE_RESET();
 80027c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027ca:	63a3      	str	r3, [r4, #56]	; 0x38
  HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80027cc:	462a      	mov	r2, r5
 80027ce:	4629      	mov	r1, r5
 80027d0:	2048      	movs	r0, #72	; 0x48
 80027d2:	f000 fb5d 	bl	8002e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80027d6:	2048      	movs	r0, #72	; 0x48
 80027d8:	f000 fb8e 	bl	8002ef8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80027dc:	462a      	mov	r2, r5
 80027de:	4629      	mov	r1, r5
 80027e0:	2049      	movs	r0, #73	; 0x49
 80027e2:	f000 fb55 	bl	8002e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80027e6:	2049      	movs	r0, #73	; 0x49
 80027e8:	f000 fb86 	bl	8002ef8 <HAL_NVIC_EnableIRQ>
    if(MX_I2C3_Init(&hbusi2c3) != HAL_OK)
 80027ec:	4630      	mov	r0, r6
 80027ee:	f7ff ff9b 	bl	8002728 <MX_I2C3_Init>
 80027f2:	b910      	cbnz	r0, 80027fa <BSP_I2C3_Init+0xaa>
      ret = BSP_ERROR_NONE;
 80027f4:	2000      	movs	r0, #0
}
 80027f6:	b02a      	add	sp, #168	; 0xa8
 80027f8:	bd70      	pop	{r4, r5, r6, pc}
      ret = BSP_ERROR_BUS_FAILURE;
 80027fa:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80027fe:	e7fa      	b.n	80027f6 <BSP_I2C3_Init+0xa6>
 8002800:	200028cc 	.word	0x200028cc
 8002804:	40005c00 	.word	0x40005c00
 8002808:	40021000 	.word	0x40021000
 800280c:	48000800 	.word	0x48000800

08002810 <MX_SPI1_Init>:

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002810:	490f      	ldr	r1, [pc, #60]	; (8002850 <MX_SPI1_Init+0x40>)
 8002812:	f44f 7282 	mov.w	r2, #260	; 0x104
{
 8002816:	b508      	push	{r3, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002818:	e9c0 1200 	strd	r1, r2, [r0]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800281c:	2200      	movs	r2, #0
 800281e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002822:	e9c0 2102 	strd	r2, r1, [r0, #8]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002826:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800282a:	2118      	movs	r1, #24
 800282c:	e9c0 c106 	strd	ip, r1, [r0, #24]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi->Init.CRCPolynomial = 7;
 8002830:	2107      	movs	r1, #7
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002832:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002836:	e9c0 2204 	strd	r2, r2, [r0, #16]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800283a:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800283e:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002840:	2208      	movs	r2, #8
 8002842:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002844:	f002 fea3 	bl	800558e <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8002848:	3000      	adds	r0, #0
 800284a:	bf18      	it	ne
 800284c:	2001      	movne	r0, #1
 800284e:	bd08      	pop	{r3, pc}
 8002850:	40013000 	.word	0x40013000

08002854 <BSP_SPI1_Init>:
int32_t BSP_SPI1_Init(void) {
 8002854:	b510      	push	{r4, lr}
  hbusspi1.Instance  = SPI1;
 8002856:	4c1a      	ldr	r4, [pc, #104]	; (80028c0 <BSP_SPI1_Init+0x6c>)
 8002858:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <BSP_SPI1_Init+0x70>)
 800285a:	6023      	str	r3, [r4, #0]
int32_t BSP_SPI1_Init(void) {
 800285c:	b088      	sub	sp, #32
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET) 
 800285e:	4620      	mov	r0, r4
 8002860:	f003 f8d8 	bl	8005a14 <HAL_SPI_GetState>
 8002864:	b110      	cbz	r0, 800286c <BSP_SPI1_Init+0x18>
  int32_t ret = BSP_ERROR_NONE;
 8002866:	2000      	movs	r0, #0
}
 8002868:	b008      	add	sp, #32
 800286a:	bd10      	pop	{r4, pc}
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800286c:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <BSP_SPI1_Init+0x74>)
 800286e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002870:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002874:	661a      	str	r2, [r3, #96]	; 0x60
 8002876:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002878:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800287c:	9201      	str	r2, [sp, #4]
 800287e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002880:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	64da      	str	r2, [r3, #76]	; 0x4c
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	9302      	str	r3, [sp, #8]
 8002890:	9b02      	ldr	r3, [sp, #8]
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	22e0      	movs	r2, #224	; 0xe0
 8002894:	2302      	movs	r3, #2
 8002896:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2101      	movs	r1, #1
 800289c:	2303      	movs	r3, #3
 800289e:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028a6:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028aa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ac:	f000 fba4 	bl	8002ff8 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 80028b0:	4620      	mov	r0, r4
 80028b2:	f7ff ffad 	bl	8002810 <MX_SPI1_Init>
 80028b6:	2800      	cmp	r0, #0
 80028b8:	d0d5      	beq.n	8002866 <BSP_SPI1_Init+0x12>
      ret = BSP_ERROR_BUS_FAILURE;
 80028ba:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80028be:	e7d3      	b.n	8002868 <BSP_SPI1_Init+0x14>
 80028c0:	2000297c 	.word	0x2000297c
 80028c4:	40013000 	.word	0x40013000
 80028c8:	40021000 	.word	0x40021000

080028cc <BSP_LPS22HB_WriteReg>:
 * @param  pdata the pointer to the data to be written
 * @param  len the length of the data to be written
 * @retval BSP status
 */
static int32_t BSP_LPS22HB_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 80028cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;
 80028ce:	ac02      	add	r4, sp, #8
{
 80028d0:	4616      	mov	r6, r2
  uint8_t dataReg = (uint8_t)Reg;
 80028d2:	f804 1d01 	strb.w	r1, [r4, #-1]!

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2108      	movs	r1, #8
 80028da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
{
 80028de:	461d      	mov	r5, r3
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);
 80028e0:	f000 fd06 	bl	80032f0 <HAL_GPIO_WritePin>

  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 80028e4:	4620      	mov	r0, r4
 80028e6:	2101      	movs	r1, #1
 80028e8:	f7ff fe80 	bl	80025ec <BSP_SPI2_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  if (BSP_SPI2_Send(pdata, len) != len)
 80028ec:	4629      	mov	r1, r5
  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 80028ee:	2801      	cmp	r0, #1
  if (BSP_SPI2_Send(pdata, len) != len)
 80028f0:	4630      	mov	r0, r6
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80028f2:	bf14      	ite	ne
 80028f4:	f06f 0405 	mvnne.w	r4, #5
 80028f8:	2400      	moveq	r4, #0
  if (BSP_SPI2_Send(pdata, len) != len)
 80028fa:	f7ff fe77 	bl	80025ec <BSP_SPI2_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 80028fe:	2201      	movs	r2, #1
  if (BSP_SPI2_Send(pdata, len) != len)
 8002900:	42a8      	cmp	r0, r5
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8002902:	f04f 0108 	mov.w	r1, #8
 8002906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800290a:	bf18      	it	ne
 800290c:	f06f 0405 	mvnne.w	r4, #5
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8002910:	f000 fcee 	bl	80032f0 <HAL_GPIO_WritePin>

  return ret;
}
 8002914:	4620      	mov	r0, r4
 8002916:	b002      	add	sp, #8
 8002918:	bd70      	pop	{r4, r5, r6, pc}

0800291a <BSP_LPS22HB_DeInit>:
{
 800291a:	b508      	push	{r3, lr}
  if(BSP_SPI2_DeInit() == BSP_ERROR_NONE)
 800291c:	f7ff fe4c 	bl	80025b8 <BSP_SPI2_DeInit>
 8002920:	2800      	cmp	r0, #0
}
 8002922:	bf18      	it	ne
 8002924:	f06f 0005 	mvnne.w	r0, #5
 8002928:	bd08      	pop	{r3, pc}

0800292a <BSP_LPS22HB_Init>:
{  
 800292a:	b530      	push	{r4, r5, lr}
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 800292c:	2201      	movs	r2, #1
{  
 800292e:	b087      	sub	sp, #28
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8002930:	2108      	movs	r1, #8
 8002932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002936:	f000 fcdb 	bl	80032f0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2203      	movs	r2, #3
 800293c:	2300      	movs	r3, #0
 800293e:	e9cd 3203 	strd	r3, r2, [sp, #12]
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 8002942:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002946:	2501      	movs	r5, #1
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 8002948:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294c:	9502      	str	r5, [sp, #8]
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 800294e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002950:	4329      	orrs	r1, r5
 8002952:	64d9      	str	r1, [r3, #76]	; 0x4c
 8002954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 8002956:	a906      	add	r1, sp, #24
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 8002958:	402b      	ands	r3, r5
  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 800295a:	2408      	movs	r4, #8
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 800295c:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 800295e:	f841 4d14 	str.w	r4, [r1, #-20]!
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 8002962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 8002966:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 8002968:	f000 fb46 	bl	8002ff8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 800296c:	462a      	mov	r2, r5
 800296e:	4621      	mov	r1, r4
 8002970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002974:	f000 fcbc 	bl	80032f0 <HAL_GPIO_WritePin>
  if(BSP_SPI2_Init() == BSP_ERROR_NONE)
 8002978:	f7ff fe98 	bl	80026ac <BSP_SPI2_Init>
 800297c:	2800      	cmp	r0, #0
}
 800297e:	bf18      	it	ne
 8002980:	f06f 0005 	mvnne.w	r0, #5
 8002984:	b007      	add	sp, #28
 8002986:	bd30      	pop	{r4, r5, pc}

08002988 <BSP_LPS22HB_ReadReg>:
* @param  pdata the pointer to the data to be read
* @param  len the length of the data to be read
* @retval BSP status
*/
static int32_t BSP_LPS22HB_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8002988:	b570      	push	{r4, r5, r6, lr}
 800298a:	460c      	mov	r4, r1
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;
  
  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);  
  LPS22HB_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 800298c:	f064 047f 	orn	r4, r4, #127	; 0x7f
{
 8002990:	4615      	mov	r5, r2
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);  
 8002992:	2108      	movs	r1, #8
 8002994:	2200      	movs	r2, #0
 8002996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
{
 800299a:	461e      	mov	r6, r3
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);  
 800299c:	f000 fca8 	bl	80032f0 <HAL_GPIO_WritePin>
  LPS22HB_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 80029a0:	b2e3      	uxtb	r3, r4
* @retval None
*/
void LPS22HB_SPI_Write(SPI_HandleTypeDef* xSpiHandle, uint8_t val)
{
  /* check TXE flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80029a2:	4c35      	ldr	r4, [pc, #212]	; (8002a78 <BSP_LPS22HB_ReadReg+0xf0>)
 80029a4:	6822      	ldr	r2, [r4, #0]
 80029a6:	6891      	ldr	r1, [r2, #8]
 80029a8:	0788      	lsls	r0, r1, #30
 80029aa:	d5fc      	bpl.n	80029a6 <BSP_LPS22HB_ReadReg+0x1e>
  
  /* Write the data */
  *((__IO uint8_t*) &xSpiHandle->Instance->DR) = val;
 80029ac:	7313      	strb	r3, [r2, #12]
  
  /* Wait BSY flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 80029ae:	6893      	ldr	r3, [r2, #8]
 80029b0:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 80029b4:	d1fb      	bne.n	80029ae <BSP_LPS22HB_ReadReg+0x26>
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 80029b6:	6893      	ldr	r3, [r2, #8]
 80029b8:	0619      	lsls	r1, r3, #24
 80029ba:	d4fc      	bmi.n	80029b6 <BSP_LPS22HB_ReadReg+0x2e>
  __HAL_SPI_DISABLE(&hbusspi2);
 80029bc:	6813      	ldr	r3, [r2, #0]
 80029be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029c2:	6013      	str	r3, [r2, #0]
  SPI_1LINE_RX(&hbusspi2);  
 80029c4:	6813      	ldr	r3, [r2, #0]
  if (len > 1)
 80029c6:	2e01      	cmp	r6, #1
  SPI_1LINE_RX(&hbusspi2);  
 80029c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029cc:	6013      	str	r3, [r2, #0]
  if (len > 1)
 80029ce:	d937      	bls.n	8002a40 <BSP_LPS22HB_ReadReg+0xb8>
  __ASM volatile ("cpsid i" : : : "memory");
 80029d0:	b672      	cpsid	i
  __HAL_SPI_ENABLE(xSpiHandle);
 80029d2:	6822      	ldr	r2, [r4, #0]
 80029d4:	6813      	ldr	r3, [r2, #0]
 80029d6:	3e01      	subs	r6, #1
 80029d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	fa15 f686 	uxtah	r6, r5, r6
    if (xSpiHandle->Instance->SR & SPI_FLAG_RXNE)
 80029e2:	6823      	ldr	r3, [r4, #0]
  while (nBytesToRead > 1U)
 80029e4:	42ae      	cmp	r6, r5
 80029e6:	d124      	bne.n	8002a32 <BSP_LPS22HB_ReadReg+0xaa>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 80029f0:	6822      	ldr	r2, [r4, #0]
 80029f2:	6813      	ldr	r3, [r2, #0]
 80029f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029fa:	b662      	cpsie	i
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 80029fc:	6823      	ldr	r3, [r4, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	07d0      	lsls	r0, r2, #31
 8002a02:	d5fc      	bpl.n	80029fe <BSP_LPS22HB_ReadReg+0x76>
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8002a04:	7b1b      	ldrb	r3, [r3, #12]
 8002a06:	702b      	strb	r3, [r5, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8002a08:	6822      	ldr	r2, [r4, #0]
 8002a0a:	6893      	ldr	r3, [r2, #8]
 8002a0c:	0619      	lsls	r1, r3, #24
 8002a0e:	d4fc      	bmi.n	8002a0a <BSP_LPS22HB_ReadReg+0x82>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);  
 8002a10:	2201      	movs	r2, #1
 8002a12:	2108      	movs	r1, #8
 8002a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a18:	f000 fc6a 	bl	80032f0 <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a24:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a2c:	601a      	str	r2, [r3, #0]
}
 8002a2e:	2000      	movs	r0, #0
 8002a30:	bd70      	pop	{r4, r5, r6, pc}
    if (xSpiHandle->Instance->SR & SPI_FLAG_RXNE)
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	07d2      	lsls	r2, r2, #31
 8002a36:	d5d5      	bpl.n	80029e4 <BSP_LPS22HB_ReadReg+0x5c>
      *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8002a38:	7b1b      	ldrb	r3, [r3, #12]
 8002a3a:	f805 3b01 	strb.w	r3, [r5], #1
 8002a3e:	e7d0      	b.n	80029e2 <BSP_LPS22HB_ReadReg+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a40:	b672      	cpsid	i
  __HAL_SPI_ENABLE(xSpiHandle);
 8002a42:	6822      	ldr	r2, [r4, #0]
 8002a44:	6813      	ldr	r3, [r2, #0]
 8002a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a4a:	6013      	str	r3, [r2, #0]
  __asm("dsb\n");
 8002a4c:	f3bf 8f4f 	dsb	sy
  __asm("dsb\n");
 8002a50:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 8002a54:	6822      	ldr	r2, [r4, #0]
 8002a56:	6813      	ldr	r3, [r2, #0]
 8002a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a5c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a5e:	b662      	cpsie	i
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	07d2      	lsls	r2, r2, #31
 8002a66:	d5fc      	bpl.n	8002a62 <BSP_LPS22HB_ReadReg+0xda>
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8002a68:	7b1b      	ldrb	r3, [r3, #12]
 8002a6a:	702b      	strb	r3, [r5, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8002a6c:	6822      	ldr	r2, [r4, #0]
 8002a6e:	6893      	ldr	r3, [r2, #8]
 8002a70:	061b      	lsls	r3, r3, #24
 8002a72:	d4fc      	bmi.n	8002a6e <BSP_LPS22HB_ReadReg+0xe6>
 8002a74:	e7cc      	b.n	8002a10 <BSP_LPS22HB_ReadReg+0x88>
 8002a76:	bf00      	nop
 8002a78:	20002918 	.word	0x20002918

08002a7c <BSP_ENV_SENSOR_Init>:
{
 8002a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a80:	460f      	mov	r7, r1
 8002a82:	b08d      	sub	sp, #52	; 0x34
  switch (Instance)
 8002a84:	4606      	mov	r6, r0
 8002a86:	b120      	cbz	r0, 8002a92 <BSP_ENV_SENSOR_Init+0x16>
 8002a88:	2801      	cmp	r0, #1
 8002a8a:	d064      	beq.n	8002b56 <BSP_ENV_SENSOR_Init+0xda>
      ret = BSP_ERROR_WRONG_PARAM;
 8002a8c:	f06f 0001 	mvn.w	r0, #1
 8002a90:	e05a      	b.n	8002b48 <BSP_ENV_SENSOR_Init+0xcc>
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8002a92:	23bf      	movs	r3, #191	; 0xbf
 8002a94:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = BSP_I2C3_Init;
 8002a98:	4b8a      	ldr	r3, [pc, #552]	; (8002cc4 <BSP_ENV_SENSOR_Init+0x248>)
 8002a9a:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = BSP_I2C3_DeInit;
 8002a9c:	4b8a      	ldr	r3, [pc, #552]	; (8002cc8 <BSP_ENV_SENSOR_Init+0x24c>)
 8002a9e:	9306      	str	r3, [sp, #24]
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8002aa0:	4c8a      	ldr	r4, [pc, #552]	; (8002ccc <BSP_ENV_SENSOR_Init+0x250>)
  io_ctx.ReadReg     = BSP_I2C3_ReadReg;
 8002aa2:	4b8b      	ldr	r3, [pc, #556]	; (8002cd0 <BSP_ENV_SENSOR_Init+0x254>)
 8002aa4:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = BSP_I2C3_WriteReg;
 8002aa6:	4b8b      	ldr	r3, [pc, #556]	; (8002cd4 <BSP_ENV_SENSOR_Init+0x258>)
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8002aa8:	9007      	str	r0, [sp, #28]
  io_ctx.WriteReg    = BSP_I2C3_WriteReg;
 8002aaa:	9309      	str	r3, [sp, #36]	; 0x24
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8002aac:	a905      	add	r1, sp, #20
  io_ctx.GetTick     = BSP_GetTick;
 8002aae:	4b8a      	ldr	r3, [pc, #552]	; (8002cd8 <BSP_ENV_SENSOR_Init+0x25c>)
 8002ab0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f7ff f8b0 	bl	8001c18 <HTS221_RegisterBusIO>
 8002ab8:	b110      	cbz	r0, 8002ac0 <BSP_ENV_SENSOR_Init+0x44>
        return BSP_ERROR_NO_INIT;
 8002aba:	f04f 30ff 	mov.w	r0, #4294967295
 8002abe:	e043      	b.n	8002b48 <BSP_ENV_SENSOR_Init+0xcc>
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8002ac0:	f10d 0103 	add.w	r1, sp, #3
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	f7fe ff1f 	bl	8001908 <HTS221_ReadID>
 8002aca:	4680      	mov	r8, r0
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d1f4      	bne.n	8002aba <BSP_ENV_SENSOR_Init+0x3e>
  else if (id != HTS221_ID)
 8002ad0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002ad4:	2bbc      	cmp	r3, #188	; 0xbc
 8002ad6:	d1f0      	bne.n	8002aba <BSP_ENV_SENSOR_Init+0x3e>
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8002ad8:	a901      	add	r1, sp, #4
 8002ada:	4620      	mov	r0, r4
 8002adc:	f7fe feca 	bl	8001874 <HTS221_GetCapabilities>
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8002ae0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002ae4:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8002ae8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    EnvCompObj[HTS221_0] = &hts221_obj_0;
 8002aec:	4d7b      	ldr	r5, [pc, #492]	; (8002cdc <BSP_ENV_SENSOR_Init+0x260>)
                                   uint32_t)cap.Humidity << 2);
 8002aee:	009b      	lsls	r3, r3, #2
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8002af0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8002af4:	4313      	orrs	r3, r2
 8002af6:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8002af8:	07f8      	lsls	r0, r7, #31
    EnvDrv[HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8002afa:	4b79      	ldr	r3, [pc, #484]	; (8002ce0 <BSP_ENV_SENSOR_Init+0x264>)
    EnvCompObj[HTS221_0] = &hts221_obj_0;
 8002afc:	602c      	str	r4, [r5, #0]
    EnvDrv[HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8002afe:	6363      	str	r3, [r4, #52]	; 0x34
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8002b00:	d50a      	bpl.n	8002b18 <BSP_ENV_SENSOR_Init+0x9c>
 8002b02:	2a01      	cmp	r2, #1
 8002b04:	d108      	bne.n	8002b18 <BSP_ENV_SENSOR_Init+0x9c>
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8002b06:	4a77      	ldr	r2, [pc, #476]	; (8002ce4 <BSP_ENV_SENSOR_Init+0x268>)
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8002b08:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8002b0a:	63e2      	str	r2, [r4, #60]	; 0x3c
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b10:	2800      	cmp	r0, #0
 8002b12:	bf18      	it	ne
 8002b14:	f06f 0804 	mvnne.w	r8, #4
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8002b18:	0779      	lsls	r1, r7, #29
 8002b1a:	d518      	bpl.n	8002b4e <BSP_ENV_SENSOR_Init+0xd2>
 8002b1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d114      	bne.n	8002b4e <BSP_ENV_SENSOR_Init+0xd2>
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8002b24:	4b70      	ldr	r3, [pc, #448]	; (8002ce8 <BSP_ENV_SENSOR_Init+0x26c>)
 8002b26:	6463      	str	r3, [r4, #68]	; 0x44
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8002b28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b2a:	6828      	ldr	r0, [r5, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4798      	blx	r3
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d1c2      	bne.n	8002aba <BSP_ENV_SENSOR_Init+0x3e>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8002b34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b36:	6828      	ldr	r0, [r5, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	a905      	add	r1, sp, #20
 8002b3c:	4798      	blx	r3
 8002b3e:	2800      	cmp	r0, #0
 8002b40:	f000 8089 	beq.w	8002c56 <BSP_ENV_SENSOR_Init+0x1da>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8002b44:	f06f 0006 	mvn.w	r0, #6
}
 8002b48:	b00d      	add	sp, #52	; 0x34
 8002b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8002b4e:	f1b8 0f00 	cmp.w	r8, #0
 8002b52:	d0ef      	beq.n	8002b34 <BSP_ENV_SENSOR_Init+0xb8>
 8002b54:	e7b1      	b.n	8002aba <BSP_ENV_SENSOR_Init+0x3e>
  io_ctx.BusType     = LPS22HB_SPI_3WIRES_BUS; /* SPI 3-Wires */
 8002b56:	2302      	movs	r3, #2
 8002b58:	9307      	str	r3, [sp, #28]
  io_ctx.Address     = 0x0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = BSP_LPS22HB_Init;
 8002b60:	4b62      	ldr	r3, [pc, #392]	; (8002cec <BSP_ENV_SENSOR_Init+0x270>)
 8002b62:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = BSP_LPS22HB_DeInit;
 8002b64:	4b62      	ldr	r3, [pc, #392]	; (8002cf0 <BSP_ENV_SENSOR_Init+0x274>)
 8002b66:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = BSP_LPS22HB_ReadReg;
 8002b68:	4b62      	ldr	r3, [pc, #392]	; (8002cf4 <BSP_ENV_SENSOR_Init+0x278>)
 8002b6a:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = BSP_LPS22HB_WriteReg;
 8002b6c:	4b62      	ldr	r3, [pc, #392]	; (8002cf8 <BSP_ENV_SENSOR_Init+0x27c>)
 8002b6e:	9309      	str	r3, [sp, #36]	; 0x24
  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8002b70:	a905      	add	r1, sp, #20
  io_ctx.GetTick     = BSP_GetTick;
 8002b72:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <BSP_ENV_SENSOR_Init+0x25c>)
  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8002b74:	4861      	ldr	r0, [pc, #388]	; (8002cfc <BSP_ENV_SENSOR_Init+0x280>)
  io_ctx.GetTick     = BSP_GetTick;
 8002b76:	930b      	str	r3, [sp, #44]	; 0x2c
  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8002b78:	f7ff fb66 	bl	8002248 <LPS22HB_RegisterBusIO>
 8002b7c:	4d53      	ldr	r5, [pc, #332]	; (8002ccc <BSP_ENV_SENSOR_Init+0x250>)
 8002b7e:	f105 0854 	add.w	r8, r5, #84	; 0x54
 8002b82:	2800      	cmp	r0, #0
 8002b84:	d199      	bne.n	8002aba <BSP_ENV_SENSOR_Init+0x3e>
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8002b86:	f10d 0103 	add.w	r1, sp, #3
 8002b8a:	4640      	mov	r0, r8
 8002b8c:	f7ff f982 	bl	8001e94 <LPS22HB_ReadID>
 8002b90:	2800      	cmp	r0, #0
 8002b92:	d192      	bne.n	8002aba <BSP_ENV_SENSOR_Init+0x3e>
  else if (id != LPS22HB_ID)
 8002b94:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002b98:	2bb1      	cmp	r3, #177	; 0xb1
 8002b9a:	d18e      	bne.n	8002aba <BSP_ENV_SENSOR_Init+0x3e>
    if (lps22hb_boot_set(&lps22hb_obj_0.Ctx, PROPERTY_ENABLE) != LPS22HB_OK) 
 8002b9c:	4631      	mov	r1, r6
 8002b9e:	f105 0070 	add.w	r0, r5, #112	; 0x70
 8002ba2:	f7ff fbf2 	bl	800238a <lps22hb_boot_set>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002ba6:	1e04      	subs	r4, r0, #0
    HAL_Delay(1000);
 8002ba8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002bac:	bf18      	it	ne
 8002bae:	f06f 0406 	mvnne.w	r4, #6
    HAL_Delay(1000);
 8002bb2:	f7fd fe07 	bl	80007c4 <HAL_Delay>
      if (LPS22HB_Write_Reg(&lps22hb_obj_0, LPS22HB_CTRL_REG1, data) != LPS22HB_OK) 
 8002bb6:	4632      	mov	r2, r6
 8002bb8:	2110      	movs	r1, #16
 8002bba:	4640      	mov	r0, r8
 8002bbc:	f7ff fb34 	bl	8002228 <LPS22HB_Write_Reg>
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8002bc0:	a901      	add	r1, sp, #4
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002bc2:	2800      	cmp	r0, #0
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8002bc4:	4640      	mov	r0, r8
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002bc6:	bf18      	it	ne
 8002bc8:	f06f 0406 	mvnne.w	r4, #6
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8002bcc:	f7ff f924 	bl	8001e18 <LPS22HB_GetCapabilities>
    EnvCtx[LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((uint32_t)cap.Humidity << 2);
 8002bd0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002bd4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002bd8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8002be2:	430b      	orrs	r3, r1
    EnvCompObj[LPS22HB_0] = &lps22hb_obj_0;
 8002be4:	4a3d      	ldr	r2, [pc, #244]	; (8002cdc <BSP_ENV_SENSOR_Init+0x260>)
    EnvCtx[LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((uint32_t)cap.Humidity << 2);
 8002be6:	632b      	str	r3, [r5, #48]	; 0x30
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8002be8:	f017 0f01 	tst.w	r7, #1
    EnvDrv[LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 8002bec:	4b44      	ldr	r3, [pc, #272]	; (8002d00 <BSP_ENV_SENSOR_Init+0x284>)
    EnvCompObj[LPS22HB_0] = &lps22hb_obj_0;
 8002bee:	f8c2 8004 	str.w	r8, [r2, #4]
 8002bf2:	f105 0970 	add.w	r9, r5, #112	; 0x70
    EnvDrv[LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 8002bf6:	63ab      	str	r3, [r5, #56]	; 0x38
 8002bf8:	4692      	mov	sl, r2
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8002bfa:	d00a      	beq.n	8002c12 <BSP_ENV_SENSOR_Init+0x196>
 8002bfc:	2901      	cmp	r1, #1
 8002bfe:	d108      	bne.n	8002c12 <BSP_ENV_SENSOR_Init+0x196>
      EnvFuncDrv[LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 8002c00:	4a40      	ldr	r2, [pc, #256]	; (8002d04 <BSP_ENV_SENSOR_Init+0x288>)
      if (EnvDrv[LPS22HB_0]->Init(EnvCompObj[LPS22HB_0]) != LPS22HB_OK)
 8002c02:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 8002c04:	64aa      	str	r2, [r5, #72]	; 0x48
      if (EnvDrv[LPS22HB_0]->Init(EnvCompObj[LPS22HB_0]) != LPS22HB_OK)
 8002c06:	4640      	mov	r0, r8
 8002c08:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c0a:	1e04      	subs	r4, r0, #0
 8002c0c:	bf18      	it	ne
 8002c0e:	f06f 0404 	mvnne.w	r4, #4
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8002c12:	07ba      	lsls	r2, r7, #30
 8002c14:	d516      	bpl.n	8002c44 <BSP_ENV_SENSOR_Init+0x1c8>
 8002c16:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8002c1a:	f1b8 0f01 	cmp.w	r8, #1
 8002c1e:	d111      	bne.n	8002c44 <BSP_ENV_SENSOR_Init+0x1c8>
      EnvFuncDrv[LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 8002c20:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <BSP_ENV_SENSOR_Init+0x28c>)
 8002c22:	64eb      	str	r3, [r5, #76]	; 0x4c
      if (EnvDrv[LPS22HB_0]->Init(EnvCompObj[LPS22HB_0]) != LPS22HB_OK)
 8002c24:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002c26:	f8da 0004 	ldr.w	r0, [sl, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4798      	blx	r3
      if (lps22hb_i2c_interface_set(&lps22hb_obj_0.Ctx, LPS22HB_I2C_DISABLE) != LPS22HB_OK)
 8002c2e:	4641      	mov	r1, r8
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c30:	1e04      	subs	r4, r0, #0
      if (lps22hb_i2c_interface_set(&lps22hb_obj_0.Ctx, LPS22HB_I2C_DISABLE) != LPS22HB_OK)
 8002c32:	4648      	mov	r0, r9
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c34:	bf18      	it	ne
 8002c36:	f06f 0404 	mvnne.w	r4, #4
      if (lps22hb_i2c_interface_set(&lps22hb_obj_0.Ctx, LPS22HB_I2C_DISABLE) != LPS22HB_OK)
 8002c3a:	f7ff fbd2 	bl	80023e2 <lps22hb_i2c_interface_set>
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	f47f af3b 	bne.w	8002aba <BSP_ENV_SENSOR_Init+0x3e>
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8002c44:	2c00      	cmp	r4, #0
 8002c46:	f47f af38 	bne.w	8002aba <BSP_ENV_SENSOR_Init+0x3e>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8002c4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002c4c:	f8da 0004 	ldr.w	r0, [sl, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	a905      	add	r1, sp, #20
 8002c54:	e772      	b.n	8002b3c <BSP_ENV_SENSOR_Init+0xc0>
      if (cap.Temperature == 1U)
 8002c56:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8002c5a:	1e63      	subs	r3, r4, #1
 8002c5c:	425c      	negs	r4, r3
 8002c5e:	415c      	adcs	r4, r3
      if (cap.Humidity == 1U)
 8002c60:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8002c64:	2b01      	cmp	r3, #1
      if (cap.Pressure == 1U)
 8002c66:	f89d 3015 	ldrb.w	r3, [sp, #21]
        component_functions |= ENV_HUMIDITY;
 8002c6a:	bf08      	it	eq
 8002c6c:	f044 0404 	orreq.w	r4, r4, #4
      if (cap.Pressure == 1U)
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <BSP_ENV_SENSOR_Init+0x1fc>
        component_functions |= ENV_PRESSURE;
 8002c74:	f044 0402 	orr.w	r4, r4, #2
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8002c78:	f8df b060 	ldr.w	fp, [pc, #96]	; 8002cdc <BSP_ENV_SENSOR_Init+0x260>
 8002c7c:	f8df a04c 	ldr.w	sl, [pc, #76]	; 8002ccc <BSP_ENV_SENSOR_Init+0x250>
 8002c80:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8002d0c <BSP_ENV_SENSOR_Init+0x290>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c84:	2503      	movs	r5, #3
 8002c86:	f04f 0801 	mov.w	r8, #1
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8002c8a:	ea38 0307 	bics.w	r3, r8, r7
 8002c8e:	d005      	beq.n	8002c9c <BSP_ENV_SENSOR_Init+0x220>
  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 8002c90:	3d01      	subs	r5, #1
    function = function << 1;
 8002c92:	ea4f 0848 	mov.w	r8, r8, lsl #1
  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 8002c96:	d1f8      	bne.n	8002c8a <BSP_ENV_SENSOR_Init+0x20e>
 8002c98:	4628      	mov	r0, r5
 8002c9a:	e755      	b.n	8002b48 <BSP_ENV_SENSOR_Init+0xcc>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8002c9c:	ea38 0304 	bics.w	r3, r8, r4
 8002ca0:	d1f6      	bne.n	8002c90 <BSP_ENV_SENSOR_Init+0x214>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8002ca2:	f859 2028 	ldr.w	r2, [r9, r8, lsl #2]
 8002ca6:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 8002caa:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8002cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4798      	blx	r3
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d0e8      	beq.n	8002c90 <BSP_ENV_SENSOR_Init+0x214>
        return BSP_ERROR_COMPONENT_FAILURE;
 8002cbe:	f06f 0004 	mvn.w	r0, #4
 8002cc2:	e741      	b.n	8002b48 <BSP_ENV_SENSOR_Init+0xcc>
 8002cc4:	08002751 	.word	0x08002751
 8002cc8:	08002521 	.word	0x08002521
 8002ccc:	200003e4 	.word	0x200003e4
 8002cd0:	0800258d 	.word	0x0800258d
 8002cd4:	08002561 	.word	0x08002561
 8002cd8:	08002639 	.word	0x08002639
 8002cdc:	200029e0 	.word	0x200029e0
 8002ce0:	20000094 	.word	0x20000094
 8002ce4:	2000006c 	.word	0x2000006c
 8002ce8:	20000080 	.word	0x20000080
 8002cec:	0800292b 	.word	0x0800292b
 8002cf0:	0800291b 	.word	0x0800291b
 8002cf4:	08002989 	.word	0x08002989
 8002cf8:	080028cd 	.word	0x080028cd
 8002cfc:	20000438 	.word	0x20000438
 8002d00:	200000cc 	.word	0x200000cc
 8002d04:	200000a4 	.word	0x200000a4
 8002d08:	200000b8 	.word	0x200000b8
 8002d0c:	0800904c 	.word	0x0800904c

08002d10 <BSP_ENV_SENSOR_Enable>:
  if (Instance >= ENV_INSTANCES_NBR)
 8002d10:	2801      	cmp	r0, #1
{
 8002d12:	b510      	push	{r4, lr}
  if (Instance >= ENV_INSTANCES_NBR)
 8002d14:	d819      	bhi.n	8002d4a <BSP_ENV_SENSOR_Enable+0x3a>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <BSP_ENV_SENSOR_Enable+0x40>)
 8002d18:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8002d1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d1e:	400a      	ands	r2, r1
 8002d20:	428a      	cmp	r2, r1
 8002d22:	d112      	bne.n	8002d4a <BSP_ENV_SENSOR_Enable+0x3a>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8002d24:	4c0b      	ldr	r4, [pc, #44]	; (8002d54 <BSP_ENV_SENSOR_Enable+0x44>)
 8002d26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8002d2a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8002d2e:	440a      	add	r2, r1
 8002d30:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002d34:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <BSP_ENV_SENSOR_Enable+0x48>)
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4798      	blx	r3
 8002d40:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002d42:	bf18      	it	ne
 8002d44:	f06f 0004 	mvnne.w	r0, #4
}
 8002d48:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8002d4a:	f06f 0001 	mvn.w	r0, #1
 8002d4e:	e7fb      	b.n	8002d48 <BSP_ENV_SENSOR_Enable+0x38>
 8002d50:	200003e4 	.word	0x200003e4
 8002d54:	0800904c 	.word	0x0800904c
 8002d58:	200029e0 	.word	0x200029e0

08002d5c <BSP_ENV_SENSOR_GetValue>:
  if (Instance >= ENV_INSTANCES_NBR)
 8002d5c:	2801      	cmp	r0, #1
{
 8002d5e:	b538      	push	{r3, r4, r5, lr}
  if (Instance >= ENV_INSTANCES_NBR)
 8002d60:	d81a      	bhi.n	8002d98 <BSP_ENV_SENSOR_GetValue+0x3c>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8002d62:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <BSP_ENV_SENSOR_GetValue+0x44>)
 8002d64:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8002d68:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8002d6a:	400c      	ands	r4, r1
 8002d6c:	428c      	cmp	r4, r1
 8002d6e:	d113      	bne.n	8002d98 <BSP_ENV_SENSOR_GetValue+0x3c>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8002d70:	490c      	ldr	r1, [pc, #48]	; (8002da4 <BSP_ENV_SENSOR_GetValue+0x48>)
 8002d72:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8002d76:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8002d7a:	442c      	add	r4, r5
 8002d7c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002d80:	4611      	mov	r1, r2
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <BSP_ENV_SENSOR_GetValue+0x4c>)
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002d8c:	4798      	blx	r3
 8002d8e:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002d90:	bf18      	it	ne
 8002d92:	f06f 0004 	mvnne.w	r0, #4
}
 8002d96:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8002d98:	f06f 0001 	mvn.w	r0, #1
 8002d9c:	e7fb      	b.n	8002d96 <BSP_ENV_SENSOR_GetValue+0x3a>
 8002d9e:	bf00      	nop
 8002da0:	200003e4 	.word	0x200003e4
 8002da4:	0800904c 	.word	0x0800904c
 8002da8:	200029e0 	.word	0x200029e0

08002dac <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dac:	490f      	ldr	r1, [pc, #60]	; (8002dec <SystemInit+0x40>)
 8002dae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002db2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <SystemInit+0x44>)
 8002dbc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002dbe:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002dc6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002dce:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8002dd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dd8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002de0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002de2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002de8:	608b      	str	r3, [r1, #8]
#endif
}
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00
 8002df0:	40021000 	.word	0x40021000

08002df4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002df4:	4770      	bx	lr
	...

08002df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_InitTick+0x2c>)
{
 8002dfc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e04:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e08:	f000 f890 	bl	8002f2c <HAL_SYSTICK_Config>
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	b938      	cbnz	r0, 8002e20 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002e10:	4602      	mov	r2, r0
 8002e12:	4629      	mov	r1, r5
 8002e14:	f04f 30ff 	mov.w	r0, #4294967295
 8002e18:	f000 f83a 	bl	8002e90 <HAL_NVIC_SetPriority>
 8002e1c:	4620      	mov	r0, r4
  }

  /* Return function status */
  return status;
}
 8002e1e:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8002e20:	2001      	movs	r0, #1
 8002e22:	e7fc      	b.n	8002e1e <HAL_InitTick+0x26>
 8002e24:	200000e8 	.word	0x200000e8

08002e28 <HAL_Init>:
{
 8002e28:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e2a:	2003      	movs	r0, #3
 8002e2c:	f000 f81e 	bl	8002e6c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e30:	200f      	movs	r0, #15
 8002e32:	f7ff ffe1 	bl	8002df8 <HAL_InitTick>
 8002e36:	4604      	mov	r4, r0
 8002e38:	b918      	cbnz	r0, 8002e42 <HAL_Init+0x1a>
    HAL_MspInit();
 8002e3a:	f7ff ffdb 	bl	8002df4 <HAL_MspInit>
}
 8002e3e:	4620      	mov	r0, r4
 8002e40:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002e42:	2401      	movs	r4, #1
 8002e44:	e7fb      	b.n	8002e3e <HAL_Init+0x16>
	...

08002e48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002e48:	4a02      	ldr	r2, [pc, #8]	; (8002e54 <HAL_IncTick+0xc>)
 8002e4a:	6813      	ldr	r3, [r2, #0]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	200029e8 	.word	0x200029e8

08002e58 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002e58:	4b01      	ldr	r3, [pc, #4]	; (8002e60 <HAL_GetTick+0x8>)
 8002e5a:	6818      	ldr	r0, [r3, #0]
}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	200029e8 	.word	0x200029e8

08002e64 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 8002e64:	4800      	ldr	r0, [pc, #0]	; (8002e68 <HAL_GetHalVersion+0x4>)
 8002e66:	4770      	bx	lr
 8002e68:	01090000 	.word	0x01090000

08002e6c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e6c:	4a07      	ldr	r2, [pc, #28]	; (8002e8c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002e6e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e74:	041b      	lsls	r3, r3, #16
 8002e76:	0c1b      	lsrs	r3, r3, #16
 8002e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002e7c:	0200      	lsls	r0, r0, #8
 8002e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e82:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002e86:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002e88:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002e8a:	4770      	bx	lr
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e90:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e92:	b570      	push	{r4, r5, r6, lr}
 8002e94:	68dc      	ldr	r4, [r3, #12]
 8002e96:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e9a:	f1c4 0507 	rsb	r5, r4, #7
 8002e9e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea0:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea4:	bf28      	it	cs
 8002ea6:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eac:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eae:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb2:	bf8c      	ite	hi
 8002eb4:	3c03      	subhi	r4, #3
 8002eb6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	ea21 0303 	bic.w	r3, r1, r3
 8002ebc:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ebe:	fa06 f404 	lsl.w	r4, r6, r4
 8002ec2:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 8002ec6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec8:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ecc:	bfa8      	it	ge
 8002ece:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8002ed2:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed6:	bfbc      	itt	lt
 8002ed8:	f000 000f 	andlt.w	r0, r0, #15
 8002edc:	4a05      	ldrlt	r2, [pc, #20]	; (8002ef4 <HAL_NVIC_SetPriority+0x64>)
 8002ede:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee0:	bfaa      	itet	ge
 8002ee2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002eec:	bd70      	pop	{r4, r5, r6, pc}
 8002eee:	bf00      	nop
 8002ef0:	e000ed00 	.word	0xe000ed00
 8002ef4:	e000ed14 	.word	0xe000ed14

08002ef8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002ef8:	0942      	lsrs	r2, r0, #5
 8002efa:	2301      	movs	r3, #1
 8002efc:	f000 001f 	and.w	r0, r0, #31
 8002f00:	fa03 f000 	lsl.w	r0, r3, r0
 8002f04:	4b01      	ldr	r3, [pc, #4]	; (8002f0c <HAL_NVIC_EnableIRQ+0x14>)
 8002f06:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002f0a:	4770      	bx	lr
 8002f0c:	e000e100 	.word	0xe000e100

08002f10 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002f10:	0943      	lsrs	r3, r0, #5
 8002f12:	2201      	movs	r2, #1
 8002f14:	f000 001f 	and.w	r0, r0, #31
 8002f18:	fa02 f000 	lsl.w	r0, r2, r0
 8002f1c:	3320      	adds	r3, #32
 8002f1e:	4a02      	ldr	r2, [pc, #8]	; (8002f28 <HAL_NVIC_DisableIRQ+0x18>)
 8002f20:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000e100 	.word	0xe000e100

08002f2c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f2c:	3801      	subs	r0, #1
 8002f2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002f32:	d20a      	bcs.n	8002f4a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f36:	4a07      	ldr	r2, [pc, #28]	; (8002f54 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f38:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3a:	21f0      	movs	r1, #240	; 0xf0
 8002f3c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f40:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f42:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f44:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002f4a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000e010 	.word	0xe000e010
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002f58:	4770      	bx	lr

08002f5a <HAL_SYSTICK_IRQHandler>:
{
 8002f5a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8002f5c:	f7ff fffc 	bl	8002f58 <HAL_SYSTICK_Callback>
}
 8002f60:	bd08      	pop	{r3, pc}

08002f62 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f62:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002f66:	2a02      	cmp	r2, #2
{
 8002f68:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f6a:	d003      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8002f70:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8002f72:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f74:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8002f76:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f78:	6811      	ldr	r1, [r2, #0]
 8002f7a:	f021 010e 	bic.w	r1, r1, #14
 8002f7e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002f80:	6811      	ldr	r1, [r2, #0]
 8002f82:	f021 0101 	bic.w	r1, r1, #1
 8002f86:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f88:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	f002 021c 	and.w	r2, r2, #28
 8002f92:	fa01 f202 	lsl.w	r2, r1, r2
 8002f96:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002f98:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002f9a:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002f9e:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8002fa2:	b113      	cbz	r3, 8002faa <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8002fa4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	e7e3      	b.n	8002f72 <HAL_DMA_Abort_IT+0x10>
 8002faa:	4618      	mov	r0, r3
 8002fac:	e7e1      	b.n	8002f72 <HAL_DMA_Abort_IT+0x10>

08002fae <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8002fae:	b911      	cbnz	r1, 8002fb6 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002fb0:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb2:	4608      	mov	r0, r1
      break;
 8002fb4:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8002fb6:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8002fb8:	4770      	bx	lr

08002fba <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002fba:	b110      	cbz	r0, 8002fc2 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002fbc:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	4770      	bx	lr
    return HAL_ERROR;
 8002fc2:	2001      	movs	r0, #1
  }
}
 8002fc4:	4770      	bx	lr
	...

08002fc8 <HAL_EXTI_IRQHandler>:
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002fc8:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f003 011f 	and.w	r1, r3, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002fd0:	f3c3 4300 	ubfx	r3, r3, #16, #1
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002fd4:	408a      	lsls	r2, r1

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002fd6:	015b      	lsls	r3, r3, #5
 8002fd8:	4906      	ldr	r1, [pc, #24]	; (8002ff4 <HAL_EXTI_IRQHandler+0x2c>)
{
 8002fda:	b410      	push	{r4}
  regval = (*regaddr & maskline);
 8002fdc:	585c      	ldr	r4, [r3, r1]

  if (regval != 0x00u)
 8002fde:	4214      	tst	r4, r2
 8002fe0:	d005      	beq.n	8002fee <HAL_EXTI_IRQHandler+0x26>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002fe2:	505a      	str	r2, [r3, r1]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002fe4:	6843      	ldr	r3, [r0, #4]
 8002fe6:	b113      	cbz	r3, 8002fee <HAL_EXTI_IRQHandler+0x26>
    {
      hexti->PendingCallback();
    }
  }
}
 8002fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
 8002fec:	4718      	bx	r3
}
 8002fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	40010414 	.word	0x40010414

08002ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ffc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffe:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003000:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80031ac <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003004:	4c67      	ldr	r4, [pc, #412]	; (80031a4 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003006:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8003008:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300a:	9a01      	ldr	r2, [sp, #4]
 800300c:	40da      	lsrs	r2, r3
 800300e:	d102      	bne.n	8003016 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8003010:	b005      	add	sp, #20
 8003012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003016:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8003018:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800301a:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 800301c:	ea16 0c02 	ands.w	ip, r6, r2
 8003020:	f000 80b1 	beq.w	8003186 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003024:	684a      	ldr	r2, [r1, #4]
 8003026:	f022 0710 	bic.w	r7, r2, #16
 800302a:	2f02      	cmp	r7, #2
 800302c:	d116      	bne.n	800305c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800302e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8003032:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003036:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800303a:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800303e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003042:	f04f 0e0f 	mov.w	lr, #15
 8003046:	fa0e fe0a 	lsl.w	lr, lr, sl
 800304a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800304e:	690d      	ldr	r5, [r1, #16]
 8003050:	fa05 f50a 	lsl.w	r5, r5, sl
 8003054:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003058:	f8c9 5020 	str.w	r5, [r9, #32]
 800305c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003060:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8003062:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003066:	fa05 f50e 	lsl.w	r5, r5, lr
 800306a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800306c:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003070:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003074:	fa0a f90e 	lsl.w	r9, sl, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003078:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800307a:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800307e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8003080:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003084:	d811      	bhi.n	80030aa <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8003086:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003088:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800308c:	68cf      	ldr	r7, [r1, #12]
 800308e:	fa07 f70e 	lsl.w	r7, r7, lr
 8003092:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8003096:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003098:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800309a:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800309e:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80030a2:	409f      	lsls	r7, r3
 80030a4:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80030a8:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030aa:	f1ba 0f03 	cmp.w	sl, #3
 80030ae:	d107      	bne.n	80030c0 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80030b0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030b2:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80030b6:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80030ba:	409f      	lsls	r7, r3
 80030bc:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80030be:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80030c0:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80030c2:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030c4:	688e      	ldr	r6, [r1, #8]
 80030c6:	fa06 f60e 	lsl.w	r6, r6, lr
 80030ca:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80030cc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030ce:	00d5      	lsls	r5, r2, #3
 80030d0:	d559      	bpl.n	8003186 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d2:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80030d6:	f045 0501 	orr.w	r5, r5, #1
 80030da:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80030de:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80030e2:	f023 0603 	bic.w	r6, r3, #3
 80030e6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80030ea:	f005 0501 	and.w	r5, r5, #1
 80030ee:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80030f2:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030f4:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f8:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80030fa:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030fc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003100:	270f      	movs	r7, #15
 8003102:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003106:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800310a:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800310e:	d03c      	beq.n	800318a <HAL_GPIO_Init+0x192>
 8003110:	4d25      	ldr	r5, [pc, #148]	; (80031a8 <HAL_GPIO_Init+0x1b0>)
 8003112:	42a8      	cmp	r0, r5
 8003114:	d03b      	beq.n	800318e <HAL_GPIO_Init+0x196>
 8003116:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800311a:	42a8      	cmp	r0, r5
 800311c:	d039      	beq.n	8003192 <HAL_GPIO_Init+0x19a>
 800311e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003122:	42a8      	cmp	r0, r5
 8003124:	d037      	beq.n	8003196 <HAL_GPIO_Init+0x19e>
 8003126:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800312a:	42a8      	cmp	r0, r5
 800312c:	d035      	beq.n	800319a <HAL_GPIO_Init+0x1a2>
 800312e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003132:	42a8      	cmp	r0, r5
 8003134:	d033      	beq.n	800319e <HAL_GPIO_Init+0x1a6>
 8003136:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800313a:	42a8      	cmp	r0, r5
 800313c:	bf14      	ite	ne
 800313e:	2507      	movne	r5, #7
 8003140:	2506      	moveq	r5, #6
 8003142:	fa05 f50e 	lsl.w	r5, r5, lr
 8003146:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003148:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800314a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800314c:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003150:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8003152:	bf54      	ite	pl
 8003154:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8003156:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->IMR1 = temp;
 800315a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 800315c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800315e:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8003160:	bf54      	ite	pl
 8003162:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8003164:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->EMR1 = temp;
 8003168:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800316a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800316c:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 800316e:	bf54      	ite	pl
 8003170:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8003172:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->RTSR1 = temp;
 8003176:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8003178:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800317a:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 800317c:	bf54      	ite	pl
 800317e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8003180:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->FTSR1 = temp;
 8003184:	60e5      	str	r5, [r4, #12]
    position++;
 8003186:	3301      	adds	r3, #1
 8003188:	e73f      	b.n	800300a <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800318a:	2500      	movs	r5, #0
 800318c:	e7d9      	b.n	8003142 <HAL_GPIO_Init+0x14a>
 800318e:	2501      	movs	r5, #1
 8003190:	e7d7      	b.n	8003142 <HAL_GPIO_Init+0x14a>
 8003192:	2502      	movs	r5, #2
 8003194:	e7d5      	b.n	8003142 <HAL_GPIO_Init+0x14a>
 8003196:	2503      	movs	r5, #3
 8003198:	e7d3      	b.n	8003142 <HAL_GPIO_Init+0x14a>
 800319a:	2504      	movs	r5, #4
 800319c:	e7d1      	b.n	8003142 <HAL_GPIO_Init+0x14a>
 800319e:	2505      	movs	r5, #5
 80031a0:	e7cf      	b.n	8003142 <HAL_GPIO_Init+0x14a>
 80031a2:	bf00      	nop
 80031a4:	40010400 	.word	0x40010400
 80031a8:	48000400 	.word	0x48000400
 80031ac:	40021000 	.word	0x40021000

080031b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80031b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80031b4:	4c47      	ldr	r4, [pc, #284]	; (80032d4 <HAL_GPIO_DeInit+0x124>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80031b6:	f8df a124 	ldr.w	sl, [pc, #292]	; 80032dc <HAL_GPIO_DeInit+0x12c>
 80031ba:	f8df b124 	ldr.w	fp, [pc, #292]	; 80032e0 <HAL_GPIO_DeInit+0x130>
  uint32_t position = 0x00u;
 80031be:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 80031c0:	f04f 0801 	mov.w	r8, #1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80031c4:	f04f 0903 	mov.w	r9, #3
  while ((GPIO_Pin >> position) != 0x00u)
 80031c8:	fa31 f203 	lsrs.w	r2, r1, r3
 80031cc:	d102      	bne.n	80031d4 <HAL_GPIO_DeInit+0x24>
      }
    }

    position++;
  }
}
 80031ce:	b003      	add	sp, #12
 80031d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80031d4:	fa08 f603 	lsl.w	r6, r8, r3
    if (iocurrent != 0x00u)
 80031d8:	ea16 0201 	ands.w	r2, r6, r1
 80031dc:	9201      	str	r2, [sp, #4]
 80031de:	d06a      	beq.n	80032b6 <HAL_GPIO_DeInit+0x106>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80031e0:	6807      	ldr	r7, [r0, #0]
 80031e2:	005a      	lsls	r2, r3, #1
 80031e4:	fa09 f202 	lsl.w	r2, r9, r2
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80031e8:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80031ec:	4317      	orrs	r7, r2
 80031ee:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80031f2:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80031f4:	f8de 7020 	ldr.w	r7, [lr, #32]
 80031f8:	f003 0c07 	and.w	ip, r3, #7
 80031fc:	463d      	mov	r5, r7
 80031fe:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003202:	270f      	movs	r7, #15
 8003204:	fa07 fc0c 	lsl.w	ip, r7, ip
 8003208:	ea25 0c0c 	bic.w	ip, r5, ip
 800320c:	f8ce c020 	str.w	ip, [lr, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003210:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8003214:	43d2      	mvns	r2, r2
 8003216:	ea0c 0c02 	and.w	ip, ip, r2
 800321a:	f8c0 c008 	str.w	ip, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800321e:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8003222:	43f6      	mvns	r6, r6
 8003224:	ea0c 0c06 	and.w	ip, ip, r6
 8003228:	f8c0 c004 	str.w	ip, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800322c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8003230:	ea02 020c 	and.w	r2, r2, ip
 8003234:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003236:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003238:	4016      	ands	r6, r2
 800323a:	62c6      	str	r6, [r0, #44]	; 0x2c
 800323c:	f023 0603 	bic.w	r6, r3, #3
 8003240:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8003244:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003248:	f003 0c03 	and.w	ip, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 800324c:	68b2      	ldr	r2, [r6, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800324e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003252:	fa07 f70c 	lsl.w	r7, r7, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003256:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800325a:	ea07 0e02 	and.w	lr, r7, r2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800325e:	d02c      	beq.n	80032ba <HAL_GPIO_DeInit+0x10a>
 8003260:	4a1d      	ldr	r2, [pc, #116]	; (80032d8 <HAL_GPIO_DeInit+0x128>)
 8003262:	4290      	cmp	r0, r2
 8003264:	d02b      	beq.n	80032be <HAL_GPIO_DeInit+0x10e>
 8003266:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800326a:	4290      	cmp	r0, r2
 800326c:	d029      	beq.n	80032c2 <HAL_GPIO_DeInit+0x112>
 800326e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003272:	4290      	cmp	r0, r2
 8003274:	d027      	beq.n	80032c6 <HAL_GPIO_DeInit+0x116>
 8003276:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800327a:	4290      	cmp	r0, r2
 800327c:	d025      	beq.n	80032ca <HAL_GPIO_DeInit+0x11a>
 800327e:	4550      	cmp	r0, sl
 8003280:	d025      	beq.n	80032ce <HAL_GPIO_DeInit+0x11e>
 8003282:	4558      	cmp	r0, fp
 8003284:	bf0c      	ite	eq
 8003286:	2206      	moveq	r2, #6
 8003288:	2207      	movne	r2, #7
 800328a:	fa02 f20c 	lsl.w	r2, r2, ip
 800328e:	4572      	cmp	r2, lr
 8003290:	d111      	bne.n	80032b6 <HAL_GPIO_DeInit+0x106>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003292:	68b2      	ldr	r2, [r6, #8]
        EXTI->IMR1 &= ~(iocurrent);
 8003294:	9d01      	ldr	r5, [sp, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003296:	ea22 0707 	bic.w	r7, r2, r7
 800329a:	60b7      	str	r7, [r6, #8]
        EXTI->IMR1 &= ~(iocurrent);
 800329c:	6822      	ldr	r2, [r4, #0]
 800329e:	43ed      	mvns	r5, r5
 80032a0:	402a      	ands	r2, r5
 80032a2:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80032a4:	6862      	ldr	r2, [r4, #4]
 80032a6:	402a      	ands	r2, r5
 80032a8:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80032aa:	68a2      	ldr	r2, [r4, #8]
 80032ac:	402a      	ands	r2, r5
 80032ae:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80032b0:	68e2      	ldr	r2, [r4, #12]
 80032b2:	4015      	ands	r5, r2
 80032b4:	60e5      	str	r5, [r4, #12]
    position++;
 80032b6:	3301      	adds	r3, #1
 80032b8:	e786      	b.n	80031c8 <HAL_GPIO_DeInit+0x18>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80032ba:	2200      	movs	r2, #0
 80032bc:	e7e5      	b.n	800328a <HAL_GPIO_DeInit+0xda>
 80032be:	2201      	movs	r2, #1
 80032c0:	e7e3      	b.n	800328a <HAL_GPIO_DeInit+0xda>
 80032c2:	2202      	movs	r2, #2
 80032c4:	e7e1      	b.n	800328a <HAL_GPIO_DeInit+0xda>
 80032c6:	2203      	movs	r2, #3
 80032c8:	e7df      	b.n	800328a <HAL_GPIO_DeInit+0xda>
 80032ca:	2204      	movs	r2, #4
 80032cc:	e7dd      	b.n	800328a <HAL_GPIO_DeInit+0xda>
 80032ce:	2205      	movs	r2, #5
 80032d0:	e7db      	b.n	800328a <HAL_GPIO_DeInit+0xda>
 80032d2:	bf00      	nop
 80032d4:	40010400 	.word	0x40010400
 80032d8:	48000400 	.word	0x48000400
 80032dc:	48001400 	.word	0x48001400
 80032e0:	48001800 	.word	0x48001800

080032e4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80032e4:	6903      	ldr	r3, [r0, #16]
 80032e6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80032e8:	bf14      	ite	ne
 80032ea:	2001      	movne	r0, #1
 80032ec:	2000      	moveq	r0, #0
 80032ee:	4770      	bx	lr

080032f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f0:	b10a      	cbz	r2, 80032f6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032f2:	6181      	str	r1, [r0, #24]
 80032f4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032f6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80032f8:	4770      	bx	lr

080032fa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80032fa:	6943      	ldr	r3, [r0, #20]
 80032fc:	4059      	eors	r1, r3
 80032fe:	6141      	str	r1, [r0, #20]
}
 8003300:	4770      	bx	lr

08003302 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003302:	6803      	ldr	r3, [r0, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8003308:	bf44      	itt	mi
 800330a:	2200      	movmi	r2, #0
 800330c:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800330e:	699a      	ldr	r2, [r3, #24]
 8003310:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003312:	bf5e      	ittt	pl
 8003314:	699a      	ldrpl	r2, [r3, #24]
 8003316:	f042 0201 	orrpl.w	r2, r2, #1
 800331a:	619a      	strpl	r2, [r3, #24]
  }
}
 800331c:	4770      	bx	lr
	...

08003320 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003320:	b530      	push	{r4, r5, lr}
 8003322:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003324:	6804      	ldr	r4, [r0, #0]
 8003326:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 800332a:	4313      	orrs	r3, r2
 800332c:	f3c1 0209 	ubfx	r2, r1, #0, #10
 8003330:	431a      	orrs	r2, r3
 8003332:	4b04      	ldr	r3, [pc, #16]	; (8003344 <I2C_TransferConfig+0x24>)
 8003334:	6860      	ldr	r0, [r4, #4]
 8003336:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 800333a:	ea20 0003 	bic.w	r0, r0, r3
 800333e:	4302      	orrs	r2, r0
 8003340:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003342:	bd30      	pop	{r4, r5, pc}
 8003344:	03ff63ff 	.word	0x03ff63ff

08003348 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003348:	f011 0301 	ands.w	r3, r1, #1
 800334c:	d007      	beq.n	800335e <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800334e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003352:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003356:	2b28      	cmp	r3, #40	; 0x28
 8003358:	bf0c      	ite	eq
 800335a:	2342      	moveq	r3, #66	; 0x42
 800335c:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800335e:	078a      	lsls	r2, r1, #30
 8003360:	d509      	bpl.n	8003376 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003362:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003366:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800336a:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800336c:	bf0c      	ite	eq
 800336e:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003372:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003376:	074a      	lsls	r2, r1, #29
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003378:	6801      	ldr	r1, [r0, #0]
 800337a:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800337c:	bf48      	it	mi
 800337e:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003382:	ea22 0303 	bic.w	r3, r2, r3
 8003386:	600b      	str	r3, [r1, #0]
}
 8003388:	4770      	bx	lr

0800338a <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800338a:	6803      	ldr	r3, [r0, #0]
{
 800338c:	b570      	push	{r4, r5, r6, lr}
 800338e:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003390:	6998      	ldr	r0, [r3, #24]
 8003392:	f010 0010 	ands.w	r0, r0, #16
{
 8003396:	460d      	mov	r5, r1
 8003398:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800339a:	d116      	bne.n	80033ca <I2C_IsAcknowledgeFailed+0x40>
}
 800339c:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 800339e:	1c69      	adds	r1, r5, #1
 80033a0:	d014      	beq.n	80033cc <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a2:	f7ff fd59 	bl	8002e58 <HAL_GetTick>
 80033a6:	1b80      	subs	r0, r0, r6
 80033a8:	42a8      	cmp	r0, r5
 80033aa:	d800      	bhi.n	80033ae <I2C_IsAcknowledgeFailed+0x24>
 80033ac:	b96d      	cbnz	r5, 80033ca <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033b0:	f043 0320 	orr.w	r3, r3, #32
 80033b4:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033b6:	2320      	movs	r3, #32
 80033b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033bc:	2300      	movs	r3, #0
 80033be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80033c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80033c6:	2001      	movs	r0, #1
 80033c8:	e7e8      	b.n	800339c <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	6999      	ldr	r1, [r3, #24]
 80033ce:	068a      	lsls	r2, r1, #26
 80033d0:	d5e5      	bpl.n	800339e <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d2:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d4:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d6:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80033d8:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033da:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80033dc:	f7ff ff91 	bl	8003302 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80033e0:	6822      	ldr	r2, [r4, #0]
 80033e2:	6853      	ldr	r3, [r2, #4]
 80033e4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80033e8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80033ec:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033f8:	f043 0304 	orr.w	r3, r3, #4
 80033fc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033fe:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8003402:	e7db      	b.n	80033bc <I2C_IsAcknowledgeFailed+0x32>

08003404 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003404:	b570      	push	{r4, r5, r6, lr}
 8003406:	4604      	mov	r4, r0
 8003408:	460d      	mov	r5, r1
 800340a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	069b      	lsls	r3, r3, #26
 8003412:	d501      	bpl.n	8003418 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8003414:	2000      	movs	r0, #0
}
 8003416:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003418:	4632      	mov	r2, r6
 800341a:	4629      	mov	r1, r5
 800341c:	4620      	mov	r0, r4
 800341e:	f7ff ffb4 	bl	800338a <I2C_IsAcknowledgeFailed>
 8003422:	b990      	cbnz	r0, 800344a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003424:	f7ff fd18 	bl	8002e58 <HAL_GetTick>
 8003428:	1b80      	subs	r0, r0, r6
 800342a:	42a8      	cmp	r0, r5
 800342c:	d801      	bhi.n	8003432 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800342e:	2d00      	cmp	r5, #0
 8003430:	d1ec      	bne.n	800340c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003432:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003434:	f043 0320 	orr.w	r3, r3, #32
 8003438:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800343a:	2320      	movs	r3, #32
 800343c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003440:	2300      	movs	r3, #0
 8003442:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003446:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800344a:	2001      	movs	r0, #1
 800344c:	e7e3      	b.n	8003416 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800344e <I2C_WaitOnFlagUntilTimeout>:
{
 800344e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003452:	9f06      	ldr	r7, [sp, #24]
 8003454:	4604      	mov	r4, r0
 8003456:	4688      	mov	r8, r1
 8003458:	4616      	mov	r6, r2
 800345a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800345c:	6822      	ldr	r2, [r4, #0]
 800345e:	6993      	ldr	r3, [r2, #24]
 8003460:	ea38 0303 	bics.w	r3, r8, r3
 8003464:	bf0c      	ite	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	2300      	movne	r3, #0
 800346a:	42b3      	cmp	r3, r6
 800346c:	d001      	beq.n	8003472 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800346e:	2000      	movs	r0, #0
 8003470:	e015      	b.n	800349e <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003472:	1c6b      	adds	r3, r5, #1
 8003474:	d0f3      	beq.n	800345e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7ff fcef 	bl	8002e58 <HAL_GetTick>
 800347a:	1bc0      	subs	r0, r0, r7
 800347c:	42a8      	cmp	r0, r5
 800347e:	d801      	bhi.n	8003484 <I2C_WaitOnFlagUntilTimeout+0x36>
 8003480:	2d00      	cmp	r5, #0
 8003482:	d1eb      	bne.n	800345c <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003484:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003486:	f043 0320 	orr.w	r3, r3, #32
 800348a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800348c:	2320      	movs	r3, #32
 800348e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003492:	2300      	movs	r3, #0
 8003494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003498:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800349c:	2001      	movs	r0, #1
}
 800349e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080034a2 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80034a2:	b570      	push	{r4, r5, r6, lr}
 80034a4:	4604      	mov	r4, r0
 80034a6:	460d      	mov	r5, r1
 80034a8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	079b      	lsls	r3, r3, #30
 80034b0:	d501      	bpl.n	80034b6 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80034b2:	2000      	movs	r0, #0
}
 80034b4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b6:	4632      	mov	r2, r6
 80034b8:	4629      	mov	r1, r5
 80034ba:	4620      	mov	r0, r4
 80034bc:	f7ff ff65 	bl	800338a <I2C_IsAcknowledgeFailed>
 80034c0:	b9a0      	cbnz	r0, 80034ec <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80034c2:	1c6a      	adds	r2, r5, #1
 80034c4:	d0f1      	beq.n	80034aa <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c6:	f7ff fcc7 	bl	8002e58 <HAL_GetTick>
 80034ca:	1b80      	subs	r0, r0, r6
 80034cc:	42a8      	cmp	r0, r5
 80034ce:	d801      	bhi.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80034d0:	2d00      	cmp	r5, #0
 80034d2:	d1ea      	bne.n	80034aa <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034d6:	f043 0320 	orr.w	r3, r3, #32
 80034da:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	2320      	movs	r3, #32
 80034de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80034e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80034ec:	2001      	movs	r0, #1
 80034ee:	e7e1      	b.n	80034b4 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

080034f0 <I2C_RequestMemoryWrite>:
{
 80034f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80034f4:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80034f6:	4b16      	ldr	r3, [pc, #88]	; (8003550 <I2C_RequestMemoryWrite+0x60>)
 80034f8:	9300      	str	r3, [sp, #0]
{
 80034fa:	4605      	mov	r5, r0
 80034fc:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80034fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003502:	b2fa      	uxtb	r2, r7
 8003504:	f7ff ff0c 	bl	8003320 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003508:	4632      	mov	r2, r6
 800350a:	9908      	ldr	r1, [sp, #32]
 800350c:	4628      	mov	r0, r5
 800350e:	f7ff ffc8 	bl	80034a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003512:	b110      	cbz	r0, 800351a <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8003514:	2001      	movs	r0, #1
}
 8003516:	b003      	add	sp, #12
 8003518:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800351a:	2f01      	cmp	r7, #1
 800351c:	682b      	ldr	r3, [r5, #0]
 800351e:	d10c      	bne.n	800353a <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003520:	b2e4      	uxtb	r4, r4
 8003522:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003524:	9b08      	ldr	r3, [sp, #32]
 8003526:	9600      	str	r6, [sp, #0]
 8003528:	2200      	movs	r2, #0
 800352a:	2180      	movs	r1, #128	; 0x80
 800352c:	4628      	mov	r0, r5
 800352e:	f7ff ff8e 	bl	800344e <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8003532:	3000      	adds	r0, #0
 8003534:	bf18      	it	ne
 8003536:	2001      	movne	r0, #1
 8003538:	e7ed      	b.n	8003516 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800353a:	0a22      	lsrs	r2, r4, #8
 800353c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800353e:	9908      	ldr	r1, [sp, #32]
 8003540:	4632      	mov	r2, r6
 8003542:	4628      	mov	r0, r5
 8003544:	f7ff ffad 	bl	80034a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003548:	2800      	cmp	r0, #0
 800354a:	d1e3      	bne.n	8003514 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	e7e7      	b.n	8003520 <I2C_RequestMemoryWrite+0x30>
 8003550:	80002000 	.word	0x80002000

08003554 <I2C_RequestMemoryRead>:
{
 8003554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003556:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003558:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800355a:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <I2C_RequestMemoryRead+0x60>)
 800355c:	9300      	str	r3, [sp, #0]
{
 800355e:	4605      	mov	r5, r0
 8003560:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003562:	2300      	movs	r3, #0
 8003564:	b2fa      	uxtb	r2, r7
 8003566:	f7ff fedb 	bl	8003320 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800356a:	4632      	mov	r2, r6
 800356c:	9908      	ldr	r1, [sp, #32]
 800356e:	4628      	mov	r0, r5
 8003570:	f7ff ff97 	bl	80034a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003574:	b110      	cbz	r0, 800357c <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8003576:	2001      	movs	r0, #1
}
 8003578:	b003      	add	sp, #12
 800357a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800357c:	2f01      	cmp	r7, #1
 800357e:	682b      	ldr	r3, [r5, #0]
 8003580:	d10c      	bne.n	800359c <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003582:	b2e4      	uxtb	r4, r4
 8003584:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003586:	9b08      	ldr	r3, [sp, #32]
 8003588:	9600      	str	r6, [sp, #0]
 800358a:	2200      	movs	r2, #0
 800358c:	2140      	movs	r1, #64	; 0x40
 800358e:	4628      	mov	r0, r5
 8003590:	f7ff ff5d 	bl	800344e <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8003594:	3000      	adds	r0, #0
 8003596:	bf18      	it	ne
 8003598:	2001      	movne	r0, #1
 800359a:	e7ed      	b.n	8003578 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800359c:	0a22      	lsrs	r2, r4, #8
 800359e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a0:	9908      	ldr	r1, [sp, #32]
 80035a2:	4632      	mov	r2, r6
 80035a4:	4628      	mov	r0, r5
 80035a6:	f7ff ff7c 	bl	80034a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80035aa:	2800      	cmp	r0, #0
 80035ac:	d1e3      	bne.n	8003576 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035ae:	682b      	ldr	r3, [r5, #0]
 80035b0:	e7e7      	b.n	8003582 <I2C_RequestMemoryRead+0x2e>
 80035b2:	bf00      	nop
 80035b4:	80002000 	.word	0x80002000

080035b8 <HAL_I2C_MspInit>:
}
 80035b8:	4770      	bx	lr

080035ba <HAL_I2C_Init>:
{
 80035ba:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80035bc:	4604      	mov	r4, r0
 80035be:	2800      	cmp	r0, #0
 80035c0:	d04a      	beq.n	8003658 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035c2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80035c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035ca:	b91b      	cbnz	r3, 80035d4 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80035cc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80035d0:	f7ff fff2 	bl	80035b8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80035d4:	2324      	movs	r3, #36	; 0x24
 80035d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035e4:	6862      	ldr	r2, [r4, #4]
 80035e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035ea:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035f8:	2901      	cmp	r1, #1
 80035fa:	d124      	bne.n	8003646 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003600:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003608:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800360c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003614:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003616:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800361a:	430a      	orrs	r2, r1
 800361c:	69a1      	ldr	r1, [r4, #24]
 800361e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003622:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003624:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8003628:	430a      	orrs	r2, r1
 800362a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003634:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003636:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003638:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800363a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800363e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003640:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003644:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003646:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800364a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800364c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800364e:	bf04      	itt	eq
 8003650:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8003654:	605a      	streq	r2, [r3, #4]
 8003656:	e7d4      	b.n	8003602 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8003658:	2001      	movs	r0, #1
 800365a:	e7f3      	b.n	8003644 <HAL_I2C_Init+0x8a>

0800365c <HAL_I2C_MspDeInit>:
 800365c:	4770      	bx	lr

0800365e <HAL_I2C_DeInit>:
{
 800365e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003660:	4604      	mov	r4, r0
 8003662:	b198      	cbz	r0, 800368c <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8003664:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003666:	2324      	movs	r3, #36	; 0x24
 8003668:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800366c:	6813      	ldr	r3, [r2, #0]
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003674:	f7ff fff2 	bl	800365c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003678:	2000      	movs	r0, #0
 800367a:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800367c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8003680:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003684:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003686:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800368a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800368c:	2001      	movs	r0, #1
 800368e:	e7fc      	b.n	800368a <HAL_I2C_DeInit+0x2c>

08003690 <HAL_I2C_Mem_Write>:
{
 8003690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003694:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003696:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800369a:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 800369c:	2b20      	cmp	r3, #32
{
 800369e:	4604      	mov	r4, r0
 80036a0:	460f      	mov	r7, r1
 80036a2:	9203      	str	r2, [sp, #12]
 80036a4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80036a8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ac:	f040 80a2 	bne.w	80037f4 <HAL_I2C_Mem_Write+0x164>
    if ((pData == NULL) || (Size == 0U))
 80036b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036b2:	b113      	cbz	r3, 80036ba <HAL_I2C_Mem_Write+0x2a>
 80036b4:	f1ba 0f00 	cmp.w	sl, #0
 80036b8:	d106      	bne.n	80036c8 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036be:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80036c0:	2001      	movs	r0, #1
}
 80036c2:	b005      	add	sp, #20
 80036c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80036c8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	f000 8091 	beq.w	80037f4 <HAL_I2C_Mem_Write+0x164>
 80036d2:	2501      	movs	r5, #1
 80036d4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80036d8:	f7ff fbbe 	bl	8002e58 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036dc:	2319      	movs	r3, #25
 80036de:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80036e0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036e2:	462a      	mov	r2, r5
 80036e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036e8:	4620      	mov	r0, r4
 80036ea:	f7ff feb0 	bl	800344e <I2C_WaitOnFlagUntilTimeout>
 80036ee:	4681      	mov	r9, r0
 80036f0:	2800      	cmp	r0, #0
 80036f2:	d1e5      	bne.n	80036c0 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036f4:	2321      	movs	r3, #33	; 0x21
 80036f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036fa:	2340      	movs	r3, #64	; 0x40
 80036fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8003700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003702:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003704:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8003706:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003708:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800370c:	e9cd 8600 	strd	r8, r6, [sp]
 8003710:	465b      	mov	r3, fp
 8003712:	9a03      	ldr	r2, [sp, #12]
 8003714:	4639      	mov	r1, r7
 8003716:	4620      	mov	r0, r4
 8003718:	f7ff feea 	bl	80034f0 <I2C_RequestMemoryWrite>
 800371c:	b110      	cbz	r0, 8003724 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 800371e:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8003722:	e7cd      	b.n	80036c0 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003724:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003726:	2bff      	cmp	r3, #255	; 0xff
 8003728:	d954      	bls.n	80037d4 <HAL_I2C_Mem_Write+0x144>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800372a:	22ff      	movs	r2, #255	; 0xff
 800372c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800372e:	9000      	str	r0, [sp, #0]
 8003730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003734:	4639      	mov	r1, r7
 8003736:	4620      	mov	r0, r4
 8003738:	f7ff fdf2 	bl	8003320 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800373c:	4632      	mov	r2, r6
 800373e:	4641      	mov	r1, r8
 8003740:	4620      	mov	r0, r4
 8003742:	f7ff feae 	bl	80034a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003746:	2800      	cmp	r0, #0
 8003748:	d1ba      	bne.n	80036c0 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800374a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800374c:	6822      	ldr	r2, [r4, #0]
 800374e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003752:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003754:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003756:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003758:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800375a:	3b01      	subs	r3, #1
 800375c:	b29b      	uxth	r3, r3
 800375e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003760:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003762:	3a01      	subs	r2, #1
 8003764:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003766:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8003768:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800376a:	b1a3      	cbz	r3, 8003796 <HAL_I2C_Mem_Write+0x106>
 800376c:	b99a      	cbnz	r2, 8003796 <HAL_I2C_Mem_Write+0x106>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800376e:	9600      	str	r6, [sp, #0]
 8003770:	4643      	mov	r3, r8
 8003772:	2180      	movs	r1, #128	; 0x80
 8003774:	4620      	mov	r0, r4
 8003776:	f7ff fe6a 	bl	800344e <I2C_WaitOnFlagUntilTimeout>
 800377a:	2800      	cmp	r0, #0
 800377c:	d1a0      	bne.n	80036c0 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800377e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003780:	2bff      	cmp	r3, #255	; 0xff
 8003782:	d92f      	bls.n	80037e4 <HAL_I2C_Mem_Write+0x154>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003784:	22ff      	movs	r2, #255	; 0xff
 8003786:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003788:	9000      	str	r0, [sp, #0]
 800378a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800378e:	4639      	mov	r1, r7
 8003790:	4620      	mov	r0, r4
 8003792:	f7ff fdc5 	bl	8003320 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003796:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1ce      	bne.n	800373c <HAL_I2C_Mem_Write+0xac>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800379e:	4632      	mov	r2, r6
 80037a0:	4641      	mov	r1, r8
 80037a2:	4620      	mov	r0, r4
 80037a4:	f7ff fe2e 	bl	8003404 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d189      	bne.n	80036c0 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	2120      	movs	r1, #32
 80037b0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80037b8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80037bc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80037c6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80037ca:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037ce:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80037d2:	e776      	b.n	80036c2 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80037d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037d6:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80037d8:	b292      	uxth	r2, r2
 80037da:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	e7a7      	b.n	8003734 <HAL_I2C_Mem_Write+0xa4>
          hi2c->XferSize = hi2c->XferCount;
 80037e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037e6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80037e8:	b292      	uxth	r2, r2
 80037ea:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	e7cc      	b.n	800378e <HAL_I2C_Mem_Write+0xfe>
    return HAL_BUSY;
 80037f4:	2002      	movs	r0, #2
 80037f6:	e764      	b.n	80036c2 <HAL_I2C_Mem_Write+0x32>

080037f8 <HAL_I2C_Mem_Read>:
{
 80037f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037fc:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037fe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003802:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003804:	2b20      	cmp	r3, #32
{
 8003806:	4604      	mov	r4, r0
 8003808:	460f      	mov	r7, r1
 800380a:	9203      	str	r2, [sp, #12]
 800380c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8003810:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003814:	f040 80a6 	bne.w	8003964 <HAL_I2C_Mem_Read+0x16c>
    if ((pData == NULL) || (Size == 0U))
 8003818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800381a:	b113      	cbz	r3, 8003822 <HAL_I2C_Mem_Read+0x2a>
 800381c:	f1ba 0f00 	cmp.w	sl, #0
 8003820:	d106      	bne.n	8003830 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003826:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8003828:	2001      	movs	r0, #1
}
 800382a:	b005      	add	sp, #20
 800382c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003830:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003834:	2b01      	cmp	r3, #1
 8003836:	f000 8095 	beq.w	8003964 <HAL_I2C_Mem_Read+0x16c>
 800383a:	2501      	movs	r5, #1
 800383c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003840:	f7ff fb0a 	bl	8002e58 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003844:	2319      	movs	r3, #25
 8003846:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8003848:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800384a:	462a      	mov	r2, r5
 800384c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003850:	4620      	mov	r0, r4
 8003852:	f7ff fdfc 	bl	800344e <I2C_WaitOnFlagUntilTimeout>
 8003856:	4681      	mov	r9, r0
 8003858:	2800      	cmp	r0, #0
 800385a:	d1e5      	bne.n	8003828 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800385c:	2322      	movs	r3, #34	; 0x22
 800385e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003862:	2340      	movs	r3, #64	; 0x40
 8003864:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8003868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800386a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800386c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800386e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003870:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003874:	e9cd 8600 	strd	r8, r6, [sp]
 8003878:	465b      	mov	r3, fp
 800387a:	9a03      	ldr	r2, [sp, #12]
 800387c:	4639      	mov	r1, r7
 800387e:	4620      	mov	r0, r4
 8003880:	f7ff fe68 	bl	8003554 <I2C_RequestMemoryRead>
 8003884:	b110      	cbz	r0, 800388c <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8003886:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 800388a:	e7cd      	b.n	8003828 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800388c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800388e:	2bff      	cmp	r3, #255	; 0xff
 8003890:	4b35      	ldr	r3, [pc, #212]	; (8003968 <HAL_I2C_Mem_Read+0x170>)
 8003892:	d957      	bls.n	8003944 <HAL_I2C_Mem_Read+0x14c>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003894:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003896:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003898:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800389a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800389e:	4639      	mov	r1, r7
 80038a0:	4620      	mov	r0, r4
 80038a2:	f7ff fd3d 	bl	8003320 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038a6:	9600      	str	r6, [sp, #0]
 80038a8:	4643      	mov	r3, r8
 80038aa:	2200      	movs	r2, #0
 80038ac:	2104      	movs	r1, #4
 80038ae:	4620      	mov	r0, r4
 80038b0:	f7ff fdcd 	bl	800344e <I2C_WaitOnFlagUntilTimeout>
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d1b7      	bne.n	8003828 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038be:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80038c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80038c2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80038c4:	3301      	adds	r3, #1
 80038c6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80038c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80038d2:	3a01      	subs	r2, #1
 80038d4:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038d6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80038d8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038da:	b1a3      	cbz	r3, 8003906 <HAL_I2C_Mem_Read+0x10e>
 80038dc:	b99a      	cbnz	r2, 8003906 <HAL_I2C_Mem_Read+0x10e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038de:	9600      	str	r6, [sp, #0]
 80038e0:	4643      	mov	r3, r8
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	4620      	mov	r0, r4
 80038e6:	f7ff fdb2 	bl	800344e <I2C_WaitOnFlagUntilTimeout>
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d19c      	bne.n	8003828 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038f0:	2bff      	cmp	r3, #255	; 0xff
 80038f2:	d92f      	bls.n	8003954 <HAL_I2C_Mem_Read+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038f4:	22ff      	movs	r2, #255	; 0xff
 80038f6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038f8:	9000      	str	r0, [sp, #0]
 80038fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038fe:	4639      	mov	r1, r7
 8003900:	4620      	mov	r0, r4
 8003902:	f7ff fd0d 	bl	8003320 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003906:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1cb      	bne.n	80038a6 <HAL_I2C_Mem_Read+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390e:	4632      	mov	r2, r6
 8003910:	4641      	mov	r1, r8
 8003912:	4620      	mov	r0, r4
 8003914:	f7ff fd76 	bl	8003404 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003918:	2800      	cmp	r0, #0
 800391a:	d185      	bne.n	8003828 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	2120      	movs	r1, #32
 8003920:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003928:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800392c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003936:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800393a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800393e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003942:	e772      	b.n	800382a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8003944:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003946:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8003948:	b292      	uxth	r2, r2
 800394a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800394c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	e7a4      	b.n	800389e <HAL_I2C_Mem_Read+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8003954:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003956:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003958:	b292      	uxth	r2, r2
 800395a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800395c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	e7cc      	b.n	80038fe <HAL_I2C_Mem_Read+0x106>
    return HAL_BUSY;
 8003964:	2002      	movs	r0, #2
 8003966:	e760      	b.n	800382a <HAL_I2C_Mem_Read+0x32>
 8003968:	80002400 	.word	0x80002400

0800396c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800396c:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 800396e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003970:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003972:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8003974:	b103      	cbz	r3, 8003978 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8003976:	4718      	bx	r3
}
 8003978:	4770      	bx	lr

0800397a <HAL_I2C_SlaveTxCpltCallback>:
 800397a:	4770      	bx	lr

0800397c <HAL_I2C_SlaveRxCpltCallback>:
 800397c:	4770      	bx	lr

0800397e <I2C_ITSlaveSequentialCplt>:
{
 800397e:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003980:	2500      	movs	r5, #0
 8003982:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003986:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800398a:	2b29      	cmp	r3, #41	; 0x29
 800398c:	d10c      	bne.n	80039a8 <I2C_ITSlaveSequentialCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800398e:	2328      	movs	r3, #40	; 0x28
 8003990:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003994:	2321      	movs	r3, #33	; 0x21
 8003996:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003998:	2101      	movs	r1, #1
 800399a:	f7ff fcd5 	bl	8003348 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800399e:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039a2:	f7ff ffea 	bl	800397a <HAL_I2C_SlaveTxCpltCallback>
}
 80039a6:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80039a8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80039ac:	2b2a      	cmp	r3, #42	; 0x2a
 80039ae:	d1fa      	bne.n	80039a6 <I2C_ITSlaveSequentialCplt+0x28>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039b0:	2328      	movs	r3, #40	; 0x28
 80039b2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039b6:	2322      	movs	r3, #34	; 0x22
 80039b8:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80039ba:	2102      	movs	r1, #2
 80039bc:	f7ff fcc4 	bl	8003348 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80039c0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039c4:	f7ff ffda 	bl	800397c <HAL_I2C_SlaveRxCpltCallback>
}
 80039c8:	e7ed      	b.n	80039a6 <I2C_ITSlaveSequentialCplt+0x28>

080039ca <HAL_I2C_AddrCallback>:
}
 80039ca:	4770      	bx	lr

080039cc <I2C_ITAddrCplt.isra.9>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039cc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80039d0:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80039d4:	2a28      	cmp	r2, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80039d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d8:	4604      	mov	r4, r0
 80039da:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039dc:	d134      	bne.n	8003a48 <I2C_ITAddrCplt.isra.9+0x7c>
    transferdirection = I2C_GET_DIR(hi2c);
 80039de:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039e0:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80039e2:	699d      	ldr	r5, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80039e4:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80039e6:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80039e8:	0c2d      	lsrs	r5, r5, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039ea:	2902      	cmp	r1, #2
    transferdirection = I2C_GET_DIR(hi2c);
 80039ec:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80039f0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039f4:	d120      	bne.n	8003a38 <I2C_ITAddrCplt.isra.9+0x6c>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80039f6:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80039fa:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 80039fe:	f015 0506 	ands.w	r5, r5, #6
 8003a02:	d10e      	bne.n	8003a22 <I2C_ITAddrCplt.isra.9+0x56>
        hi2c->AddrEventCount++;
 8003a04:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003a06:	3101      	adds	r1, #1
 8003a08:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003a0a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003a0c:	2902      	cmp	r1, #2
 8003a0e:	d107      	bne.n	8003a20 <I2C_ITAddrCplt.isra.9+0x54>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a10:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8003a12:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a14:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8003a16:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a1a:	4631      	mov	r1, r6
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a1c:	f7ff ffd5 	bl	80039ca <HAL_I2C_AddrCallback>
}
 8003a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a22:	2104      	movs	r1, #4
 8003a24:	f7ff fc90 	bl	8003348 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a2e:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a32:	4631      	mov	r1, r6
 8003a34:	4620      	mov	r0, r4
 8003a36:	e7f1      	b.n	8003a1c <I2C_ITAddrCplt.isra.9+0x50>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a38:	2104      	movs	r1, #4
 8003a3a:	f7ff fc85 	bl	8003348 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a44:	462a      	mov	r2, r5
 8003a46:	e7f4      	b.n	8003a32 <I2C_ITAddrCplt.isra.9+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a48:	2208      	movs	r2, #8
 8003a4a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8003a52:	e7e5      	b.n	8003a20 <I2C_ITAddrCplt.isra.9+0x54>

08003a54 <HAL_I2C_ListenCpltCallback>:
 8003a54:	4770      	bx	lr
	...

08003a58 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a58:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <I2C_ITListenCplt+0x5c>)
{
 8003a5a:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 8003a5c:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a5e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8003a64:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003a6e:	074b      	lsls	r3, r1, #29
{
 8003a70:	4604      	mov	r4, r0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003a72:	d512      	bpl.n	8003a9a <I2C_ITListenCplt+0x42>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a74:	6803      	ldr	r3, [r0, #0]
 8003a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003a7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003a7e:	3301      	adds	r3, #1
 8003a80:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003a82:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8003a84:	b14b      	cbz	r3, 8003a9a <I2C_ITListenCplt+0x42>
      hi2c->XferSize--;
 8003a86:	3b01      	subs	r3, #1
 8003a88:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8003a8a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a92:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a94:	f043 0304 	orr.w	r3, r3, #4
 8003a98:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a9a:	2107      	movs	r1, #7
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f7ff fc53 	bl	8003348 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8003aae:	f7ff ffd1 	bl	8003a54 <HAL_I2C_ListenCpltCallback>
}
 8003ab2:	bd10      	pop	{r4, pc}
 8003ab4:	ffff0000 	.word	0xffff0000

08003ab8 <HAL_I2C_ErrorCallback>:
 8003ab8:	4770      	bx	lr

08003aba <HAL_I2C_AbortCpltCallback>:
 8003aba:	4770      	bx	lr

08003abc <I2C_ITError>:
{
 8003abc:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003abe:	4a31      	ldr	r2, [pc, #196]	; (8003b84 <I2C_ITError+0xc8>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ac0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ac4:	2500      	movs	r5, #0
 8003ac6:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003aca:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003acc:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8003ace:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003ad0:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8003ad2:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003ad4:	2b02      	cmp	r3, #2
{
 8003ad6:	4604      	mov	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8003ad8:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003ada:	d821      	bhi.n	8003b20 <I2C_ITError+0x64>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003adc:	2103      	movs	r1, #3
 8003ade:	f7ff fc33 	bl	8003348 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ae2:	2328      	movs	r3, #40	; 0x28
 8003ae4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003ae8:	4b27      	ldr	r3, [pc, #156]	; (8003b88 <I2C_ITError+0xcc>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aea:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003aec:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003af2:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003af4:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8003af8:	d01f      	beq.n	8003b3a <I2C_ITError+0x7e>
    if (hi2c->hdmatx != NULL)
 8003afa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003afc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b00:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8003b02:	2800      	cmp	r0, #0
 8003b04:	d037      	beq.n	8003b76 <I2C_ITError+0xba>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b06:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <I2C_ITError+0xd0>)
 8003b08:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b10:	f7ff fa27 	bl	8002f62 <HAL_DMA_Abort_IT>
 8003b14:	b378      	cbz	r0, 8003b76 <I2C_ITError+0xba>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b16:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b18:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8003b1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b1e:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b20:	2107      	movs	r1, #7
 8003b22:	f7ff fc11 	bl	8003348 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003b26:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003b2a:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8003b2c:	bf1c      	itt	ne
 8003b2e:	2320      	movne	r3, #32
 8003b30:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	6303      	str	r3, [r0, #48]	; 0x30
 8003b38:	e7d8      	b.n	8003aec <I2C_ITError+0x30>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003b3a:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8003b3e:	d00e      	beq.n	8003b5e <I2C_ITError+0xa2>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b40:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8003b42:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b48:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8003b4a:	b1a0      	cbz	r0, 8003b76 <I2C_ITError+0xba>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <I2C_ITError+0xd0>)
 8003b4e:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8003b50:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b54:	f7ff fa05 	bl	8002f62 <HAL_DMA_Abort_IT>
 8003b58:	b168      	cbz	r0, 8003b76 <I2C_ITError+0xba>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b5a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003b5c:	e7dc      	b.n	8003b18 <I2C_ITError+0x5c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b5e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003b62:	2b60      	cmp	r3, #96	; 0x60
 8003b64:	d108      	bne.n	8003b78 <I2C_ITError+0xbc>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b66:	2320      	movs	r3, #32
 8003b68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003b6c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b70:	4620      	mov	r0, r4
 8003b72:	f7ff ffa2 	bl	8003aba <HAL_I2C_AbortCpltCallback>
}
 8003b76:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hi2c);
 8003b78:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f7ff ff9b 	bl	8003ab8 <HAL_I2C_ErrorCallback>
}
 8003b82:	e7f8      	b.n	8003b76 <I2C_ITError+0xba>
 8003b84:	ffff0000 	.word	0xffff0000
 8003b88:	08003c81 	.word	0x08003c81
 8003b8c:	08003df1 	.word	0x08003df1

08003b90 <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b90:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b92:	2220      	movs	r2, #32
{
 8003b94:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b96:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b98:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	61da      	str	r2, [r3, #28]
{
 8003b9e:	460d      	mov	r5, r1
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003ba0:	2107      	movs	r1, #7
{
 8003ba2:	4604      	mov	r4, r0
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003ba4:	f7ff fbd0 	bl	8003348 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003ba8:	6803      	ldr	r3, [r0, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bb0:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003bb8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003bbc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003bc0:	f022 0201 	bic.w	r2, r2, #1
 8003bc4:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8003bc6:	f7ff fb9c 	bl	8003302 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003bca:	0471      	lsls	r1, r6, #17
 8003bcc:	d532      	bpl.n	8003c34 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 8003bce:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8003bd0:	b11b      	cbz	r3, 8003bda <I2C_ITSlaveCplt+0x4a>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003bda:	076b      	lsls	r3, r5, #29
 8003bdc:	d50e      	bpl.n	8003bfc <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003be4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003be8:	3301      	adds	r3, #1
 8003bea:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003bec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003bee:	b12b      	cbz	r3, 8003bfc <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003bf4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8003bfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	b11b      	cbz	r3, 8003c0a <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c04:	f043 0304 	orr.w	r3, r3, #4
 8003c08:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003c12:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c16:	b18b      	cbz	r3, 8003c3c <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c18:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7ff ff4e 	bl	8003abc <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c20:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003c24:	2b28      	cmp	r3, #40	; 0x28
 8003c26:	d117      	bne.n	8003c58 <I2C_ITSlaveCplt+0xc8>
      I2C_ITListenCplt(hi2c, ITFlags);
 8003c28:	4629      	mov	r1, r5
 8003c2a:	4620      	mov	r0, r4
}
 8003c2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 8003c30:	f7ff bf12 	b.w	8003a58 <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c34:	0432      	lsls	r2, r6, #16
 8003c36:	d5d0      	bpl.n	8003bda <I2C_ITSlaveCplt+0x4a>
    if (hi2c->hdmarx != NULL)
 8003c38:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003c3a:	e7c9      	b.n	8003bd0 <I2C_ITSlaveCplt+0x40>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c3e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003c42:	d00a      	beq.n	8003c5a <I2C_ITSlaveCplt+0xca>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c44:	4a0d      	ldr	r2, [pc, #52]	; (8003c7c <I2C_ITSlaveCplt+0xec>)
 8003c46:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003c4e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c52:	4620      	mov	r0, r4
 8003c54:	f7ff fefe 	bl	8003a54 <HAL_I2C_ListenCpltCallback>
}
 8003c58:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c5a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003c5e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c62:	2a22      	cmp	r2, #34	; 0x22
 8003c64:	f04f 0220 	mov.w	r2, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8003c68:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c6c:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c6e:	d102      	bne.n	8003c76 <I2C_ITSlaveCplt+0xe6>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c70:	f7ff fe84 	bl	800397c <HAL_I2C_SlaveRxCpltCallback>
 8003c74:	e7f0      	b.n	8003c58 <I2C_ITSlaveCplt+0xc8>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c76:	f7ff fe80 	bl	800397a <HAL_I2C_SlaveTxCpltCallback>
}
 8003c7a:	e7ed      	b.n	8003c58 <I2C_ITSlaveCplt+0xc8>
 8003c7c:	ffff0000 	.word	0xffff0000

08003c80 <I2C_Slave_ISR_IT>:
{
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8003c84:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8003c88:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8003c8a:	2a01      	cmp	r2, #1
{
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8003c90:	d07c      	beq.n	8003d8c <I2C_Slave_ISR_IT+0x10c>
 8003c92:	2201      	movs	r2, #1
 8003c94:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c98:	06ca      	lsls	r2, r1, #27
 8003c9a:	d539      	bpl.n	8003d10 <I2C_Slave_ISR_IT+0x90>
 8003c9c:	06f2      	lsls	r2, r6, #27
 8003c9e:	d537      	bpl.n	8003d10 <I2C_Slave_ISR_IT+0x90>
    if (hi2c->XferCount == 0U)
 8003ca0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8003ca2:	b292      	uxth	r2, r2
 8003ca4:	bb32      	cbnz	r2, 8003cf4 <I2C_Slave_ISR_IT+0x74>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003ca6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003caa:	2a28      	cmp	r2, #40	; 0x28
 8003cac:	d110      	bne.n	8003cd0 <I2C_Slave_ISR_IT+0x50>
 8003cae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cb2:	d10d      	bne.n	8003cd0 <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, ITFlags);
 8003cb4:	f7ff fed0 	bl	8003a58 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003cb8:	06aa      	lsls	r2, r5, #26
 8003cba:	d505      	bpl.n	8003cc8 <I2C_Slave_ISR_IT+0x48>
 8003cbc:	06b3      	lsls	r3, r6, #26
 8003cbe:	d503      	bpl.n	8003cc8 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f7ff ff64 	bl	8003b90 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8003cc8:	2000      	movs	r0, #0
 8003cca:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003cd0:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8003cd4:	6822      	ldr	r2, [r4, #0]
 8003cd6:	2929      	cmp	r1, #41	; 0x29
 8003cd8:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cdc:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003cde:	d1eb      	bne.n	8003cb8 <I2C_Slave_ISR_IT+0x38>
 8003ce0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ce4:	d0e8      	beq.n	8003cb8 <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f7ff fb0b 	bl	8003302 <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 8003cec:	4620      	mov	r0, r4
 8003cee:	f7ff fe46 	bl	800397e <I2C_ITSlaveSequentialCplt>
 8003cf2:	e7e1      	b.n	8003cb8 <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf4:	6802      	ldr	r2, [r0, #0]
 8003cf6:	2110      	movs	r1, #16
 8003cf8:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cfa:	6c42      	ldr	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003cfc:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d00:	f042 0204 	orr.w	r2, r2, #4
 8003d04:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003d06:	d1d7      	bne.n	8003cb8 <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003d08:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003d0a:	f7ff fed7 	bl	8003abc <I2C_ITError>
 8003d0e:	e7d3      	b.n	8003cb8 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003d10:	076a      	lsls	r2, r5, #29
 8003d12:	d51a      	bpl.n	8003d4a <I2C_Slave_ISR_IT+0xca>
 8003d14:	0770      	lsls	r0, r6, #29
 8003d16:	d518      	bpl.n	8003d4a <I2C_Slave_ISR_IT+0xca>
    if (hi2c->XferCount > 0U)
 8003d18:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d1a:	b292      	uxth	r2, r2
 8003d1c:	b16a      	cbz	r2, 8003d3a <I2C_Slave_ISR_IT+0xba>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d1e:	6822      	ldr	r2, [r4, #0]
 8003d20:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003d22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d24:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 8003d26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d28:	3201      	adds	r2, #1
 8003d2a:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003d2c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003d2e:	3a01      	subs	r2, #1
 8003d30:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003d32:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d34:	3a01      	subs	r2, #1
 8003d36:	b292      	uxth	r2, r2
 8003d38:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8003d3a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d3c:	b292      	uxth	r2, r2
 8003d3e:	2a00      	cmp	r2, #0
 8003d40:	d1ba      	bne.n	8003cb8 <I2C_Slave_ISR_IT+0x38>
 8003d42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d46:	d0b7      	beq.n	8003cb8 <I2C_Slave_ISR_IT+0x38>
 8003d48:	e7d0      	b.n	8003cec <I2C_Slave_ISR_IT+0x6c>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003d4a:	0729      	lsls	r1, r5, #28
 8003d4c:	d505      	bpl.n	8003d5a <I2C_Slave_ISR_IT+0xda>
 8003d4e:	0732      	lsls	r2, r6, #28
 8003d50:	d503      	bpl.n	8003d5a <I2C_Slave_ISR_IT+0xda>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7ff fe3a 	bl	80039cc <I2C_ITAddrCplt.isra.9>
 8003d58:	e7ae      	b.n	8003cb8 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003d5a:	07a8      	lsls	r0, r5, #30
 8003d5c:	d5ac      	bpl.n	8003cb8 <I2C_Slave_ISR_IT+0x38>
 8003d5e:	07b1      	lsls	r1, r6, #30
 8003d60:	d5aa      	bpl.n	8003cb8 <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 8003d62:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d64:	b292      	uxth	r2, r2
 8003d66:	b16a      	cbz	r2, 8003d84 <I2C_Slave_ISR_IT+0x104>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d6a:	6822      	ldr	r2, [r4, #0]
 8003d6c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003d70:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003d72:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003d74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003d7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	8523      	strh	r3, [r4, #40]	; 0x28
 8003d82:	e799      	b.n	8003cb8 <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003d84:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8003d88:	d0b0      	beq.n	8003cec <I2C_Slave_ISR_IT+0x6c>
 8003d8a:	e795      	b.n	8003cb8 <I2C_Slave_ISR_IT+0x38>
  __HAL_LOCK(hi2c);
 8003d8c:	2002      	movs	r0, #2
 8003d8e:	e79e      	b.n	8003cce <I2C_Slave_ISR_IT+0x4e>

08003d90 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d90:	6803      	ldr	r3, [r0, #0]
 8003d92:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d94:	681a      	ldr	r2, [r3, #0]
{
 8003d96:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d98:	05cc      	lsls	r4, r1, #23
 8003d9a:	d508      	bpl.n	8003dae <HAL_I2C_ER_IRQHandler+0x1e>
 8003d9c:	0614      	lsls	r4, r2, #24
 8003d9e:	d506      	bpl.n	8003dae <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003da0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003da2:	f044 0401 	orr.w	r4, r4, #1
 8003da6:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003da8:	f44f 7480 	mov.w	r4, #256	; 0x100
 8003dac:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dae:	054c      	lsls	r4, r1, #21
 8003db0:	d508      	bpl.n	8003dc4 <HAL_I2C_ER_IRQHandler+0x34>
 8003db2:	0614      	lsls	r4, r2, #24
 8003db4:	d506      	bpl.n	8003dc4 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003db6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003db8:	f044 0408 	orr.w	r4, r4, #8
 8003dbc:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dbe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003dc2:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dc4:	0589      	lsls	r1, r1, #22
 8003dc6:	d508      	bpl.n	8003dda <HAL_I2C_ER_IRQHandler+0x4a>
 8003dc8:	0612      	lsls	r2, r2, #24
 8003dca:	d506      	bpl.n	8003dda <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003dcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003dce:	f042 0202 	orr.w	r2, r2, #2
 8003dd2:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dd8:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8003dda:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003ddc:	f011 0f0b 	tst.w	r1, #11
 8003de0:	d003      	beq.n	8003dea <HAL_I2C_ER_IRQHandler+0x5a>
}
 8003de2:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 8003de6:	f7ff be69 	b.w	8003abc <I2C_ITError>
}
 8003dea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003df0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003df2:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 8003df4:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003dfa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003dfc:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003dfe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003e02:	2b60      	cmp	r3, #96	; 0x60
 8003e04:	d105      	bne.n	8003e12 <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	2320      	movs	r3, #32
 8003e08:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e0c:	f7ff fe55 	bl	8003aba <HAL_I2C_AbortCpltCallback>
}
 8003e10:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8003e12:	f7ff fe51 	bl	8003ab8 <HAL_I2C_ErrorCallback>
}
 8003e16:	e7fb      	b.n	8003e10 <I2C_DMAAbort+0x20>

08003e18 <HAL_I2C_GetState>:
  return hi2c->State;
 8003e18:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8003e1c:	4770      	bx	lr

08003e1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e22:	4604      	mov	r4, r0
{
 8003e24:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d074      	beq.n	8003f14 <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e2a:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8003e2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003e32:	b91b      	cbnz	r3, 8003e3c <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e34:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e38:	f7fd fa86 	bl	8001348 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e3c:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e3e:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8003e40:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e44:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8003e48:	f002 f96b 	bl	8006122 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e4e:	466e      	mov	r6, sp
 8003e50:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e54:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003e5a:	e886 0003 	stmia.w	r6, {r0, r1}
 8003e5e:	f104 0804 	add.w	r8, r4, #4
 8003e62:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8003e66:	6820      	ldr	r0, [r4, #0]
 8003e68:	f002 f926 	bl	80060b8 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	6820      	ldr	r0, [r4, #0]
 8003e70:	f002 f95d 	bl	800612e <USB_SetCurrentMode>
 8003e74:	2100      	movs	r1, #0
 8003e76:	4622      	mov	r2, r4
 8003e78:	4623      	mov	r3, r4
 8003e7a:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e7e:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e80:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 8003e82:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e86:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 8003e8a:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 8003e8c:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 8003e8e:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e92:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e96:	e9c3 0011 	strd	r0, r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e9a:	6518      	str	r0, [r3, #80]	; 0x50
 8003e9c:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 8003ea0:	d1ef      	bne.n	8003e82 <HAL_PCD_Init+0x64>
 8003ea2:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ea4:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 8003ea6:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 8003eaa:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 8003eac:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 8003eae:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003eb2:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003eb6:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003eba:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ebe:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 8003ec2:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 8003ec6:	d1ee      	bne.n	8003ea6 <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003eca:	466e      	mov	r6, sp
 8003ecc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ed0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003ed2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003ed6:	e886 0003 	stmia.w	r6, {r0, r1}
 8003eda:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8003ede:	6820      	ldr	r0, [r4, #0]
 8003ee0:	f002 f966 	bl	80061b0 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8003ee4:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8003ee6:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003eea:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d102      	bne.n	8003efa <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f000 fc38 	bl	800476a <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8003efa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d102      	bne.n	8003f06 <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8003f00:	4620      	mov	r0, r4
 8003f02:	f000 fc45 	bl	8004790 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f06:	6820      	ldr	r0, [r4, #0]
 8003f08:	f002 fbf6 	bl	80066f8 <USB_DevDisconnect>

  return HAL_OK;
 8003f0c:	2000      	movs	r0, #0
}
 8003f0e:	b00a      	add	sp, #40	; 0x28
 8003f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003f14:	2001      	movs	r0, #1
 8003f16:	e7fa      	b.n	8003f0e <HAL_PCD_Init+0xf0>

08003f18 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8003f18:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003f1c:	2b01      	cmp	r3, #1
{
 8003f1e:	b510      	push	{r4, lr}
 8003f20:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003f22:	d00c      	beq.n	8003f3e <HAL_PCD_Start+0x26>
 8003f24:	2301      	movs	r3, #1
 8003f26:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8003f2a:	6800      	ldr	r0, [r0, #0]
 8003f2c:	f002 fbd8 	bl	80066e0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003f30:	6820      	ldr	r0, [r4, #0]
 8003f32:	f002 f8f0 	bl	8006116 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003f36:	2000      	movs	r0, #0
 8003f38:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 8003f3c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003f3e:	2002      	movs	r0, #2
 8003f40:	e7fc      	b.n	8003f3c <HAL_PCD_Start+0x24>
	...

08003f44 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f48:	f8d0 b000 	ldr.w	fp, [r0]
{
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	4604      	mov	r4, r0
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f50:	4658      	mov	r0, fp
  uint32_t gSNPSiD = *(uint32_t *) TempReg;
 8003f52:	f8db 9040 	ldr.w	r9, [fp, #64]	; 0x40
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f56:	f002 fc0a 	bl	800676e <USB_GetMode>
 8003f5a:	9000      	str	r0, [sp, #0]
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	f040 8151 	bne.w	8004204 <HAL_PCD_IRQHandler+0x2c0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f62:	6820      	ldr	r0, [r4, #0]
 8003f64:	f002 fbd4 	bl	8006710 <USB_ReadInterrupts>
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	f000 814b 	beq.w	8004204 <HAL_PCD_IRQHandler+0x2c0>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f6e:	6820      	ldr	r0, [r4, #0]
 8003f70:	f002 fbce 	bl	8006710 <USB_ReadInterrupts>
 8003f74:	0782      	lsls	r2, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f76:	bf48      	it	mi
 8003f78:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f7a:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f7c:	bf42      	ittt	mi
 8003f7e:	6953      	ldrmi	r3, [r2, #20]
 8003f80:	f003 0302 	andmi.w	r3, r3, #2
 8003f84:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f86:	f002 fbc3 	bl	8006710 <USB_ReadInterrupts>
 8003f8a:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8003f8e:	d00b      	beq.n	8003fa8 <HAL_PCD_IRQHandler+0x64>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f90:	6820      	ldr	r0, [r4, #0]
            }
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
          {
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f92:	f8df a40c 	ldr.w	sl, [pc, #1036]	; 80043a0 <HAL_PCD_IRQHandler+0x45c>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f96:	f002 fbbf 	bl	8006718 <USB_ReadDevAllOutEpInterrupt>
      epnum = 0U;
 8003f9a:	2500      	movs	r5, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f9c:	4607      	mov	r7, r0
 8003f9e:	f50b 6630 	add.w	r6, fp, #2816	; 0xb00
      while (ep_intr != 0U)
 8003fa2:	2f00      	cmp	r7, #0
 8003fa4:	f040 8131 	bne.w	800420a <HAL_PCD_IRQHandler+0x2c6>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003fa8:	6820      	ldr	r0, [r4, #0]
 8003faa:	f002 fbb1 	bl	8006710 <USB_ReadInterrupts>
 8003fae:	0340      	lsls	r0, r0, #13
 8003fb0:	d50b      	bpl.n	8003fca <HAL_PCD_IRQHandler+0x86>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003fb2:	6820      	ldr	r0, [r4, #0]
 8003fb4:	f002 fbb8 	bl	8006728 <USB_ReadDevAllInEpInterrupt>
 8003fb8:	4626      	mov	r6, r4
 8003fba:	4681      	mov	r9, r0

      epnum = 0U;
 8003fbc:	2500      	movs	r5, #0
 8003fbe:	f50b 6810 	add.w	r8, fp, #2304	; 0x900

      while (ep_intr != 0U)
 8003fc2:	f1b9 0f00 	cmp.w	r9, #0
 8003fc6:	f040 8161 	bne.w	800428c <HAL_PCD_IRQHandler+0x348>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003fca:	6820      	ldr	r0, [r4, #0]
 8003fcc:	f002 fba0 	bl	8006710 <USB_ReadInterrupts>
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	da15      	bge.n	8004000 <HAL_PCD_IRQHandler+0xbc>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fd4:	f8db 3804 	ldr.w	r3, [fp, #2052]	; 0x804
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
 8003fdc:	f8cb 3804 	str.w	r3, [fp, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8003fe0:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	f040 81cf 	bne.w	8004388 <HAL_PCD_IRQHandler+0x444>
      {
        hpcd->LPM_State = LPM_L0;
 8003fea:	2100      	movs	r1, #0
 8003fec:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f000 fbd7 	bl	80047a4 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ff6:	6822      	ldr	r2, [r4, #0]
 8003ff8:	6953      	ldr	r3, [r2, #20]
 8003ffa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ffe:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004000:	6820      	ldr	r0, [r4, #0]
 8004002:	f002 fb85 	bl	8006710 <USB_ReadInterrupts>
 8004006:	0503      	lsls	r3, r0, #20
 8004008:	d50b      	bpl.n	8004022 <HAL_PCD_IRQHandler+0xde>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800400a:	f8db 3808 	ldr.w	r3, [fp, #2056]	; 0x808
 800400e:	07df      	lsls	r7, r3, #31
 8004010:	d502      	bpl.n	8004018 <HAL_PCD_IRQHandler+0xd4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004012:	4620      	mov	r0, r4
 8004014:	f7fd fb1a 	bl	800164c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004018:	6822      	ldr	r2, [r4, #0]
 800401a:	6953      	ldr	r3, [r2, #20]
 800401c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004020:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004022:	6820      	ldr	r0, [r4, #0]
 8004024:	f002 fb74 	bl	8006710 <USB_ReadInterrupts>
 8004028:	0106      	lsls	r6, r0, #4
 800402a:	d514      	bpl.n	8004056 <HAL_PCD_IRQHandler+0x112>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004034:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004036:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 800403a:	2a00      	cmp	r2, #0
 800403c:	f040 81a8 	bne.w	8004390 <HAL_PCD_IRQHandler+0x44c>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8004042:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004044:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8004048:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800404c:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004050:	4620      	mov	r0, r4
 8004052:	f000 fba7 	bl	80047a4 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004056:	6820      	ldr	r0, [r4, #0]
 8004058:	f002 fb5a 	bl	8006710 <USB_ReadInterrupts>
 800405c:	04c0      	lsls	r0, r0, #19
 800405e:	d534      	bpl.n	80040ca <HAL_PCD_IRQHandler+0x186>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004060:	f50b 6600 	add.w	r6, fp, #2048	; 0x800
 8004064:	6873      	ldr	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004066:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	6073      	str	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800406e:	2110      	movs	r1, #16
 8004070:	f002 f874 	bl	800615c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004074:	6860      	ldr	r0, [r4, #4]
 8004076:	f50b 6310 	add.w	r3, fp, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800407a:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800407e:	9a00      	ldr	r2, [sp, #0]
 8004080:	4290      	cmp	r0, r2
 8004082:	f040 818f 	bne.w	80043a4 <HAL_PCD_IRQHandler+0x460>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004086:	69f3      	ldr	r3, [r6, #28]
 8004088:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800408c:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800408e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8199 	beq.w	80043c8 <HAL_PCD_IRQHandler+0x484>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8004096:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 800409a:	f043 030b 	orr.w	r3, r3, #11
 800409e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80040a2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80040a4:	f043 030b 	orr.w	r3, r3, #11
 80040a8:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040aa:	f8db 3800 	ldr.w	r3, [fp, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80040ae:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040b4:	f8cb 3800 	str.w	r3, [fp, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80040b8:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80040bc:	f002 fb76 	bl	80067ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040c0:	6822      	ldr	r2, [r4, #0]
 80040c2:	6953      	ldr	r3, [r2, #20]
 80040c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040c8:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040ca:	6820      	ldr	r0, [r4, #0]
 80040cc:	f002 fb20 	bl	8006710 <USB_ReadInterrupts>
 80040d0:	0481      	lsls	r1, r0, #18
 80040d2:	d520      	bpl.n	8004116 <HAL_PCD_IRQHandler+0x1d2>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040d4:	6820      	ldr	r0, [r4, #0]
 80040d6:	f002 fb4e 	bl	8006776 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040da:	6822      	ldr	r2, [r4, #0]
 80040dc:	68d3      	ldr	r3, [r2, #12]
 80040de:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80040e2:	60d3      	str	r3, [r2, #12]
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 80040e4:	2303      	movs	r3, #3
 80040e6:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE;
 80040e8:	2340      	movs	r3, #64	; 0x40
 80040ea:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 80040ec:	f000 feca 	bl	8004e84 <HAL_RCC_GetHCLKFreq>

        if ((hclk >= 14200000U) && (hclk < 15000000U))
 80040f0:	4ba9      	ldr	r3, [pc, #676]	; (8004398 <HAL_PCD_IRQHandler+0x454>)
 80040f2:	4aaa      	ldr	r2, [pc, #680]	; (800439c <HAL_PCD_IRQHandler+0x458>)
 80040f4:	4403      	add	r3, r0
 80040f6:	4293      	cmp	r3, r2
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	f200 816e 	bhi.w	80043da <HAL_PCD_IRQHandler+0x496>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10) & USB_OTG_GUSBCFG_TRDT);
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 8004104:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004106:	4620      	mov	r0, r4
 8004108:	f7fd fa93 	bl	8001632 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800410c:	6822      	ldr	r2, [r4, #0]
 800410e:	6953      	ldr	r3, [r2, #20]
 8004110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004114:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004116:	6820      	ldr	r0, [r4, #0]
 8004118:	f002 fafa 	bl	8006710 <USB_ReadInterrupts>
 800411c:	06c3      	lsls	r3, r0, #27
 800411e:	d52b      	bpl.n	8004178 <HAL_PCD_IRQHandler+0x234>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004120:	6822      	ldr	r2, [r4, #0]
 8004122:	6993      	ldr	r3, [r2, #24]
 8004124:	f023 0310 	bic.w	r3, r3, #16
 8004128:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 800412a:	f8db 6020 	ldr.w	r6, [fp, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800412e:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8004132:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004134:	f006 080f 	and.w	r8, r6, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004138:	f040 819f 	bne.w	800447a <HAL_PCD_IRQHandler+0x536>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800413c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004140:	421e      	tst	r6, r3
 8004142:	d014      	beq.n	800416e <HAL_PCD_IRQHandler+0x22a>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004144:	271c      	movs	r7, #28
 8004146:	fb07 4708 	mla	r7, r7, r8, r4
 800414a:	f3c6 160a 	ubfx	r6, r6, #4, #11
 800414e:	4632      	mov	r2, r6
 8004150:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8004154:	4658      	mov	r0, fp
 8004156:	f002 fa51 	bl	80065fc <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800415a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800415e:	4433      	add	r3, r6
 8004160:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004164:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004168:	441e      	add	r6, r3
 800416a:	f8c7 6214 	str.w	r6, [r7, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800416e:	6822      	ldr	r2, [r4, #0]
 8004170:	6993      	ldr	r3, [r2, #24]
 8004172:	f043 0310 	orr.w	r3, r3, #16
 8004176:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004178:	6820      	ldr	r0, [r4, #0]
 800417a:	f002 fac9 	bl	8006710 <USB_ReadInterrupts>
 800417e:	0707      	lsls	r7, r0, #28
 8004180:	d507      	bpl.n	8004192 <HAL_PCD_IRQHandler+0x24e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004182:	4620      	mov	r0, r4
 8004184:	f7fd fa51 	bl	800162a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004188:	6822      	ldr	r2, [r4, #0]
 800418a:	6953      	ldr	r3, [r2, #20]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004192:	6820      	ldr	r0, [r4, #0]
 8004194:	f002 fabc 	bl	8006710 <USB_ReadInterrupts>
 8004198:	02c6      	lsls	r6, r0, #11
 800419a:	d508      	bpl.n	80041ae <HAL_PCD_IRQHandler+0x26a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800419c:	b2e9      	uxtb	r1, r5
 800419e:	4620      	mov	r0, r4
 80041a0:	f7fd fa60 	bl	8001664 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80041a4:	6822      	ldr	r2, [r4, #0]
 80041a6:	6953      	ldr	r3, [r2, #20]
 80041a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ac:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041ae:	6820      	ldr	r0, [r4, #0]
 80041b0:	f002 faae 	bl	8006710 <USB_ReadInterrupts>
 80041b4:	0280      	lsls	r0, r0, #10
 80041b6:	d508      	bpl.n	80041ca <HAL_PCD_IRQHandler+0x286>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80041b8:	b2e9      	uxtb	r1, r5
 80041ba:	4620      	mov	r0, r4
 80041bc:	f7fd fa4e 	bl	800165c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041c0:	6822      	ldr	r2, [r4, #0]
 80041c2:	6953      	ldr	r3, [r2, #20]
 80041c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c8:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80041ca:	6820      	ldr	r0, [r4, #0]
 80041cc:	f002 faa0 	bl	8006710 <USB_ReadInterrupts>
 80041d0:	0041      	lsls	r1, r0, #1
 80041d2:	d507      	bpl.n	80041e4 <HAL_PCD_IRQHandler+0x2a0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7fd fa49 	bl	800166c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041da:	6822      	ldr	r2, [r4, #0]
 80041dc:	6953      	ldr	r3, [r2, #20]
 80041de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041e2:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041e4:	6820      	ldr	r0, [r4, #0]
 80041e6:	f002 fa93 	bl	8006710 <USB_ReadInterrupts>
 80041ea:	0742      	lsls	r2, r0, #29
 80041ec:	d50a      	bpl.n	8004204 <HAL_PCD_IRQHandler+0x2c0>
    {
      temp = hpcd->Instance->GOTGINT;
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041f2:	076b      	lsls	r3, r5, #29
 80041f4:	d502      	bpl.n	80041fc <HAL_PCD_IRQHandler+0x2b8>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041f6:	4620      	mov	r0, r4
 80041f8:	f7fd fa3c 	bl	8001674 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80041fc:	6822      	ldr	r2, [r4, #0]
 80041fe:	6853      	ldr	r3, [r2, #4]
 8004200:	432b      	orrs	r3, r5
 8004202:	6053      	str	r3, [r2, #4]
    }
  }
}
 8004204:	b005      	add	sp, #20
 8004206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 800420a:	07fb      	lsls	r3, r7, #31
 800420c:	d531      	bpl.n	8004272 <HAL_PCD_IRQHandler+0x32e>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800420e:	b2eb      	uxtb	r3, r5
 8004210:	4619      	mov	r1, r3
 8004212:	6820      	ldr	r0, [r4, #0]
 8004214:	9301      	str	r3, [sp, #4]
 8004216:	f002 fa8f 	bl	8006738 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800421a:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800421e:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004220:	d00c      	beq.n	800423c <HAL_PCD_IRQHandler+0x2f8>
 8004222:	eb06 1245 	add.w	r2, r6, r5, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004226:	2101      	movs	r1, #1
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004228:	45d1      	cmp	r9, sl
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800422a:	6091      	str	r1, [r2, #8]
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800422c:	9b01      	ldr	r3, [sp, #4]
 800422e:	d128      	bne.n	8004282 <HAL_PCD_IRQHandler+0x33e>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8004230:	68b1      	ldr	r1, [r6, #8]
 8004232:	0408      	lsls	r0, r1, #16
 8004234:	d520      	bpl.n	8004278 <HAL_PCD_IRQHandler+0x334>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8004236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800423a:	6093      	str	r3, [r2, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800423c:	f018 0f08 	tst.w	r8, #8
 8004240:	d010      	beq.n	8004264 <HAL_PCD_IRQHandler+0x320>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004242:	45d1      	cmp	r9, sl
 8004244:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8004248:	d105      	bne.n	8004256 <HAL_PCD_IRQHandler+0x312>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 800424a:	68b2      	ldr	r2, [r6, #8]
 800424c:	0412      	lsls	r2, r2, #16
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 800424e:	bf44      	itt	mi
 8004250:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 8004254:	609a      	strmi	r2, [r3, #8]
            HAL_PCD_SetupStageCallback(hpcd);
 8004256:	4620      	mov	r0, r4
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	f7fd f9cf 	bl	80015fc <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800425e:	9b01      	ldr	r3, [sp, #4]
 8004260:	2208      	movs	r2, #8
 8004262:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004264:	f018 0f10 	tst.w	r8, #16
 8004268:	bf1e      	ittt	ne
 800426a:	eb06 1345 	addne.w	r3, r6, r5, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800426e:	2210      	movne	r2, #16
 8004270:	609a      	strne	r2, [r3, #8]
        epnum++;
 8004272:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8004274:	087f      	lsrs	r7, r7, #1
 8004276:	e694      	b.n	8003fa2 <HAL_PCD_IRQHandler+0x5e>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 5)) != 0U)
 8004278:	68b1      	ldr	r1, [r6, #8]
 800427a:	0689      	lsls	r1, r1, #26
                  CLEAR_OUT_EP_INTR(epnum, (1U << 5));
 800427c:	bf44      	itt	mi
 800427e:	2120      	movmi	r1, #32
 8004280:	6091      	strmi	r1, [r2, #8]
              HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004282:	4619      	mov	r1, r3
 8004284:	4620      	mov	r0, r4
 8004286:	f7fd f9bf 	bl	8001608 <HAL_PCD_DataOutStageCallback>
 800428a:	e7d7      	b.n	800423c <HAL_PCD_IRQHandler+0x2f8>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800428c:	f019 0f01 	tst.w	r9, #1
 8004290:	d05c      	beq.n	800434c <HAL_PCD_IRQHandler+0x408>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004292:	fa5f fa85 	uxtb.w	sl, r5
 8004296:	4651      	mov	r1, sl
 8004298:	6820      	ldr	r0, [r4, #0]
 800429a:	f002 fa56 	bl	800674a <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800429e:	07c1      	lsls	r1, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042a0:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80042a2:	d511      	bpl.n	80042c8 <HAL_PCD_IRQHandler+0x384>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042a4:	f8db 3834 	ldr.w	r3, [fp, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 80042a8:	2001      	movs	r0, #1
 80042aa:	f005 020f 	and.w	r2, r5, #15
 80042ae:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042b2:	ea23 0302 	bic.w	r3, r3, r2
 80042b6:	f8cb 3834 	str.w	r3, [fp, #2100]	; 0x834
 80042ba:	eb08 1345 	add.w	r3, r8, r5, lsl #5
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80042be:	4651      	mov	r1, sl
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80042c0:	6098      	str	r0, [r3, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80042c2:	4620      	mov	r0, r4
 80042c4:	f7fd f9a9 	bl	800161a <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80042c8:	073a      	lsls	r2, r7, #28
 80042ca:	bf42      	ittt	mi
 80042cc:	eb08 1345 	addmi.w	r3, r8, r5, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80042d0:	2208      	movmi	r2, #8
 80042d2:	609a      	strmi	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80042d4:	06fb      	lsls	r3, r7, #27
 80042d6:	bf42      	ittt	mi
 80042d8:	eb08 1345 	addmi.w	r3, r8, r5, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80042dc:	2210      	movmi	r2, #16
 80042de:	609a      	strmi	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80042e0:	0678      	lsls	r0, r7, #25
 80042e2:	bf42      	ittt	mi
 80042e4:	eb08 1345 	addmi.w	r3, r8, r5, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80042e8:	2240      	movmi	r2, #64	; 0x40
 80042ea:	609a      	strmi	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80042ec:	07b9      	lsls	r1, r7, #30
 80042ee:	bf42      	ittt	mi
 80042f0:	eb08 1345 	addmi.w	r3, r8, r5, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80042f4:	2202      	movmi	r2, #2
 80042f6:	609a      	strmi	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80042f8:	063a      	lsls	r2, r7, #24
 80042fa:	d527      	bpl.n	800434c <HAL_PCD_IRQHandler+0x408>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80042fc:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
 8004300:	429a      	cmp	r2, r3
 8004302:	d823      	bhi.n	800434c <HAL_PCD_IRQHandler+0x408>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8004304:	1a9b      	subs	r3, r3, r2
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8004306:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8004308:	6821      	ldr	r1, [r4, #0]
 800430a:	9101      	str	r1, [sp, #4]
 800430c:	4293      	cmp	r3, r2
 800430e:	bf28      	it	cs
 8004310:	4613      	movcs	r3, r2
 8004312:	3303      	adds	r3, #3
 8004314:	089b      	lsrs	r3, r3, #2
 8004316:	9302      	str	r3, [sp, #8]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8004318:	f501 6310 	add.w	r3, r1, #2304	; 0x900
 800431c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8004320:	9303      	str	r3, [sp, #12]
 8004322:	9b03      	ldr	r3, [sp, #12]
 8004324:	9902      	ldr	r1, [sp, #8]
 8004326:	699a      	ldr	r2, [r3, #24]
 8004328:	b292      	uxth	r2, r2
 800432a:	428a      	cmp	r2, r1
 800432c:	e9d6 7314 	ldrd	r7, r3, [r6, #80]	; 0x50
 8004330:	d811      	bhi.n	8004356 <HAL_PCD_IRQHandler+0x412>

    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004332:	429f      	cmp	r7, r3
 8004334:	d80a      	bhi.n	800434c <HAL_PCD_IRQHandler+0x408>
  {
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004336:	9b01      	ldr	r3, [sp, #4]
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8004338:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800433a:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 800433e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8004342:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004344:	ea23 0302 	bic.w	r3, r3, r2
 8004348:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        epnum++;
 800434c:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 800434e:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8004352:	361c      	adds	r6, #28
 8004354:	e635      	b.n	8003fc2 <HAL_PCD_IRQHandler+0x7e>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8004356:	429f      	cmp	r7, r3
 8004358:	d9ed      	bls.n	8004336 <HAL_PCD_IRQHandler+0x3f2>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800435a:	2f00      	cmp	r7, #0
 800435c:	d0eb      	beq.n	8004336 <HAL_PCD_IRQHandler+0x3f2>
    len = ep->xfer_len - ep->xfer_count;
 800435e:	1aff      	subs	r7, r7, r3
 8004360:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004362:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8004364:	9801      	ldr	r0, [sp, #4]
 8004366:	429f      	cmp	r7, r3
 8004368:	bf28      	it	cs
 800436a:	461f      	movcs	r7, r3
    len32b = (len + 3U) / 4U;
 800436c:	1cfb      	adds	r3, r7, #3
 800436e:	089b      	lsrs	r3, r3, #2
 8004370:	9302      	str	r3, [sp, #8]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004372:	4652      	mov	r2, sl
 8004374:	b2bb      	uxth	r3, r7
 8004376:	f002 f885 	bl	8006484 <USB_WritePacket>
    ep->xfer_buff  += len;
 800437a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800437c:	443b      	add	r3, r7
 800437e:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8004380:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8004382:	441f      	add	r7, r3
 8004384:	6577      	str	r7, [r6, #84]	; 0x54
 8004386:	e7cc      	b.n	8004322 <HAL_PCD_IRQHandler+0x3de>
        HAL_PCD_ResumeCallback(hpcd);
 8004388:	4620      	mov	r0, r4
 800438a:	f7fd f963 	bl	8001654 <HAL_PCD_ResumeCallback>
 800438e:	e632      	b.n	8003ff6 <HAL_PCD_IRQHandler+0xb2>
        HAL_PCD_SuspendCallback(hpcd);
 8004390:	4620      	mov	r0, r4
 8004392:	f7fd f95b 	bl	800164c <HAL_PCD_SuspendCallback>
 8004396:	e65e      	b.n	8004056 <HAL_PCD_IRQHandler+0x112>
 8004398:	ff275340 	.word	0xff275340
 800439c:	000c34ff 	.word	0x000c34ff
 80043a0:	4f54310a 	.word	0x4f54310a
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80043a4:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80043ac:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80043ae:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80043b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80043b6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80043ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043be:	9a00      	ldr	r2, [sp, #0]
 80043c0:	3201      	adds	r2, #1
 80043c2:	9200      	str	r2, [sp, #0]
 80043c4:	3320      	adds	r3, #32
 80043c6:	e65a      	b.n	800407e <HAL_PCD_IRQHandler+0x13a>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80043c8:	6973      	ldr	r3, [r6, #20]
 80043ca:	f043 030b 	orr.w	r3, r3, #11
 80043ce:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80043d0:	6933      	ldr	r3, [r6, #16]
 80043d2:	f043 030b 	orr.w	r3, r3, #11
 80043d6:	6133      	str	r3, [r6, #16]
 80043d8:	e667      	b.n	80040aa <HAL_PCD_IRQHandler+0x166>
        else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80043da:	4a2f      	ldr	r2, [pc, #188]	; (8004498 <HAL_PCD_IRQHandler+0x554>)
 80043dc:	492f      	ldr	r1, [pc, #188]	; (800449c <HAL_PCD_IRQHandler+0x558>)
 80043de:	4402      	add	r2, r0
 80043e0:	428a      	cmp	r2, r1
 80043e2:	d803      	bhi.n	80043ec <HAL_PCD_IRQHandler+0x4a8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10) & USB_OTG_GUSBCFG_TRDT);
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80043ea:	e68b      	b.n	8004104 <HAL_PCD_IRQHandler+0x1c0>
        else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80043ec:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 80043f0:	492b      	ldr	r1, [pc, #172]	; (80044a0 <HAL_PCD_IRQHandler+0x55c>)
 80043f2:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 80043f6:	428a      	cmp	r2, r1
 80043f8:	d803      	bhi.n	8004402 <HAL_PCD_IRQHandler+0x4be>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10) & USB_OTG_GUSBCFG_TRDT);
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8004400:	e680      	b.n	8004104 <HAL_PCD_IRQHandler+0x1c0>
        else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004402:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8004406:	4927      	ldr	r1, [pc, #156]	; (80044a4 <HAL_PCD_IRQHandler+0x560>)
 8004408:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 800440c:	428a      	cmp	r2, r1
 800440e:	d803      	bhi.n	8004418 <HAL_PCD_IRQHandler+0x4d4>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10) & USB_OTG_GUSBCFG_TRDT);
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004416:	e675      	b.n	8004104 <HAL_PCD_IRQHandler+0x1c0>
        else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004418:	4a23      	ldr	r2, [pc, #140]	; (80044a8 <HAL_PCD_IRQHandler+0x564>)
 800441a:	4924      	ldr	r1, [pc, #144]	; (80044ac <HAL_PCD_IRQHandler+0x568>)
 800441c:	4402      	add	r2, r0
 800441e:	428a      	cmp	r2, r1
 8004420:	d803      	bhi.n	800442a <HAL_PCD_IRQHandler+0x4e6>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10) & USB_OTG_GUSBCFG_TRDT);
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8004428:	e66c      	b.n	8004104 <HAL_PCD_IRQHandler+0x1c0>
        else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800442a:	4a21      	ldr	r2, [pc, #132]	; (80044b0 <HAL_PCD_IRQHandler+0x56c>)
 800442c:	4921      	ldr	r1, [pc, #132]	; (80044b4 <HAL_PCD_IRQHandler+0x570>)
 800442e:	4402      	add	r2, r0
 8004430:	428a      	cmp	r2, r1
 8004432:	d803      	bhi.n	800443c <HAL_PCD_IRQHandler+0x4f8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10) & USB_OTG_GUSBCFG_TRDT);
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 800443a:	e663      	b.n	8004104 <HAL_PCD_IRQHandler+0x1c0>
        else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800443c:	4a1e      	ldr	r2, [pc, #120]	; (80044b8 <HAL_PCD_IRQHandler+0x574>)
 800443e:	491f      	ldr	r1, [pc, #124]	; (80044bc <HAL_PCD_IRQHandler+0x578>)
 8004440:	4402      	add	r2, r0
 8004442:	428a      	cmp	r2, r1
 8004444:	d803      	bhi.n	800444e <HAL_PCD_IRQHandler+0x50a>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10) & USB_OTG_GUSBCFG_TRDT);
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800444c:	e65a      	b.n	8004104 <HAL_PCD_IRQHandler+0x1c0>
        else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800444e:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8004452:	491b      	ldr	r1, [pc, #108]	; (80044c0 <HAL_PCD_IRQHandler+0x57c>)
 8004454:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8004458:	428a      	cmp	r2, r1
 800445a:	d803      	bhi.n	8004464 <HAL_PCD_IRQHandler+0x520>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10) & USB_OTG_GUSBCFG_TRDT);
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004462:	e64f      	b.n	8004104 <HAL_PCD_IRQHandler+0x1c0>
        else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004464:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <HAL_PCD_IRQHandler+0x580>)
 8004466:	4918      	ldr	r1, [pc, #96]	; (80044c8 <HAL_PCD_IRQHandler+0x584>)
 8004468:	4402      	add	r2, r0
 800446a:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10) & USB_OTG_GUSBCFG_TRDT);
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	bf94      	ite	ls
 8004470:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 8004474:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8004478:	e644      	b.n	8004104 <HAL_PCD_IRQHandler+0x1c0>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800447a:	2b06      	cmp	r3, #6
 800447c:	f47f ae77 	bne.w	800416e <HAL_PCD_IRQHandler+0x22a>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004480:	2208      	movs	r2, #8
 8004482:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8004486:	4658      	mov	r0, fp
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004488:	271c      	movs	r7, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800448a:	f002 f8b7 	bl	80065fc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800448e:	fb07 4708 	mla	r7, r7, r8, r4
 8004492:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8004496:	e665      	b.n	8004164 <HAL_PCD_IRQHandler+0x220>
 8004498:	ff1b1e40 	.word	0xff1b1e40
 800449c:	000f423f 	.word	0x000f423f
 80044a0:	00124f7f 	.word	0x00124f7f
 80044a4:	0013d61f 	.word	0x0013d61f
 80044a8:	fee5b660 	.word	0xfee5b660
 80044ac:	0016e35f 	.word	0x0016e35f
 80044b0:	feced300 	.word	0xfeced300
 80044b4:	001b773f 	.word	0x001b773f
 80044b8:	feb35bc0 	.word	0xfeb35bc0
 80044bc:	002191bf 	.word	0x002191bf
 80044c0:	0038751f 	.word	0x0038751f
 80044c4:	fe5954e0 	.word	0xfe5954e0
 80044c8:	00419cdf 	.word	0x00419cdf

080044cc <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80044cc:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80044d0:	2a01      	cmp	r2, #1
{
 80044d2:	b510      	push	{r4, lr}
 80044d4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80044d6:	d00b      	beq.n	80044f0 <HAL_PCD_SetAddress+0x24>
 80044d8:	2201      	movs	r2, #1
 80044da:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80044de:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80044e2:	6800      	ldr	r0, [r0, #0]
 80044e4:	f002 f8ec 	bl	80066c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80044e8:	2000      	movs	r0, #0
 80044ea:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80044ee:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80044f0:	2002      	movs	r0, #2
 80044f2:	e7fc      	b.n	80044ee <HAL_PCD_SetAddress+0x22>

080044f4 <HAL_PCD_EP_Open>:
{
 80044f4:	b570      	push	{r4, r5, r6, lr}
 80044f6:	f001 050f 	and.w	r5, r1, #15
 80044fa:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80044fc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004500:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 8004504:	ea4f 0080 	mov.w	r0, r0, lsl #2
 8004508:	f04f 061c 	mov.w	r6, #28
 800450c:	d01f      	beq.n	800454e <HAL_PCD_EP_Open+0x5a>
    ep->is_in = 1U;
 800450e:	fb06 4605 	mla	r6, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004512:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 8004516:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004518:	4421      	add	r1, r4
    ep->is_in = 1U;
 800451a:	f886 003d 	strb.w	r0, [r6, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 800451e:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8004520:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & 0xFU;
 8004522:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 8004524:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8004526:	b102      	cbz	r2, 800452a <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8004528:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800452a:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800452c:	bf04      	itt	eq
 800452e:	2300      	moveq	r3, #0
 8004530:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8004532:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8004536:	2b01      	cmp	r3, #1
 8004538:	d012      	beq.n	8004560 <HAL_PCD_EP_Open+0x6c>
 800453a:	2301      	movs	r3, #1
 800453c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004540:	6820      	ldr	r0, [r4, #0]
 8004542:	f001 fed1 	bl	80062e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004546:	2000      	movs	r0, #0
 8004548:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800454c:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 800454e:	fb06 4605 	mla	r6, r6, r5, r4
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8004552:	f500 71fe 	add.w	r1, r0, #508	; 0x1fc
    ep->is_in = 0U;
 8004556:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8004558:	4421      	add	r1, r4
    ep->is_in = 0U;
 800455a:	f886 01fd 	strb.w	r0, [r6, #509]	; 0x1fd
 800455e:	e7de      	b.n	800451e <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8004560:	2002      	movs	r0, #2
 8004562:	e7f3      	b.n	800454c <HAL_PCD_EP_Open+0x58>

08004564 <HAL_PCD_EP_Close>:
{
 8004564:	b510      	push	{r4, lr}
 8004566:	4604      	mov	r4, r0
 8004568:	f001 000f 	and.w	r0, r1, #15
 800456c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8004570:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004574:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004578:	f04f 021c 	mov.w	r2, #28
 800457c:	d016      	beq.n	80045ac <HAL_PCD_EP_Close+0x48>
    ep->is_in = 1U;
 800457e:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004582:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8004586:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004588:	4421      	add	r1, r4
    ep->is_in = 1U;
 800458a:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->num   = ep_addr & 0xFU;
 800458e:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8004590:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8004594:	2b01      	cmp	r3, #1
 8004596:	d012      	beq.n	80045be <HAL_PCD_EP_Close+0x5a>
 8004598:	2301      	movs	r3, #1
 800459a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800459e:	6820      	ldr	r0, [r4, #0]
 80045a0:	f001 fee0 	bl	8006364 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045a4:	2000      	movs	r0, #0
 80045a6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80045aa:	bd10      	pop	{r4, pc}
    ep->is_in = 0U;
 80045ac:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80045b0:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80045b4:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80045b6:	4421      	add	r1, r4
    ep->is_in = 0U;
 80045b8:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 80045bc:	e7e7      	b.n	800458e <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 80045be:	2002      	movs	r0, #2
 80045c0:	e7f3      	b.n	80045aa <HAL_PCD_EP_Close+0x46>

080045c2 <HAL_PCD_EP_Receive>:
{
 80045c2:	b538      	push	{r3, r4, r5, lr}
 80045c4:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80045c8:	241c      	movs	r4, #28
 80045ca:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80045ce:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80045d2:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 80045d6:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 80045da:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 80045dc:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 80045e0:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80045e4:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & 0xFU;
 80045e8:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
 80045ec:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 80045ee:	b91d      	cbnz	r5, 80045f8 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80045f0:	f001 fee8 	bl	80063c4 <USB_EP0StartXfer>
}
 80045f4:	2000      	movs	r0, #0
 80045f6:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045f8:	f001 ff54 	bl	80064a4 <USB_EPStartXfer>
 80045fc:	e7fa      	b.n	80045f4 <HAL_PCD_EP_Receive+0x32>

080045fe <HAL_PCD_EP_GetRxCount>:
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 80045fe:	231c      	movs	r3, #28
 8004600:	f001 010f 	and.w	r1, r1, #15
 8004604:	fb03 0101 	mla	r1, r3, r1, r0
}
 8004608:	f8b1 0214 	ldrh.w	r0, [r1, #532]	; 0x214
 800460c:	4770      	bx	lr

0800460e <HAL_PCD_EP_Transmit>:
{
 800460e:	b538      	push	{r3, r4, r5, lr}
 8004610:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004614:	241c      	movs	r4, #28
 8004616:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800461a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800461e:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8004620:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8004626:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8004628:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 800462a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & 0xFU;
 800462e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 8004632:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8004634:	b91d      	cbnz	r5, 800463e <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004636:	f001 fec5 	bl	80063c4 <USB_EP0StartXfer>
}
 800463a:	2000      	movs	r0, #0
 800463c:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800463e:	f001 ff31 	bl	80064a4 <USB_EPStartXfer>
 8004642:	e7fa      	b.n	800463a <HAL_PCD_EP_Transmit+0x2c>

08004644 <HAL_PCD_EP_SetStall>:
{
 8004644:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8004646:	6843      	ldr	r3, [r0, #4]
 8004648:	f001 050f 	and.w	r5, r1, #15
 800464c:	429d      	cmp	r5, r3
{
 800464e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8004650:	d82d      	bhi.n	80046ae <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8004652:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004656:	f04f 021c 	mov.w	r2, #28
 800465a:	d01e      	beq.n	800469a <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 800465c:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004660:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8004664:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004666:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8004668:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 800466c:	2201      	movs	r2, #1
 800466e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8004670:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8004672:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8004676:	4291      	cmp	r1, r2
 8004678:	d01b      	beq.n	80046b2 <HAL_PCD_EP_SetStall+0x6e>
 800467a:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800467e:	4619      	mov	r1, r3
 8004680:	6820      	ldr	r0, [r4, #0]
 8004682:	f001 ffc9 	bl	8006618 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 8004686:	b925      	cbnz	r5, 8004692 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004688:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800468c:	6820      	ldr	r0, [r4, #0]
 800468e:	f002 f88d 	bl	80067ac <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8004692:	2000      	movs	r0, #0
 8004694:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8004698:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800469a:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 800469e:	fb02 0101 	mla	r1, r2, r1, r0
 80046a2:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80046a4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80046a8:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 80046ac:	e7de      	b.n	800466c <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80046ae:	2001      	movs	r0, #1
 80046b0:	e7f2      	b.n	8004698 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80046b2:	2002      	movs	r0, #2
 80046b4:	e7f0      	b.n	8004698 <HAL_PCD_EP_SetStall+0x54>

080046b6 <HAL_PCD_EP_ClrStall>:
{
 80046b6:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046b8:	6843      	ldr	r3, [r0, #4]
 80046ba:	f001 020f 	and.w	r2, r1, #15
 80046be:	429a      	cmp	r2, r3
{
 80046c0:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046c2:	d82a      	bhi.n	800471a <HAL_PCD_EP_ClrStall+0x64>
 80046c4:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 80046c8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80046cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80046d0:	f04f 001c 	mov.w	r0, #28
 80046d4:	d018      	beq.n	8004708 <HAL_PCD_EP_ClrStall+0x52>
    ep->is_in = 1U;
 80046d6:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80046da:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 80046de:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80046e0:	4421      	add	r1, r4
    ep->is_in = 1U;
 80046e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 0U;
 80046e6:	2500      	movs	r5, #0
 80046e8:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 80046ea:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80046ec:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d014      	beq.n	800471e <HAL_PCD_EP_ClrStall+0x68>
 80046f4:	2301      	movs	r3, #1
 80046f6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046fa:	6820      	ldr	r0, [r4, #0]
 80046fc:	f001 ffb7 	bl	800666e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004700:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8004704:	4628      	mov	r0, r5
}
 8004706:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8004708:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 800470c:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8004710:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8004712:	4421      	add	r1, r4
    ep->is_in = 0U;
 8004714:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 8004718:	e7e5      	b.n	80046e6 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 800471a:	2001      	movs	r0, #1
 800471c:	e7f3      	b.n	8004706 <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 800471e:	2002      	movs	r0, #2
 8004720:	e7f1      	b.n	8004706 <HAL_PCD_EP_ClrStall+0x50>

08004722 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004722:	6800      	ldr	r0, [r0, #0]
{
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004728:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if (fifo == 0U)
 800472a:	b919      	cbnz	r1, 8004734 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800472c:	4322      	orrs	r2, r4
 800472e:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8004730:	2000      	movs	r0, #0
 8004732:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004734:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8004736:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004738:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800473c:	2300      	movs	r3, #0
 800473e:	1c5e      	adds	r6, r3, #1
 8004740:	b2db      	uxtb	r3, r3
 8004742:	429d      	cmp	r5, r3
 8004744:	d805      	bhi.n	8004752 <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004746:	313f      	adds	r1, #63	; 0x3f
 8004748:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800474c:	4322      	orrs	r2, r4
 800474e:	6042      	str	r2, [r0, #4]
 8004750:	e7ee      	b.n	8004730 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004752:	3340      	adds	r3, #64	; 0x40
 8004754:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800475e:	4633      	mov	r3, r6
 8004760:	e7ed      	b.n	800473e <HAL_PCDEx_SetTxFiFo+0x1c>

08004762 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8004762:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8004764:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8004766:	6259      	str	r1, [r3, #36]	; 0x24
}
 8004768:	4770      	bx	lr

0800476a <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800476a:	6802      	ldr	r2, [r0, #0]
{
 800476c:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 800476e:	2101      	movs	r1, #1
 8004770:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004774:	2000      	movs	r0, #0
 8004776:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800477a:	6993      	ldr	r3, [r2, #24]
 800477c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004780:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004782:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004788:	f043 0303 	orr.w	r3, r3, #3
 800478c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800478e:	4770      	bx	lr

08004790 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004790:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 8004792:	2301      	movs	r3, #1
 8004794:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8004798:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800479a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800479e:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 80047a0:	2000      	movs	r0, #0
 80047a2:	4770      	bx	lr

080047a4 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80047a4:	4770      	bx	lr
	...

080047a8 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047a8:	4a02      	ldr	r2, [pc, #8]	; (80047b4 <HAL_PWR_EnableBkUpAccess+0xc>)
 80047aa:	6813      	ldr	r3, [r2, #0]
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	6013      	str	r3, [r2, #0]
}
 80047b2:	4770      	bx	lr
 80047b4:	40007000 	.word	0x40007000

080047b8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047b8:	4b02      	ldr	r3, [pc, #8]	; (80047c4 <HAL_PWREx_GetVoltageRange+0xc>)
 80047ba:	6818      	ldr	r0, [r3, #0]
#endif
}
 80047bc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40007000 	.word	0x40007000

080047c8 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80047c8:	4a02      	ldr	r2, [pc, #8]	; (80047d4 <HAL_PWREx_EnableVddUSB+0xc>)
 80047ca:	6853      	ldr	r3, [r2, #4]
 80047cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047d0:	6053      	str	r3, [r2, #4]
}
 80047d2:	4770      	bx	lr
 80047d4:	40007000 	.word	0x40007000

080047d8 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80047d8:	4a02      	ldr	r2, [pc, #8]	; (80047e4 <HAL_PWREx_EnableVddIO2+0xc>)
 80047da:	6853      	ldr	r3, [r2, #4]
 80047dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047e0:	6053      	str	r3, [r2, #4]
}
 80047e2:	4770      	bx	lr
 80047e4:	40007000 	.word	0x40007000

080047e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047ea:	4d1e      	ldr	r5, [pc, #120]	; (8004864 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80047ec:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80047ee:	00da      	lsls	r2, r3, #3
{
 80047f0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047f2:	d518      	bpl.n	8004826 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047f4:	f7ff ffe0 	bl	80047b8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047f8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80047fc:	d123      	bne.n	8004846 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80047fe:	2c80      	cmp	r4, #128	; 0x80
 8004800:	d929      	bls.n	8004856 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004802:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004804:	bf8c      	ite	hi
 8004806:	2002      	movhi	r0, #2
 8004808:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800480a:	4a17      	ldr	r2, [pc, #92]	; (8004868 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800480c:	6813      	ldr	r3, [r2, #0]
 800480e:	f023 0307 	bic.w	r3, r3, #7
 8004812:	4303      	orrs	r3, r0
 8004814:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004816:	6813      	ldr	r3, [r2, #0]
 8004818:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800481c:	1a18      	subs	r0, r3, r0
 800481e:	bf18      	it	ne
 8004820:	2001      	movne	r0, #1
 8004822:	b003      	add	sp, #12
 8004824:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004826:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482c:	65ab      	str	r3, [r5, #88]	; 0x58
 800482e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8004838:	f7ff ffbe 	bl	80047b8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800483c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800483e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004842:	65ab      	str	r3, [r5, #88]	; 0x58
 8004844:	e7d8      	b.n	80047f8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8004846:	2c80      	cmp	r4, #128	; 0x80
 8004848:	d807      	bhi.n	800485a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800484a:	d008      	beq.n	800485e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 800484c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8004850:	4258      	negs	r0, r3
 8004852:	4158      	adcs	r0, r3
 8004854:	e7d9      	b.n	800480a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004856:	2000      	movs	r0, #0
 8004858:	e7d7      	b.n	800480a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800485a:	2003      	movs	r0, #3
 800485c:	e7d5      	b.n	800480a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800485e:	2002      	movs	r0, #2
 8004860:	e7d3      	b.n	800480a <RCC_SetFlashLatencyFromMSIRange+0x22>
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
 8004868:	40022000 	.word	0x40022000

0800486c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800486c:	4b25      	ldr	r3, [pc, #148]	; (8004904 <HAL_RCC_GetSysClockFreq+0x98>)
 800486e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004870:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004872:	f012 020c 	ands.w	r2, r2, #12
 8004876:	d005      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0x18>
 8004878:	2a0c      	cmp	r2, #12
 800487a:	d115      	bne.n	80048a8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800487c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004880:	2901      	cmp	r1, #1
 8004882:	d118      	bne.n	80048b6 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004884:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8004886:	4820      	ldr	r0, [pc, #128]	; (8004908 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004888:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800488a:	bf55      	itete	pl
 800488c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004890:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004892:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004896:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800489a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800489e:	b382      	cbz	r2, 8004902 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80048a0:	2a0c      	cmp	r2, #12
 80048a2:	d009      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0x4c>
 80048a4:	2000      	movs	r0, #0
  return sysclockfreq;
 80048a6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048a8:	2a04      	cmp	r2, #4
 80048aa:	d029      	beq.n	8004900 <HAL_RCC_GetSysClockFreq+0x94>
 80048ac:	2a08      	cmp	r2, #8
 80048ae:	4817      	ldr	r0, [pc, #92]	; (800490c <HAL_RCC_GetSysClockFreq+0xa0>)
 80048b0:	bf18      	it	ne
 80048b2:	2000      	movne	r0, #0
 80048b4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048b6:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048b8:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048ba:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048bc:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048c0:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 80048c4:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048c6:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 80048ca:	d005      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0x6c>
 80048cc:	2903      	cmp	r1, #3
 80048ce:	d012      	beq.n	80048f6 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048d0:	68d9      	ldr	r1, [r3, #12]
 80048d2:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80048d6:	e003      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048d8:	68d9      	ldr	r1, [r3, #12]
 80048da:	480d      	ldr	r0, [pc, #52]	; (8004910 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048dc:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048e0:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048e2:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048e6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80048ea:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048ec:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048ee:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80048f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80048f4:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048f6:	68d9      	ldr	r1, [r3, #12]
 80048f8:	4804      	ldr	r0, [pc, #16]	; (800490c <HAL_RCC_GetSysClockFreq+0xa0>)
 80048fa:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80048fe:	e7ef      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8004900:	4803      	ldr	r0, [pc, #12]	; (8004910 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8004902:	4770      	bx	lr
 8004904:	40021000 	.word	0x40021000
 8004908:	08009060 	.word	0x08009060
 800490c:	007a1200 	.word	0x007a1200
 8004910:	00f42400 	.word	0x00f42400

08004914 <HAL_RCC_OscConfig>:
{
 8004914:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8004918:	4605      	mov	r5, r0
 800491a:	b918      	cbnz	r0, 8004924 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800491c:	2001      	movs	r0, #1
}
 800491e:	b003      	add	sp, #12
 8004920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004924:	4ca5      	ldr	r4, [pc, #660]	; (8004bbc <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004926:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004928:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800492a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800492c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800492e:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004932:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004936:	d53c      	bpl.n	80049b2 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004938:	b11e      	cbz	r6, 8004942 <HAL_RCC_OscConfig+0x2e>
 800493a:	2e0c      	cmp	r6, #12
 800493c:	d163      	bne.n	8004a06 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800493e:	2f01      	cmp	r7, #1
 8004940:	d161      	bne.n	8004a06 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	0798      	lsls	r0, r3, #30
 8004946:	d502      	bpl.n	800494e <HAL_RCC_OscConfig+0x3a>
 8004948:	69ab      	ldr	r3, [r5, #24]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0e6      	beq.n	800491c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	6a28      	ldr	r0, [r5, #32]
 8004952:	0719      	lsls	r1, r3, #28
 8004954:	bf56      	itet	pl
 8004956:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800495a:	6823      	ldrmi	r3, [r4, #0]
 800495c:	091b      	lsrpl	r3, r3, #4
 800495e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004962:	4298      	cmp	r0, r3
 8004964:	d93a      	bls.n	80049dc <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004966:	f7ff ff3f 	bl	80047e8 <RCC_SetFlashLatencyFromMSIRange>
 800496a:	2800      	cmp	r0, #0
 800496c:	d1d6      	bne.n	800491c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	f043 0308 	orr.w	r3, r3, #8
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	6a2a      	ldr	r2, [r5, #32]
 800497a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800497e:	4313      	orrs	r3, r2
 8004980:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004982:	6863      	ldr	r3, [r4, #4]
 8004984:	69ea      	ldr	r2, [r5, #28]
 8004986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800498a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800498e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004990:	f7ff ff6c 	bl	800486c <HAL_RCC_GetSysClockFreq>
 8004994:	68a3      	ldr	r3, [r4, #8]
 8004996:	4a8a      	ldr	r2, [pc, #552]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800499c:	5cd3      	ldrb	r3, [r2, r3]
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	40d8      	lsrs	r0, r3
 80049a4:	4b87      	ldr	r3, [pc, #540]	; (8004bc4 <HAL_RCC_OscConfig+0x2b0>)
 80049a6:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80049a8:	200f      	movs	r0, #15
 80049aa:	f7fe fa25 	bl	8002df8 <HAL_InitTick>
        if(status != HAL_OK)
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d1b5      	bne.n	800491e <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049b2:	682b      	ldr	r3, [r5, #0]
 80049b4:	07d8      	lsls	r0, r3, #31
 80049b6:	d45d      	bmi.n	8004a74 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049b8:	682b      	ldr	r3, [r5, #0]
 80049ba:	0799      	lsls	r1, r3, #30
 80049bc:	f100 809c 	bmi.w	8004af8 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	0718      	lsls	r0, r3, #28
 80049c4:	f100 80d0 	bmi.w	8004b68 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	0759      	lsls	r1, r3, #29
 80049cc:	f100 80fc 	bmi.w	8004bc8 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f040 8165 	bne.w	8004ca2 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 80049d8:	2000      	movs	r0, #0
 80049da:	e7a0      	b.n	800491e <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	f043 0308 	orr.w	r3, r3, #8
 80049e2:	6023      	str	r3, [r4, #0]
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049ea:	4303      	orrs	r3, r0
 80049ec:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049ee:	6863      	ldr	r3, [r4, #4]
 80049f0:	69ea      	ldr	r2, [r5, #28]
 80049f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80049fa:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049fc:	f7ff fef4 	bl	80047e8 <RCC_SetFlashLatencyFromMSIRange>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d0c5      	beq.n	8004990 <HAL_RCC_OscConfig+0x7c>
 8004a04:	e78a      	b.n	800491c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a06:	69ab      	ldr	r3, [r5, #24]
 8004a08:	b31b      	cbz	r3, 8004a52 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004a12:	f7fe fa21 	bl	8002e58 <HAL_GetTick>
 8004a16:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	079a      	lsls	r2, r3, #30
 8004a1c:	d511      	bpl.n	8004a42 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	f043 0308 	orr.w	r3, r3, #8
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	6a2a      	ldr	r2, [r5, #32]
 8004a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a32:	6863      	ldr	r3, [r4, #4]
 8004a34:	69ea      	ldr	r2, [r5, #28]
 8004a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a3e:	6063      	str	r3, [r4, #4]
 8004a40:	e7b7      	b.n	80049b2 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a42:	f7fe fa09 	bl	8002e58 <HAL_GetTick>
 8004a46:	eba0 0008 	sub.w	r0, r0, r8
 8004a4a:	2802      	cmp	r0, #2
 8004a4c:	d9e4      	bls.n	8004a18 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8004a4e:	2003      	movs	r0, #3
 8004a50:	e765      	b.n	800491e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	f023 0301 	bic.w	r3, r3, #1
 8004a58:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004a5a:	f7fe f9fd 	bl	8002e58 <HAL_GetTick>
 8004a5e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	079b      	lsls	r3, r3, #30
 8004a64:	d5a5      	bpl.n	80049b2 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a66:	f7fe f9f7 	bl	8002e58 <HAL_GetTick>
 8004a6a:	eba0 0008 	sub.w	r0, r0, r8
 8004a6e:	2802      	cmp	r0, #2
 8004a70:	d9f6      	bls.n	8004a60 <HAL_RCC_OscConfig+0x14c>
 8004a72:	e7ec      	b.n	8004a4e <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a74:	2e08      	cmp	r6, #8
 8004a76:	d003      	beq.n	8004a80 <HAL_RCC_OscConfig+0x16c>
 8004a78:	2e0c      	cmp	r6, #12
 8004a7a:	d108      	bne.n	8004a8e <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8004a7c:	2f03      	cmp	r7, #3
 8004a7e:	d106      	bne.n	8004a8e <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	039a      	lsls	r2, r3, #14
 8004a84:	d598      	bpl.n	80049b8 <HAL_RCC_OscConfig+0xa4>
 8004a86:	686b      	ldr	r3, [r5, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d195      	bne.n	80049b8 <HAL_RCC_OscConfig+0xa4>
 8004a8c:	e746      	b.n	800491c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a8e:	686b      	ldr	r3, [r5, #4]
 8004a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a94:	d110      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x1a4>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004a9e:	f7fe f9db 	bl	8002e58 <HAL_GetTick>
 8004aa2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aa4:	6823      	ldr	r3, [r4, #0]
 8004aa6:	039b      	lsls	r3, r3, #14
 8004aa8:	d486      	bmi.n	80049b8 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aaa:	f7fe f9d5 	bl	8002e58 <HAL_GetTick>
 8004aae:	eba0 0008 	sub.w	r0, r0, r8
 8004ab2:	2864      	cmp	r0, #100	; 0x64
 8004ab4:	d9f6      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x190>
 8004ab6:	e7ca      	b.n	8004a4e <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004abc:	d104      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x1b4>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	e7e6      	b.n	8004a96 <HAL_RCC_OscConfig+0x182>
 8004ac8:	6822      	ldr	r2, [r4, #0]
 8004aca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ace:	6022      	str	r2, [r4, #0]
 8004ad0:	6822      	ldr	r2, [r4, #0]
 8004ad2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ad6:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e0      	bne.n	8004a9e <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8004adc:	f7fe f9bc 	bl	8002e58 <HAL_GetTick>
 8004ae0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	0398      	lsls	r0, r3, #14
 8004ae6:	f57f af67 	bpl.w	80049b8 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aea:	f7fe f9b5 	bl	8002e58 <HAL_GetTick>
 8004aee:	eba0 0008 	sub.w	r0, r0, r8
 8004af2:	2864      	cmp	r0, #100	; 0x64
 8004af4:	d9f5      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x1ce>
 8004af6:	e7aa      	b.n	8004a4e <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004af8:	2e04      	cmp	r6, #4
 8004afa:	d003      	beq.n	8004b04 <HAL_RCC_OscConfig+0x1f0>
 8004afc:	2e0c      	cmp	r6, #12
 8004afe:	d110      	bne.n	8004b22 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8004b00:	2f02      	cmp	r7, #2
 8004b02:	d10e      	bne.n	8004b22 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	0559      	lsls	r1, r3, #21
 8004b08:	d503      	bpl.n	8004b12 <HAL_RCC_OscConfig+0x1fe>
 8004b0a:	68eb      	ldr	r3, [r5, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f43f af05 	beq.w	800491c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b12:	6863      	ldr	r3, [r4, #4]
 8004b14:	692a      	ldr	r2, [r5, #16]
 8004b16:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8004b1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b1e:	6063      	str	r3, [r4, #4]
 8004b20:	e74e      	b.n	80049c0 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b22:	68eb      	ldr	r3, [r5, #12]
 8004b24:	b17b      	cbz	r3, 8004b46 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b2c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004b2e:	f7fe f993 	bl	8002e58 <HAL_GetTick>
 8004b32:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	055a      	lsls	r2, r3, #21
 8004b38:	d4eb      	bmi.n	8004b12 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b3a:	f7fe f98d 	bl	8002e58 <HAL_GetTick>
 8004b3e:	1bc0      	subs	r0, r0, r7
 8004b40:	2802      	cmp	r0, #2
 8004b42:	d9f7      	bls.n	8004b34 <HAL_RCC_OscConfig+0x220>
 8004b44:	e783      	b.n	8004a4e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b4c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004b4e:	f7fe f983 	bl	8002e58 <HAL_GetTick>
 8004b52:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	055b      	lsls	r3, r3, #21
 8004b58:	f57f af32 	bpl.w	80049c0 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5c:	f7fe f97c 	bl	8002e58 <HAL_GetTick>
 8004b60:	1bc0      	subs	r0, r0, r7
 8004b62:	2802      	cmp	r0, #2
 8004b64:	d9f6      	bls.n	8004b54 <HAL_RCC_OscConfig+0x240>
 8004b66:	e772      	b.n	8004a4e <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b68:	696b      	ldr	r3, [r5, #20]
 8004b6a:	b19b      	cbz	r3, 8004b94 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8004b6c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004b70:	f043 0301 	orr.w	r3, r3, #1
 8004b74:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004b78:	f7fe f96e 	bl	8002e58 <HAL_GetTick>
 8004b7c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b7e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004b82:	079a      	lsls	r2, r3, #30
 8004b84:	f53f af20 	bmi.w	80049c8 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b88:	f7fe f966 	bl	8002e58 <HAL_GetTick>
 8004b8c:	1bc0      	subs	r0, r0, r7
 8004b8e:	2802      	cmp	r0, #2
 8004b90:	d9f5      	bls.n	8004b7e <HAL_RCC_OscConfig+0x26a>
 8004b92:	e75c      	b.n	8004a4e <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8004b94:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004ba0:	f7fe f95a 	bl	8002e58 <HAL_GetTick>
 8004ba4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ba6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004baa:	079b      	lsls	r3, r3, #30
 8004bac:	f57f af0c 	bpl.w	80049c8 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb0:	f7fe f952 	bl	8002e58 <HAL_GetTick>
 8004bb4:	1bc0      	subs	r0, r0, r7
 8004bb6:	2802      	cmp	r0, #2
 8004bb8:	d9f5      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x292>
 8004bba:	e748      	b.n	8004a4e <HAL_RCC_OscConfig+0x13a>
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	08009090 	.word	0x08009090
 8004bc4:	200000e8 	.word	0x200000e8
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bca:	00d8      	lsls	r0, r3, #3
 8004bcc:	d429      	bmi.n	8004c22 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	65a3      	str	r3, [r4, #88]	; 0x58
 8004bd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004be0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be4:	4f5d      	ldr	r7, [pc, #372]	; (8004d5c <HAL_RCC_OscConfig+0x448>)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	05d9      	lsls	r1, r3, #23
 8004bea:	d51d      	bpl.n	8004c28 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bec:	68ab      	ldr	r3, [r5, #8]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d12b      	bne.n	8004c4a <HAL_RCC_OscConfig+0x336>
 8004bf2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004bfe:	f7fe f92b 	bl	8002e58 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c02:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004c06:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c08:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004c0c:	079b      	lsls	r3, r3, #30
 8004c0e:	d542      	bpl.n	8004c96 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8004c10:	f1b8 0f00 	cmp.w	r8, #0
 8004c14:	f43f aedc 	beq.w	80049d0 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c20:	e6d6      	b.n	80049d0 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8004c22:	f04f 0800 	mov.w	r8, #0
 8004c26:	e7dd      	b.n	8004be4 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004c30:	f7fe f912 	bl	8002e58 <HAL_GetTick>
 8004c34:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	05da      	lsls	r2, r3, #23
 8004c3a:	d4d7      	bmi.n	8004bec <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3c:	f7fe f90c 	bl	8002e58 <HAL_GetTick>
 8004c40:	eba0 0009 	sub.w	r0, r0, r9
 8004c44:	2802      	cmp	r0, #2
 8004c46:	d9f6      	bls.n	8004c36 <HAL_RCC_OscConfig+0x322>
 8004c48:	e701      	b.n	8004a4e <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c4a:	2b05      	cmp	r3, #5
 8004c4c:	d106      	bne.n	8004c5c <HAL_RCC_OscConfig+0x348>
 8004c4e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004c52:	f043 0304 	orr.w	r3, r3, #4
 8004c56:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8004c5a:	e7ca      	b.n	8004bf2 <HAL_RCC_OscConfig+0x2de>
 8004c5c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004c60:	f022 0201 	bic.w	r2, r2, #1
 8004c64:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8004c68:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004c6c:	f022 0204 	bic.w	r2, r2, #4
 8004c70:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1c2      	bne.n	8004bfe <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8004c78:	f7fe f8ee 	bl	8002e58 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004c80:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c82:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004c86:	0798      	lsls	r0, r3, #30
 8004c88:	d5c2      	bpl.n	8004c10 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fe f8e5 	bl	8002e58 <HAL_GetTick>
 8004c8e:	1bc0      	subs	r0, r0, r7
 8004c90:	4548      	cmp	r0, r9
 8004c92:	d9f6      	bls.n	8004c82 <HAL_RCC_OscConfig+0x36e>
 8004c94:	e6db      	b.n	8004a4e <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c96:	f7fe f8df 	bl	8002e58 <HAL_GetTick>
 8004c9a:	1bc0      	subs	r0, r0, r7
 8004c9c:	4548      	cmp	r0, r9
 8004c9e:	d9b3      	bls.n	8004c08 <HAL_RCC_OscConfig+0x2f4>
 8004ca0:	e6d5      	b.n	8004a4e <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ca2:	2e0c      	cmp	r6, #12
 8004ca4:	f43f ae3a 	beq.w	800491c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ca8:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cb0:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cb2:	d137      	bne.n	8004d24 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8004cb4:	f7fe f8d0 	bl	8002e58 <HAL_GetTick>
 8004cb8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	0199      	lsls	r1, r3, #6
 8004cbe:	d42b      	bmi.n	8004d18 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cc0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004cc2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004cc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004cc8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004cca:	3a01      	subs	r2, #1
 8004ccc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004cd0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004cd2:	0912      	lsrs	r2, r2, #4
 8004cd4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8004cd8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004cda:	0852      	lsrs	r2, r2, #1
 8004cdc:	3a01      	subs	r2, #1
 8004cde:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004ce2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004ce4:	0852      	lsrs	r2, r2, #1
 8004ce6:	3a01      	subs	r2, #1
 8004ce8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004cec:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cf4:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cf6:	68e3      	ldr	r3, [r4, #12]
 8004cf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cfc:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004cfe:	f7fe f8ab 	bl	8002e58 <HAL_GetTick>
 8004d02:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	019a      	lsls	r2, r3, #6
 8004d08:	f53f ae66 	bmi.w	80049d8 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fe f8a4 	bl	8002e58 <HAL_GetTick>
 8004d10:	1b40      	subs	r0, r0, r5
 8004d12:	2802      	cmp	r0, #2
 8004d14:	d9f6      	bls.n	8004d04 <HAL_RCC_OscConfig+0x3f0>
 8004d16:	e69a      	b.n	8004a4e <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d18:	f7fe f89e 	bl	8002e58 <HAL_GetTick>
 8004d1c:	1b80      	subs	r0, r0, r6
 8004d1e:	2802      	cmp	r0, #2
 8004d20:	d9cb      	bls.n	8004cba <HAL_RCC_OscConfig+0x3a6>
 8004d22:	e694      	b.n	8004a4e <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d2a:	bf02      	ittt	eq
 8004d2c:	68e3      	ldreq	r3, [r4, #12]
 8004d2e:	f023 0303 	biceq.w	r3, r3, #3
 8004d32:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d34:	68e3      	ldr	r3, [r4, #12]
 8004d36:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d3e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004d40:	f7fe f88a 	bl	8002e58 <HAL_GetTick>
 8004d44:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	019b      	lsls	r3, r3, #6
 8004d4a:	f57f ae45 	bpl.w	80049d8 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4e:	f7fe f883 	bl	8002e58 <HAL_GetTick>
 8004d52:	1b40      	subs	r0, r0, r5
 8004d54:	2802      	cmp	r0, #2
 8004d56:	d9f6      	bls.n	8004d46 <HAL_RCC_OscConfig+0x432>
 8004d58:	e679      	b.n	8004a4e <HAL_RCC_OscConfig+0x13a>
 8004d5a:	bf00      	nop
 8004d5c:	40007000 	.word	0x40007000

08004d60 <HAL_RCC_ClockConfig>:
{
 8004d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d64:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8004d66:	4604      	mov	r4, r0
 8004d68:	b910      	cbnz	r0, 8004d70 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004d6a:	2001      	movs	r0, #1
}
 8004d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d70:	4a40      	ldr	r2, [pc, #256]	; (8004e74 <HAL_RCC_ClockConfig+0x114>)
 8004d72:	6813      	ldr	r3, [r2, #0]
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	428b      	cmp	r3, r1
 8004d7a:	d329      	bcc.n	8004dd0 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	07d9      	lsls	r1, r3, #31
 8004d80:	d431      	bmi.n	8004de6 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d82:	6821      	ldr	r1, [r4, #0]
 8004d84:	078a      	lsls	r2, r1, #30
 8004d86:	d45a      	bmi.n	8004e3e <HAL_RCC_ClockConfig+0xde>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d88:	4a3a      	ldr	r2, [pc, #232]	; (8004e74 <HAL_RCC_ClockConfig+0x114>)
 8004d8a:	6813      	ldr	r3, [r2, #0]
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	42b3      	cmp	r3, r6
 8004d92:	d85c      	bhi.n	8004e4e <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d94:	f011 0f04 	tst.w	r1, #4
 8004d98:	4d37      	ldr	r5, [pc, #220]	; (8004e78 <HAL_RCC_ClockConfig+0x118>)
 8004d9a:	d163      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x104>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d9c:	070b      	lsls	r3, r1, #28
 8004d9e:	d506      	bpl.n	8004dae <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004da0:	68ab      	ldr	r3, [r5, #8]
 8004da2:	6922      	ldr	r2, [r4, #16]
 8004da4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004da8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004dac:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dae:	f7ff fd5d 	bl	800486c <HAL_RCC_GetSysClockFreq>
 8004db2:	68ab      	ldr	r3, [r5, #8]
 8004db4:	4a31      	ldr	r2, [pc, #196]	; (8004e7c <HAL_RCC_ClockConfig+0x11c>)
 8004db6:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8004dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dbe:	5cd3      	ldrb	r3, [r2, r3]
 8004dc0:	f003 031f 	and.w	r3, r3, #31
 8004dc4:	40d8      	lsrs	r0, r3
 8004dc6:	4b2e      	ldr	r3, [pc, #184]	; (8004e80 <HAL_RCC_ClockConfig+0x120>)
 8004dc8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8004dca:	200f      	movs	r0, #15
 8004dcc:	f7fe b814 	b.w	8002df8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd0:	6813      	ldr	r3, [r2, #0]
 8004dd2:	f023 0307 	bic.w	r3, r3, #7
 8004dd6:	430b      	orrs	r3, r1
 8004dd8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dda:	6813      	ldr	r3, [r2, #0]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	428b      	cmp	r3, r1
 8004de2:	d1c2      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xa>
 8004de4:	e7ca      	b.n	8004d7c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004de6:	6862      	ldr	r2, [r4, #4]
 8004de8:	4d23      	ldr	r5, [pc, #140]	; (8004e78 <HAL_RCC_ClockConfig+0x118>)
 8004dea:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dec:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dee:	d11a      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xc6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004df4:	d0b9      	beq.n	8004d6a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004df6:	68ab      	ldr	r3, [r5, #8]
 8004df8:	f023 0303 	bic.w	r3, r3, #3
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8004e00:	f7fe f82a 	bl	8002e58 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e04:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004e08:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0a:	68ab      	ldr	r3, [r5, #8]
 8004e0c:	6862      	ldr	r2, [r4, #4]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
 8004e12:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004e16:	d0b4      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e18:	f7fe f81e 	bl	8002e58 <HAL_GetTick>
 8004e1c:	1bc0      	subs	r0, r0, r7
 8004e1e:	4540      	cmp	r0, r8
 8004e20:	d9f3      	bls.n	8004e0a <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8004e22:	2003      	movs	r0, #3
 8004e24:	e7a2      	b.n	8004d6c <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e26:	2a02      	cmp	r2, #2
 8004e28:	d102      	bne.n	8004e30 <HAL_RCC_ClockConfig+0xd0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e2a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004e2e:	e7e1      	b.n	8004df4 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e30:	b912      	cbnz	r2, 8004e38 <HAL_RCC_ClockConfig+0xd8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e32:	f013 0f02 	tst.w	r3, #2
 8004e36:	e7dd      	b.n	8004df4 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e38:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004e3c:	e7da      	b.n	8004df4 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e3e:	4a0e      	ldr	r2, [pc, #56]	; (8004e78 <HAL_RCC_ClockConfig+0x118>)
 8004e40:	68a0      	ldr	r0, [r4, #8]
 8004e42:	6893      	ldr	r3, [r2, #8]
 8004e44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e48:	4303      	orrs	r3, r0
 8004e4a:	6093      	str	r3, [r2, #8]
 8004e4c:	e79c      	b.n	8004d88 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4e:	6813      	ldr	r3, [r2, #0]
 8004e50:	f023 0307 	bic.w	r3, r3, #7
 8004e54:	4333      	orrs	r3, r6
 8004e56:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e58:	6813      	ldr	r3, [r2, #0]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	42b3      	cmp	r3, r6
 8004e60:	d183      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xa>
 8004e62:	e797      	b.n	8004d94 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e64:	68ab      	ldr	r3, [r5, #8]
 8004e66:	68e2      	ldr	r2, [r4, #12]
 8004e68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60ab      	str	r3, [r5, #8]
 8004e70:	e794      	b.n	8004d9c <HAL_RCC_ClockConfig+0x3c>
 8004e72:	bf00      	nop
 8004e74:	40022000 	.word	0x40022000
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	08009090 	.word	0x08009090
 8004e80:	200000e8 	.word	0x200000e8

08004e84 <HAL_RCC_GetHCLKFreq>:
}
 8004e84:	4b01      	ldr	r3, [pc, #4]	; (8004e8c <HAL_RCC_GetHCLKFreq+0x8>)
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	200000e8 	.word	0x200000e8

08004e90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e92:	4b44      	ldr	r3, [pc, #272]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x114>)
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	f012 0f03 	tst.w	r2, #3
{
 8004e9a:	4605      	mov	r5, r0
 8004e9c:	460e      	mov	r6, r1
 8004e9e:	6800      	ldr	r0, [r0, #0]
 8004ea0:	461c      	mov	r4, r3
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ea2:	d02a      	beq.n	8004efa <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	f002 0203 	and.w	r2, r2, #3
 8004eaa:	4282      	cmp	r2, r0
 8004eac:	d13c      	bne.n	8004f28 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8004eae:	2a00      	cmp	r2, #0
 8004eb0:	d03a      	beq.n	8004f28 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004eb2:	68db      	ldr	r3, [r3, #12]
       ||
 8004eb4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004eb6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004eba:	3301      	adds	r3, #1
       ||
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d133      	bne.n	8004f28 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ec6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec8:	f7fd ffc6 	bl	8002e58 <HAL_GetTick>
 8004ecc:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	011a      	lsls	r2, r3, #4
 8004ed2:	d432      	bmi.n	8004f3a <RCCEx_PLLSAI1_Config+0xaa>
 8004ed4:	68ab      	ldr	r3, [r5, #8]
 8004ed6:	021f      	lsls	r7, r3, #8
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ed8:	2e00      	cmp	r6, #0
 8004eda:	d035      	beq.n	8004f48 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004edc:	2e01      	cmp	r6, #1
 8004ede:	d14e      	bne.n	8004f7e <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ee0:	692a      	ldr	r2, [r5, #16]
 8004ee2:	6921      	ldr	r1, [r4, #16]
 8004ee4:	0852      	lsrs	r2, r2, #1
 8004ee6:	1e53      	subs	r3, r2, #1
 8004ee8:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 8004eec:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8004ef0:	433a      	orrs	r2, r7
 8004ef2:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 8004ef6:	6122      	str	r2, [r4, #16]
 8004ef8:	e031      	b.n	8004f5e <RCCEx_PLLSAI1_Config+0xce>
    switch(PllSai1->PLLSAI1Source)
 8004efa:	2802      	cmp	r0, #2
 8004efc:	d010      	beq.n	8004f20 <RCCEx_PLLSAI1_Config+0x90>
 8004efe:	2803      	cmp	r0, #3
 8004f00:	d014      	beq.n	8004f2c <RCCEx_PLLSAI1_Config+0x9c>
 8004f02:	2801      	cmp	r0, #1
 8004f04:	d110      	bne.n	8004f28 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	079f      	lsls	r7, r3, #30
 8004f0a:	d51c      	bpl.n	8004f46 <RCCEx_PLLSAI1_Config+0xb6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f0c:	68e3      	ldr	r3, [r4, #12]
 8004f0e:	686a      	ldr	r2, [r5, #4]
 8004f10:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8004f14:	3a01      	subs	r2, #1
 8004f16:	4318      	orrs	r0, r3
 8004f18:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8004f1c:	60e0      	str	r0, [r4, #12]
 8004f1e:	e7cf      	b.n	8004ec0 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f26:	d1f1      	bne.n	8004f0c <RCCEx_PLLSAI1_Config+0x7c>
 8004f28:	2001      	movs	r0, #1
 8004f2a:	e00c      	b.n	8004f46 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	0391      	lsls	r1, r2, #14
 8004f30:	d4ec      	bmi.n	8004f0c <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004f38:	e7f5      	b.n	8004f26 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f3a:	f7fd ff8d 	bl	8002e58 <HAL_GetTick>
 8004f3e:	1bc0      	subs	r0, r0, r7
 8004f40:	2802      	cmp	r0, #2
 8004f42:	d9c4      	bls.n	8004ece <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8004f44:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8004f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f48:	6921      	ldr	r1, [r4, #16]
 8004f4a:	68eb      	ldr	r3, [r5, #12]
 8004f4c:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8004f50:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	4339      	orrs	r1, r7
 8004f58:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8004f5c:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f64:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8004f66:	f7fd ff77 	bl	8002e58 <HAL_GetTick>
 8004f6a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	d512      	bpl.n	8004f98 <RCCEx_PLLSAI1_Config+0x108>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f72:	6923      	ldr	r3, [r4, #16]
 8004f74:	69aa      	ldr	r2, [r5, #24]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	6123      	str	r3, [r4, #16]
 8004f7a:	2000      	movs	r0, #0
  return status;
 8004f7c:	e7e3      	b.n	8004f46 <RCCEx_PLLSAI1_Config+0xb6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f7e:	696b      	ldr	r3, [r5, #20]
 8004f80:	6922      	ldr	r2, [r4, #16]
 8004f82:	085b      	lsrs	r3, r3, #1
 8004f84:	1e59      	subs	r1, r3, #1
 8004f86:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 8004f8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f8e:	433b      	orrs	r3, r7
 8004f90:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8004f94:	6123      	str	r3, [r4, #16]
 8004f96:	e7e2      	b.n	8004f5e <RCCEx_PLLSAI1_Config+0xce>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f98:	f7fd ff5e 	bl	8002e58 <HAL_GetTick>
 8004f9c:	1b80      	subs	r0, r0, r6
 8004f9e:	2802      	cmp	r0, #2
 8004fa0:	d9e4      	bls.n	8004f6c <RCCEx_PLLSAI1_Config+0xdc>
 8004fa2:	e7cf      	b.n	8004f44 <RCCEx_PLLSAI1_Config+0xb4>
 8004fa4:	40021000 	.word	0x40021000

08004fa8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004faa:	4b3c      	ldr	r3, [pc, #240]	; (800509c <RCCEx_PLLSAI2_Config+0xf4>)
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	f012 0f03 	tst.w	r2, #3
{
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	460e      	mov	r6, r1
 8004fb6:	6800      	ldr	r0, [r0, #0]
 8004fb8:	461c      	mov	r4, r3
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fba:	d027      	beq.n	800500c <RCCEx_PLLSAI2_Config+0x64>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	f002 0203 	and.w	r2, r2, #3
 8004fc2:	4282      	cmp	r2, r0
 8004fc4:	d139      	bne.n	800503a <RCCEx_PLLSAI2_Config+0x92>
       ||
 8004fc6:	2a00      	cmp	r2, #0
 8004fc8:	d037      	beq.n	800503a <RCCEx_PLLSAI2_Config+0x92>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fca:	68db      	ldr	r3, [r3, #12]
       ||
 8004fcc:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fce:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004fd2:	3301      	adds	r3, #1
       ||
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d130      	bne.n	800503a <RCCEx_PLLSAI2_Config+0x92>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fde:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe0:	f7fd ff3a 	bl	8002e58 <HAL_GetTick>
 8004fe4:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	009a      	lsls	r2, r3, #2
 8004fea:	d42f      	bmi.n	800504c <RCCEx_PLLSAI2_Config+0xa4>
 8004fec:	68ab      	ldr	r3, [r5, #8]
 8004fee:	0218      	lsls	r0, r3, #8
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ff0:	b39e      	cbz	r6, 800505a <RCCEx_PLLSAI2_Config+0xb2>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ff2:	6963      	ldr	r3, [r4, #20]
 8004ff4:	6929      	ldr	r1, [r5, #16]
 8004ff6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ffa:	0849      	lsrs	r1, r1, #1
 8004ffc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005000:	3901      	subs	r1, #1
 8005002:	4303      	orrs	r3, r0
 8005004:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8005008:	6163      	str	r3, [r4, #20]
 800500a:	e031      	b.n	8005070 <RCCEx_PLLSAI2_Config+0xc8>
    switch(PllSai2->PLLSAI2Source)
 800500c:	2802      	cmp	r0, #2
 800500e:	d010      	beq.n	8005032 <RCCEx_PLLSAI2_Config+0x8a>
 8005010:	2803      	cmp	r0, #3
 8005012:	d014      	beq.n	800503e <RCCEx_PLLSAI2_Config+0x96>
 8005014:	2801      	cmp	r0, #1
 8005016:	d110      	bne.n	800503a <RCCEx_PLLSAI2_Config+0x92>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	079f      	lsls	r7, r3, #30
 800501c:	d51c      	bpl.n	8005058 <RCCEx_PLLSAI2_Config+0xb0>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800501e:	68e3      	ldr	r3, [r4, #12]
 8005020:	686a      	ldr	r2, [r5, #4]
 8005022:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8005026:	3a01      	subs	r2, #1
 8005028:	4318      	orrs	r0, r3
 800502a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800502e:	60e0      	str	r0, [r4, #12]
 8005030:	e7d2      	b.n	8004fd8 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005038:	d1f1      	bne.n	800501e <RCCEx_PLLSAI2_Config+0x76>
 800503a:	2001      	movs	r0, #1
 800503c:	e00c      	b.n	8005058 <RCCEx_PLLSAI2_Config+0xb0>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	0391      	lsls	r1, r2, #14
 8005042:	d4ec      	bmi.n	800501e <RCCEx_PLLSAI2_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800504a:	e7f5      	b.n	8005038 <RCCEx_PLLSAI2_Config+0x90>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800504c:	f7fd ff04 	bl	8002e58 <HAL_GetTick>
 8005050:	1bc0      	subs	r0, r0, r7
 8005052:	2802      	cmp	r0, #2
 8005054:	d9c7      	bls.n	8004fe6 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8005056:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8005058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800505a:	6962      	ldr	r2, [r4, #20]
 800505c:	68eb      	ldr	r3, [r5, #12]
 800505e:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8005062:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	4302      	orrs	r2, r0
 800506a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800506e:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005076:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8005078:	f7fd feee 	bl	8002e58 <HAL_GetTick>
 800507c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	d505      	bpl.n	8005090 <RCCEx_PLLSAI2_Config+0xe8>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005084:	6963      	ldr	r3, [r4, #20]
 8005086:	696a      	ldr	r2, [r5, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	6163      	str	r3, [r4, #20]
 800508c:	2000      	movs	r0, #0
  return status;
 800508e:	e7e3      	b.n	8005058 <RCCEx_PLLSAI2_Config+0xb0>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005090:	f7fd fee2 	bl	8002e58 <HAL_GetTick>
 8005094:	1b80      	subs	r0, r0, r6
 8005096:	2802      	cmp	r0, #2
 8005098:	d9f1      	bls.n	800507e <RCCEx_PLLSAI2_Config+0xd6>
 800509a:	e7dc      	b.n	8005056 <RCCEx_PLLSAI2_Config+0xae>
 800509c:	40021000 	.word	0x40021000

080050a0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80050a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050a4:	6806      	ldr	r6, [r0, #0]
 80050a6:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80050aa:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050ac:	d024      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80050ae:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80050b0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80050b4:	d02c      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80050b6:	d802      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80050b8:	b1c1      	cbz	r1, 80050ec <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80050ba:	2601      	movs	r6, #1
 80050bc:	e01c      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80050be:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80050c2:	d00d      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80050c4:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80050c8:	d1f7      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050ca:	4a4e      	ldr	r2, [pc, #312]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050cc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80050ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80050d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80050d6:	430b      	orrs	r3, r1
 80050d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80050dc:	2600      	movs	r6, #0
 80050de:	e00b      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050e0:	4a48      	ldr	r2, [pc, #288]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050e2:	68d3      	ldr	r3, [r2, #12]
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e8:	60d3      	str	r3, [r2, #12]
 80050ea:	e7ee      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050ec:	3004      	adds	r0, #4
 80050ee:	f7ff fecf 	bl	8004e90 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050f2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d0e8      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	04d8      	lsls	r0, r3, #19
 80050fc:	d506      	bpl.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80050fe:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005100:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8005104:	d073      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005106:	d808      	bhi.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005108:	b1a9      	cbz	r1, 8005136 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800510a:	2601      	movs	r6, #1
 800510c:	4635      	mov	r5, r6
 800510e:	e021      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005110:	2100      	movs	r1, #0
 8005112:	3020      	adds	r0, #32
 8005114:	f7ff ff48 	bl	8004fa8 <RCCEx_PLLSAI2_Config>
 8005118:	e7eb      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800511a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800511e:	d004      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8005120:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8005124:	d1f1      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005126:	4635      	mov	r5, r6
 8005128:	e009      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800512a:	4a36      	ldr	r2, [pc, #216]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800512c:	68d3      	ldr	r3, [r2, #12]
 800512e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005132:	60d3      	str	r3, [r2, #12]
 8005134:	e7f7      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005136:	1d20      	adds	r0, r4, #4
 8005138:	f7ff feaa 	bl	8004e90 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800513c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800513e:	2d00      	cmp	r5, #0
 8005140:	d15b      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005142:	4a30      	ldr	r2, [pc, #192]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005144:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005146:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800514a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800514e:	430b      	orrs	r3, r1
 8005150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	0399      	lsls	r1, r3, #14
 8005158:	f140 815a 	bpl.w	8005410 <HAL_RCCEx_PeriphCLKConfig+0x370>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800515c:	4f29      	ldr	r7, [pc, #164]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800515e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005160:	00da      	lsls	r2, r3, #3
 8005162:	d44c      	bmi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516a:	65bb      	str	r3, [r7, #88]	; 0x58
 800516c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800516e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005172:	9301      	str	r3, [sp, #4]
 8005174:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005176:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800517a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005208 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800517e:	f8d9 3000 	ldr.w	r3, [r9]
 8005182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005186:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800518a:	f7fd fe65 	bl	8002e58 <HAL_GetTick>
 800518e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005190:	f8d9 3000 	ldr.w	r3, [r9]
 8005194:	05db      	lsls	r3, r3, #23
 8005196:	d539      	bpl.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if(ret == HAL_OK)
 8005198:	2d00      	cmp	r5, #0
 800519a:	d13e      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800519c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80051a4:	d015      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x132>
 80051a6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d011      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80051b2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80051b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80051ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051be:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80051ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051d2:	07d8      	lsls	r0, r3, #31
 80051d4:	f100 810c 	bmi.w	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051dc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80051e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051ea:	4635      	mov	r5, r6
 80051ec:	e015      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051ee:	2100      	movs	r1, #0
 80051f0:	f104 0020 	add.w	r0, r4, #32
 80051f4:	f7ff fed8 	bl	8004fa8 <RCCEx_PLLSAI2_Config>
 80051f8:	e7a0      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80051fa:	462e      	mov	r6, r5
 80051fc:	e7aa      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 80051fe:	f04f 0800 	mov.w	r8, #0
 8005202:	e7ba      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005204:	40021000 	.word	0x40021000
 8005208:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800520c:	f7fd fe24 	bl	8002e58 <HAL_GetTick>
 8005210:	eba0 000a 	sub.w	r0, r0, sl
 8005214:	2802      	cmp	r0, #2
 8005216:	d9bb      	bls.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8005218:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800521a:	f1b8 0f00 	cmp.w	r8, #0
 800521e:	d003      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x188>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005226:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	07da      	lsls	r2, r3, #31
 800522c:	d508      	bpl.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800522e:	498e      	ldr	r1, [pc, #568]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8005230:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005232:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005236:	f022 0203 	bic.w	r2, r2, #3
 800523a:	4302      	orrs	r2, r0
 800523c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005240:	079f      	lsls	r7, r3, #30
 8005242:	d508      	bpl.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005244:	4988      	ldr	r1, [pc, #544]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8005246:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005248:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800524c:	f022 020c 	bic.w	r2, r2, #12
 8005250:	4302      	orrs	r2, r0
 8005252:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005256:	075e      	lsls	r6, r3, #29
 8005258:	d508      	bpl.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800525a:	4983      	ldr	r1, [pc, #524]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800525c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800525e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005262:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005266:	4302      	orrs	r2, r0
 8005268:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800526c:	0718      	lsls	r0, r3, #28
 800526e:	d508      	bpl.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005270:	497d      	ldr	r1, [pc, #500]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8005272:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005274:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005278:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800527c:	4302      	orrs	r2, r0
 800527e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005282:	06d9      	lsls	r1, r3, #27
 8005284:	d508      	bpl.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005286:	4978      	ldr	r1, [pc, #480]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8005288:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800528a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800528e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005292:	4302      	orrs	r2, r0
 8005294:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005298:	069a      	lsls	r2, r3, #26
 800529a:	d508      	bpl.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800529c:	4972      	ldr	r1, [pc, #456]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800529e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80052a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80052a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80052a8:	4302      	orrs	r2, r0
 80052aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052ae:	059f      	lsls	r7, r3, #22
 80052b0:	d508      	bpl.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052b2:	496d      	ldr	r1, [pc, #436]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80052b4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80052b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80052ba:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80052be:	4302      	orrs	r2, r0
 80052c0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052c4:	055e      	lsls	r6, r3, #21
 80052c6:	d508      	bpl.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052c8:	4967      	ldr	r1, [pc, #412]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80052ca:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80052cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80052d0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80052d4:	4302      	orrs	r2, r0
 80052d6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052da:	0658      	lsls	r0, r3, #25
 80052dc:	d508      	bpl.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052de:	4962      	ldr	r1, [pc, #392]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80052e0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80052e2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80052e6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80052ea:	4302      	orrs	r2, r0
 80052ec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052f0:	0619      	lsls	r1, r3, #24
 80052f2:	d508      	bpl.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x266>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052f4:	495c      	ldr	r1, [pc, #368]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80052f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052f8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80052fc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005300:	4302      	orrs	r2, r0
 8005302:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005306:	05da      	lsls	r2, r3, #23
 8005308:	d508      	bpl.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800530a:	4957      	ldr	r1, [pc, #348]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800530c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800530e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005312:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005316:	4302      	orrs	r2, r0
 8005318:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800531c:	049b      	lsls	r3, r3, #18
 800531e:	d50f      	bpl.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005320:	4a51      	ldr	r2, [pc, #324]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8005322:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005324:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005328:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800532c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800532e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005332:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005336:	d16d      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005338:	68d3      	ldr	r3, [r2, #12]
 800533a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800533e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	031f      	lsls	r7, r3, #12
 8005344:	d50f      	bpl.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005346:	4a48      	ldr	r2, [pc, #288]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8005348:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800534a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800534e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005352:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005354:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800535c:	d165      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800535e:	68d3      	ldr	r3, [r2, #12]
 8005360:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005364:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	035e      	lsls	r6, r3, #13
 800536a:	d50f      	bpl.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800536c:	4a3e      	ldr	r2, [pc, #248]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800536e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005370:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005374:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005378:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800537a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800537e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005382:	d15d      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005384:	68d3      	ldr	r3, [r2, #12]
 8005386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800538a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	0458      	lsls	r0, r3, #17
 8005390:	d512      	bpl.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005392:	4935      	ldr	r1, [pc, #212]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8005394:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8005396:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800539a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800539e:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053a0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053a8:	d155      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053aa:	2102      	movs	r1, #2
 80053ac:	1d20      	adds	r0, r4, #4
 80053ae:	f7ff fd6f 	bl	8004e90 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80053b2:	2800      	cmp	r0, #0
 80053b4:	bf18      	it	ne
 80053b6:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053b8:	6822      	ldr	r2, [r4, #0]
 80053ba:	0411      	lsls	r1, r2, #16
 80053bc:	d508      	bpl.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053be:	492a      	ldr	r1, [pc, #168]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80053c0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80053c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80053c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053ca:	4303      	orrs	r3, r0
 80053cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053d0:	03d3      	lsls	r3, r2, #15
 80053d2:	d509      	bpl.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053d4:	4a24      	ldr	r2, [pc, #144]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80053d6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80053da:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80053de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053e2:	430b      	orrs	r3, r1
 80053e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80053e8:	4628      	mov	r0, r5
 80053ea:	b002      	add	sp, #8
 80053ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tickstart = HAL_GetTick();
 80053f0:	f7fd fd32 	bl	8002e58 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80053f8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053fe:	0799      	lsls	r1, r3, #30
 8005400:	f53f aeea 	bmi.w	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005404:	f7fd fd28 	bl	8002e58 <HAL_GetTick>
 8005408:	1b40      	subs	r0, r0, r5
 800540a:	4548      	cmp	r0, r9
 800540c:	d9f5      	bls.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800540e:	e703      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8005410:	4635      	mov	r5, r6
 8005412:	e709      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x188>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005414:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8005418:	d192      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800541a:	2101      	movs	r1, #1
 800541c:	1d20      	adds	r0, r4, #4
 800541e:	f7ff fd37 	bl	8004e90 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8005422:	2800      	cmp	r0, #0
 8005424:	bf18      	it	ne
 8005426:	4605      	movne	r5, r0
 8005428:	e78a      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800542a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800542e:	d19a      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005430:	2101      	movs	r1, #1
 8005432:	1d20      	adds	r0, r4, #4
 8005434:	f7ff fd2c 	bl	8004e90 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8005438:	2800      	cmp	r0, #0
 800543a:	bf18      	it	ne
 800543c:	4605      	movne	r5, r0
 800543e:	e792      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005440:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8005444:	d1a2      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005446:	2101      	movs	r1, #1
 8005448:	1d20      	adds	r0, r4, #4
 800544a:	f7ff fd21 	bl	8004e90 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800544e:	2800      	cmp	r0, #0
 8005450:	bf18      	it	ne
 8005452:	4605      	movne	r5, r0
 8005454:	e79a      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005456:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800545a:	d1ad      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800545c:	2102      	movs	r1, #2
 800545e:	f104 0020 	add.w	r0, r4, #32
 8005462:	f7ff fda1 	bl	8004fa8 <RCCEx_PLLSAI2_Config>
 8005466:	e7a4      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005468:	40021000 	.word	0x40021000

0800546c <HAL_RCCEx_DisableLSECSS>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800546c:	4b05      	ldr	r3, [pc, #20]	; (8005484 <HAL_RCCEx_DisableLSECSS+0x18>)
 800546e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005472:	f022 0220 	bic.w	r2, r2, #32
 8005476:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 800547a:	699a      	ldr	r2, [r3, #24]
 800547c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005480:	619a      	str	r2, [r3, #24]
}
 8005482:	4770      	bx	lr
 8005484:	40021000 	.word	0x40021000

08005488 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005488:	4a02      	ldr	r2, [pc, #8]	; (8005494 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800548a:	6813      	ldr	r3, [r2, #0]
 800548c:	f043 0304 	orr.w	r3, r3, #4
 8005490:	6013      	str	r3, [r2, #0]
}
 8005492:	4770      	bx	lr
 8005494:	40021000 	.word	0x40021000

08005498 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005498:	6803      	ldr	r3, [r0, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a2:	6842      	ldr	r2, [r0, #4]
 80054a4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80054a8:	d10a      	bne.n	80054c0 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 80054aa:	6882      	ldr	r2, [r0, #8]
 80054ac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80054b0:	d002      	beq.n	80054b8 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054b2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80054b6:	d103      	bne.n	80054c0 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054c0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80054c2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80054c6:	d107      	bne.n	80054d8 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054d8:	2301      	movs	r3, #1
 80054da:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054de:	2300      	movs	r3, #0
 80054e0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 80054e4:	2003      	movs	r0, #3
 80054e6:	4770      	bx	lr

080054e8 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	4604      	mov	r4, r0
 80054ec:	460d      	mov	r5, r1
 80054ee:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	6898      	ldr	r0, [r3, #8]
 80054f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054f8:	d100      	bne.n	80054fc <SPI_WaitFlagStateUntilTimeout.constprop.9+0x14>
}
 80054fa:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 80054fc:	1c6a      	adds	r2, r5, #1
 80054fe:	d0f8      	beq.n	80054f2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005500:	f7fd fcaa 	bl	8002e58 <HAL_GetTick>
 8005504:	1b80      	subs	r0, r0, r6
 8005506:	4285      	cmp	r5, r0
 8005508:	d8f2      	bhi.n	80054f0 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x8>
 800550a:	4620      	mov	r0, r4
}
 800550c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005510:	f7ff bfc2 	b.w	8005498 <SPI_WaitFifoStateUntilTimeout.part.1>

08005514 <SPI_WaitFifoStateUntilTimeout.constprop.10>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005516:	4605      	mov	r5, r0
 8005518:	460c      	mov	r4, r1
 800551a:	4616      	mov	r6, r2
 800551c:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 800551e:	6829      	ldr	r1, [r5, #0]
 8005520:	6888      	ldr	r0, [r1, #8]
 8005522:	4020      	ands	r0, r4
 8005524:	d100      	bne.n	8005528 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x14>
      }
    }
  }

  return HAL_OK;
}
 8005526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005528:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800552c:	bf08      	it	eq
 800552e:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8005530:	1c73      	adds	r3, r6, #1
 8005532:	d0f5      	beq.n	8005520 <SPI_WaitFifoStateUntilTimeout.constprop.10+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005534:	f7fd fc90 	bl	8002e58 <HAL_GetTick>
 8005538:	1bc0      	subs	r0, r0, r7
 800553a:	4286      	cmp	r6, r0
 800553c:	d8ef      	bhi.n	800551e <SPI_WaitFifoStateUntilTimeout.constprop.10+0xa>
 800553e:	4628      	mov	r0, r5
}
 8005540:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005544:	f7ff bfa8 	b.w	8005498 <SPI_WaitFifoStateUntilTimeout.part.1>

08005548 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005548:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800554a:	4613      	mov	r3, r2
{
 800554c:	460d      	mov	r5, r1
 800554e:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005550:	460a      	mov	r2, r1
 8005552:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8005556:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005558:	f7ff ffdc 	bl	8005514 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 800555c:	b128      	cbz	r0, 800556a <SPI_EndRxTxTransaction+0x22>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800555e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005560:	f043 0320 	orr.w	r3, r3, #32
 8005564:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005566:	2003      	movs	r0, #3
 8005568:	e00f      	b.n	800558a <SPI_EndRxTxTransaction+0x42>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800556a:	4632      	mov	r2, r6
 800556c:	4629      	mov	r1, r5
 800556e:	4620      	mov	r0, r4
 8005570:	f7ff ffba 	bl	80054e8 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8005574:	2800      	cmp	r0, #0
 8005576:	d1f2      	bne.n	800555e <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005578:	4633      	mov	r3, r6
 800557a:	462a      	mov	r2, r5
 800557c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005580:	4620      	mov	r0, r4
 8005582:	f7ff ffc7 	bl	8005514 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8005586:	2800      	cmp	r0, #0
 8005588:	d1e9      	bne.n	800555e <SPI_EndRxTxTransaction+0x16>
  }

  return HAL_OK;
}
 800558a:	bd70      	pop	{r4, r5, r6, pc}

0800558c <HAL_SPI_MspInit>:
}
 800558c:	4770      	bx	lr

0800558e <HAL_SPI_Init>:
{
 800558e:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8005590:	4604      	mov	r4, r0
 8005592:	2800      	cmp	r0, #0
 8005594:	d046      	beq.n	8005624 <HAL_SPI_Init+0x96>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005596:	2300      	movs	r3, #0
 8005598:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800559a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800559e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80055a2:	b91b      	cbnz	r3, 80055ac <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80055a4:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80055a8:	f7ff fff0 	bl	800558c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80055ac:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80055ae:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80055b0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80055b4:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055b6:	68e5      	ldr	r5, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80055b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055bc:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055c6:	d82f      	bhi.n	8005628 <HAL_SPI_Init+0x9a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055cc:	d000      	beq.n	80055d0 <HAL_SPI_Init+0x42>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055ce:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80055d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80055d2:	b92b      	cbnz	r3, 80055e0 <HAL_SPI_Init+0x52>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055d4:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80055d8:	bf8c      	ite	hi
 80055da:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80055dc:	2301      	movls	r3, #1
 80055de:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80055e0:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 80055e4:	4333      	orrs	r3, r6
 80055e6:	6926      	ldr	r6, [r4, #16]
 80055e8:	69a0      	ldr	r0, [r4, #24]
 80055ea:	4333      	orrs	r3, r6
 80055ec:	6966      	ldr	r6, [r4, #20]
 80055ee:	4333      	orrs	r3, r6
 80055f0:	69e6      	ldr	r6, [r4, #28]
 80055f2:	4333      	orrs	r3, r6
 80055f4:	6a26      	ldr	r6, [r4, #32]
 80055f6:	4333      	orrs	r3, r6
 80055f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055fa:	4333      	orrs	r3, r6
 80055fc:	f400 7600 	and.w	r6, r0, #512	; 0x200
 8005600:	4333      	orrs	r3, r6
 8005602:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005606:	432b      	orrs	r3, r5
 8005608:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800560a:	0c00      	lsrs	r0, r0, #16
 800560c:	f000 0004 	and.w	r0, r0, #4
 8005610:	432b      	orrs	r3, r5
 8005612:	4303      	orrs	r3, r0
 8005614:	430b      	orrs	r3, r1
 8005616:	6053      	str	r3, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005618:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800561a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800561c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800561e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8005622:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005624:	2001      	movs	r0, #1
 8005626:	e7fc      	b.n	8005622 <HAL_SPI_Init+0x94>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005628:	4619      	mov	r1, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800562a:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 800562e:	e7cd      	b.n	80055cc <HAL_SPI_Init+0x3e>

08005630 <HAL_SPI_MspDeInit>:
 8005630:	4770      	bx	lr

08005632 <HAL_SPI_DeInit>:
{
 8005632:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8005634:	4604      	mov	r4, r0
 8005636:	b180      	cbz	r0, 800565a <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8005638:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800563a:	2302      	movs	r3, #2
 800563c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005640:	6813      	ldr	r3, [r2, #0]
 8005642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005646:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8005648:	f7ff fff2 	bl	8005630 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800564c:	2000      	movs	r0, #0
 800564e:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 8005650:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 8005654:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 8005658:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800565a:	2001      	movs	r0, #1
 800565c:	e7fc      	b.n	8005658 <HAL_SPI_DeInit+0x26>

0800565e <HAL_SPI_Transmit>:
{
 800565e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005662:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8005664:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005668:	2b01      	cmp	r3, #1
{
 800566a:	4604      	mov	r4, r0
 800566c:	460d      	mov	r5, r1
 800566e:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8005670:	f000 80af 	beq.w	80057d2 <HAL_SPI_Transmit+0x174>
 8005674:	2301      	movs	r3, #1
 8005676:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800567a:	f7fd fbed 	bl	8002e58 <HAL_GetTick>
 800567e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005680:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005684:	b2c0      	uxtb	r0, r0
 8005686:	2801      	cmp	r0, #1
 8005688:	f040 80a1 	bne.w	80057ce <HAL_SPI_Transmit+0x170>
  if ((pData == NULL) || (Size == 0U))
 800568c:	2d00      	cmp	r5, #0
 800568e:	d05f      	beq.n	8005750 <HAL_SPI_Transmit+0xf2>
 8005690:	f1b8 0f00 	cmp.w	r8, #0
 8005694:	d05c      	beq.n	8005750 <HAL_SPI_Transmit+0xf2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005696:	2303      	movs	r3, #3
 8005698:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800569c:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800569e:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056a0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056a2:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 80056a4:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 80056a8:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80056ac:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 80056b0:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
 80056b4:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056b6:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 80056bc:	bf08      	it	eq
 80056be:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 80056c0:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 80056c4:	bf04      	itt	eq
 80056c6:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 80056ca:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056cc:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056ce:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056d0:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80056d2:	bf5e      	ittt	pl
 80056d4:	6803      	ldrpl	r3, [r0, #0]
 80056d6:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80056da:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056dc:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 80056e0:	6863      	ldr	r3, [r4, #4]
 80056e2:	d93e      	bls.n	8005762 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056e4:	b113      	cbz	r3, 80056ec <HAL_SPI_Transmit+0x8e>
 80056e6:	f1b8 0f01 	cmp.w	r8, #1
 80056ea:	d107      	bne.n	80056fc <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056ec:	f835 3b02 	ldrh.w	r3, [r5], #2
 80056f0:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056f2:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80056f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80056fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056fe:	b29b      	uxth	r3, r3
 8005700:	b9a3      	cbnz	r3, 800572c <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005702:	463a      	mov	r2, r7
 8005704:	4631      	mov	r1, r6
 8005706:	4620      	mov	r0, r4
 8005708:	f7ff ff1e 	bl	8005548 <SPI_EndRxTxTransaction>
 800570c:	2800      	cmp	r0, #0
 800570e:	d15b      	bne.n	80057c8 <HAL_SPI_Transmit+0x16a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005710:	68a3      	ldr	r3, [r4, #8]
 8005712:	b933      	cbnz	r3, 8005722 <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	9201      	str	r2, [sp, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	9301      	str	r3, [sp, #4]
 8005720:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005722:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8005724:	3000      	adds	r0, #0
 8005726:	bf18      	it	ne
 8005728:	2001      	movne	r0, #1
error:
 800572a:	e011      	b.n	8005750 <HAL_SPI_Transmit+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800572c:	6822      	ldr	r2, [r4, #0]
 800572e:	6893      	ldr	r3, [r2, #8]
 8005730:	0798      	lsls	r0, r3, #30
 8005732:	d505      	bpl.n	8005740 <HAL_SPI_Transmit+0xe2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005734:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005736:	f833 1b02 	ldrh.w	r1, [r3], #2
 800573a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800573c:	63a3      	str	r3, [r4, #56]	; 0x38
 800573e:	e7d9      	b.n	80056f4 <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005740:	f7fd fb8a 	bl	8002e58 <HAL_GetTick>
 8005744:	1bc0      	subs	r0, r0, r7
 8005746:	42b0      	cmp	r0, r6
 8005748:	d3d8      	bcc.n	80056fc <HAL_SPI_Transmit+0x9e>
 800574a:	1c71      	adds	r1, r6, #1
 800574c:	d0d6      	beq.n	80056fc <HAL_SPI_Transmit+0x9e>
          errorcode = HAL_TIMEOUT;
 800574e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005750:	2301      	movs	r3, #1
 8005752:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005756:	2300      	movs	r3, #0
 8005758:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800575c:	b002      	add	sp, #8
 800575e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005762:	b113      	cbz	r3, 800576a <HAL_SPI_Transmit+0x10c>
 8005764:	f1b8 0f01 	cmp.w	r8, #1
 8005768:	d112      	bne.n	8005790 <HAL_SPI_Transmit+0x132>
      if (hspi->TxXferCount > 1U)
 800576a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800576c:	2b01      	cmp	r3, #1
 800576e:	d906      	bls.n	800577e <HAL_SPI_Transmit+0x120>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005770:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005774:	60c3      	str	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005776:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005778:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800577a:	3b02      	subs	r3, #2
 800577c:	e006      	b.n	800578c <HAL_SPI_Transmit+0x12e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800577e:	782b      	ldrb	r3, [r5, #0]
 8005780:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr ++;
 8005782:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005784:	3301      	adds	r3, #1
 8005786:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005788:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800578a:	3b01      	subs	r3, #1
 800578c:	b29b      	uxth	r3, r3
 800578e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8005790:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0b4      	beq.n	8005702 <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	0792      	lsls	r2, r2, #30
 800579e:	d50b      	bpl.n	80057b8 <HAL_SPI_Transmit+0x15a>
        if (hspi->TxXferCount > 1U)
 80057a0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80057a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80057a4:	2a01      	cmp	r2, #1
 80057a6:	d904      	bls.n	80057b2 <HAL_SPI_Transmit+0x154>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057a8:	f830 2b02 	ldrh.w	r2, [r0], #2
 80057ac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ae:	63a0      	str	r0, [r4, #56]	; 0x38
 80057b0:	e7e2      	b.n	8005778 <HAL_SPI_Transmit+0x11a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057b2:	7802      	ldrb	r2, [r0, #0]
 80057b4:	731a      	strb	r2, [r3, #12]
 80057b6:	e7e4      	b.n	8005782 <HAL_SPI_Transmit+0x124>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057b8:	f7fd fb4e 	bl	8002e58 <HAL_GetTick>
 80057bc:	1bc0      	subs	r0, r0, r7
 80057be:	42b0      	cmp	r0, r6
 80057c0:	d3e6      	bcc.n	8005790 <HAL_SPI_Transmit+0x132>
 80057c2:	1c73      	adds	r3, r6, #1
 80057c4:	d0e4      	beq.n	8005790 <HAL_SPI_Transmit+0x132>
 80057c6:	e7c2      	b.n	800574e <HAL_SPI_Transmit+0xf0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057c8:	2320      	movs	r3, #32
 80057ca:	6623      	str	r3, [r4, #96]	; 0x60
 80057cc:	e7a0      	b.n	8005710 <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 80057ce:	2002      	movs	r0, #2
 80057d0:	e7be      	b.n	8005750 <HAL_SPI_Transmit+0xf2>
  __HAL_LOCK(hspi);
 80057d2:	2002      	movs	r0, #2
 80057d4:	e7c2      	b.n	800575c <HAL_SPI_Transmit+0xfe>

080057d6 <HAL_SPI_TransmitReceive>:
{
 80057d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057da:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80057dc:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80057e0:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 80057e2:	2b01      	cmp	r3, #1
{
 80057e4:	4604      	mov	r4, r0
 80057e6:	460d      	mov	r5, r1
 80057e8:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80057ea:	f000 8111 	beq.w	8005a10 <HAL_SPI_TransmitReceive+0x23a>
 80057ee:	2301      	movs	r3, #1
 80057f0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80057f4:	f7fd fb30 	bl	8002e58 <HAL_GetTick>
  tmp_state           = hspi->State;
 80057f8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 80057fc:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80057fe:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005800:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005802:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005804:	d00a      	beq.n	800581c <HAL_SPI_TransmitReceive+0x46>
 8005806:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800580a:	f040 80ff 	bne.w	8005a0c <HAL_SPI_TransmitReceive+0x236>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800580e:	68a0      	ldr	r0, [r4, #8]
 8005810:	2800      	cmp	r0, #0
 8005812:	f040 80fb 	bne.w	8005a0c <HAL_SPI_TransmitReceive+0x236>
 8005816:	2b04      	cmp	r3, #4
 8005818:	f040 80f8 	bne.w	8005a0c <HAL_SPI_TransmitReceive+0x236>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800581c:	2d00      	cmp	r5, #0
 800581e:	d049      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0xde>
 8005820:	f1b9 0f00 	cmp.w	r9, #0
 8005824:	d046      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0xde>
 8005826:	2e00      	cmp	r6, #0
 8005828:	d044      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800582a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800582e:	68e2      	ldr	r2, [r4, #12]
 8005830:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005832:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005836:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005838:	bf1c      	itt	ne
 800583a:	2305      	movne	r3, #5
 800583c:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005840:	2300      	movs	r3, #0
 8005842:	6623      	str	r3, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005844:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->RxXferCount = Size;
 8005848:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 800584c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800584e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->RxXferSize  = Size;
 8005852:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005856:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005858:	87a6      	strh	r6, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800585a:	6843      	ldr	r3, [r0, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800585c:	d801      	bhi.n	8005862 <HAL_SPI_TransmitReceive+0x8c>
 800585e:	2e01      	cmp	r6, #1
 8005860:	d92a      	bls.n	80058b8 <HAL_SPI_TransmitReceive+0xe2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005866:	6043      	str	r3, [r0, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005868:	6803      	ldr	r3, [r0, #0]
 800586a:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800586c:	bf5e      	ittt	pl
 800586e:	6803      	ldrpl	r3, [r0, #0]
 8005870:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8005874:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005876:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800587a:	d956      	bls.n	800592a <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800587c:	b109      	cbz	r1, 8005882 <HAL_SPI_TransmitReceive+0xac>
 800587e:	2e01      	cmp	r6, #1
 8005880:	d107      	bne.n	8005892 <HAL_SPI_TransmitReceive+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005882:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005886:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8005888:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800588a:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800588c:	3b01      	subs	r3, #1
 800588e:	b29b      	uxth	r3, r3
 8005890:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005892:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005894:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005896:	b29b      	uxth	r3, r3
 8005898:	b98b      	cbnz	r3, 80058be <HAL_SPI_TransmitReceive+0xe8>
 800589a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800589e:	b29b      	uxth	r3, r3
 80058a0:	b96b      	cbnz	r3, 80058be <HAL_SPI_TransmitReceive+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058a2:	4642      	mov	r2, r8
 80058a4:	4639      	mov	r1, r7
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7ff fe4e 	bl	8005548 <SPI_EndRxTxTransaction>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d034      	beq.n	800591a <HAL_SPI_TransmitReceive+0x144>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058b0:	2320      	movs	r3, #32
 80058b2:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80058b4:	2001      	movs	r0, #1
 80058b6:	e030      	b.n	800591a <HAL_SPI_TransmitReceive+0x144>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058bc:	e7d3      	b.n	8005866 <HAL_SPI_TransmitReceive+0x90>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058be:	6822      	ldr	r2, [r4, #0]
 80058c0:	6893      	ldr	r3, [r2, #8]
 80058c2:	0799      	lsls	r1, r3, #30
 80058c4:	d50d      	bpl.n	80058e2 <HAL_SPI_TransmitReceive+0x10c>
 80058c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	b153      	cbz	r3, 80058e2 <HAL_SPI_TransmitReceive+0x10c>
 80058cc:	b14d      	cbz	r5, 80058e2 <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058d0:	f833 1b02 	ldrh.w	r1, [r3], #2
 80058d4:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80058d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29b      	uxth	r3, r3
 80058de:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80058e0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058e2:	6893      	ldr	r3, [r2, #8]
 80058e4:	07db      	lsls	r3, r3, #31
 80058e6:	d50f      	bpl.n	8005908 <HAL_SPI_TransmitReceive+0x132>
 80058e8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	b15b      	cbz	r3, 8005908 <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058f2:	68d2      	ldr	r2, [r2, #12]
 80058f4:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058f8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80058fa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29b      	uxth	r3, r3
 8005902:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005906:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005908:	f7fd faa6 	bl	8002e58 <HAL_GetTick>
 800590c:	eba0 0008 	sub.w	r0, r0, r8
 8005910:	4287      	cmp	r7, r0
 8005912:	d8bf      	bhi.n	8005894 <HAL_SPI_TransmitReceive+0xbe>
 8005914:	1c7e      	adds	r6, r7, #1
 8005916:	d0bd      	beq.n	8005894 <HAL_SPI_TransmitReceive+0xbe>
        errorcode = HAL_TIMEOUT;
 8005918:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800591a:	2301      	movs	r3, #1
 800591c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005920:	2300      	movs	r3, #0
 8005922:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800592a:	b109      	cbz	r1, 8005930 <HAL_SPI_TransmitReceive+0x15a>
 800592c:	2e01      	cmp	r6, #1
 800592e:	d10a      	bne.n	8005946 <HAL_SPI_TransmitReceive+0x170>
      if (hspi->TxXferCount > 1U)
 8005930:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005932:	2b01      	cmp	r3, #1
 8005934:	d94e      	bls.n	80059d4 <HAL_SPI_TransmitReceive+0x1fe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005936:	f835 3b02 	ldrh.w	r3, [r5], #2
 800593a:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 800593c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800593e:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005940:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8005942:	b29b      	uxth	r3, r3
 8005944:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005946:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005948:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800594a:	b29b      	uxth	r3, r3
 800594c:	b923      	cbnz	r3, 8005958 <HAL_SPI_TransmitReceive+0x182>
 800594e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0a4      	beq.n	80058a2 <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005958:	6822      	ldr	r2, [r4, #0]
 800595a:	6893      	ldr	r3, [r2, #8]
 800595c:	0798      	lsls	r0, r3, #30
 800595e:	d510      	bpl.n	8005982 <HAL_SPI_TransmitReceive+0x1ac>
 8005960:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005962:	b29b      	uxth	r3, r3
 8005964:	b16b      	cbz	r3, 8005982 <HAL_SPI_TransmitReceive+0x1ac>
 8005966:	b165      	cbz	r5, 8005982 <HAL_SPI_TransmitReceive+0x1ac>
        if (hspi->TxXferCount > 1U)
 8005968:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800596a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800596c:	2901      	cmp	r1, #1
 800596e:	d939      	bls.n	80059e4 <HAL_SPI_TransmitReceive+0x20e>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005970:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005974:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005976:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005978:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800597a:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800597c:	b29b      	uxth	r3, r3
 800597e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005980:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005982:	6822      	ldr	r2, [r4, #0]
 8005984:	6893      	ldr	r3, [r2, #8]
 8005986:	07d9      	lsls	r1, r3, #31
 8005988:	d51b      	bpl.n	80059c2 <HAL_SPI_TransmitReceive+0x1ec>
 800598a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800598e:	b29b      	uxth	r3, r3
 8005990:	b1bb      	cbz	r3, 80059c2 <HAL_SPI_TransmitReceive+0x1ec>
        if (hspi->RxXferCount > 1U)
 8005992:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8005996:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005998:	2901      	cmp	r1, #1
 800599a:	d92b      	bls.n	80059f4 <HAL_SPI_TransmitReceive+0x21e>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800599c:	68d1      	ldr	r1, [r2, #12]
 800599e:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80059a2:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80059a4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80059a8:	3b02      	subs	r3, #2
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80059b0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d803      	bhi.n	80059c0 <HAL_SPI_TransmitReceive+0x1ea>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059b8:	6853      	ldr	r3, [r2, #4]
 80059ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059be:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 80059c0:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059c2:	f7fd fa49 	bl	8002e58 <HAL_GetTick>
 80059c6:	eba0 0008 	sub.w	r0, r0, r8
 80059ca:	4287      	cmp	r7, r0
 80059cc:	d8bc      	bhi.n	8005948 <HAL_SPI_TransmitReceive+0x172>
 80059ce:	1c7b      	adds	r3, r7, #1
 80059d0:	d0ba      	beq.n	8005948 <HAL_SPI_TransmitReceive+0x172>
 80059d2:	e7a1      	b.n	8005918 <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059d4:	782b      	ldrb	r3, [r5, #0]
 80059d6:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr++;
 80059d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059da:	3301      	adds	r3, #1
 80059dc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80059de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059e0:	3b01      	subs	r3, #1
 80059e2:	e7ae      	b.n	8005942 <HAL_SPI_TransmitReceive+0x16c>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80059e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059ea:	3301      	adds	r3, #1
 80059ec:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80059ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059f0:	3b01      	subs	r3, #1
 80059f2:	e7c3      	b.n	800597c <HAL_SPI_TransmitReceive+0x1a6>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059f4:	7b12      	ldrb	r2, [r2, #12]
 80059f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80059f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059fa:	3301      	adds	r3, #1
 80059fc:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80059fe:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8005a0a:	e7d9      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x1ea>
    errorcode = HAL_BUSY;
 8005a0c:	2002      	movs	r0, #2
 8005a0e:	e784      	b.n	800591a <HAL_SPI_TransmitReceive+0x144>
  __HAL_LOCK(hspi);
 8005a10:	2002      	movs	r0, #2
 8005a12:	e788      	b.n	8005926 <HAL_SPI_TransmitReceive+0x150>

08005a14 <HAL_SPI_GetState>:
  return hspi->State;
 8005a14:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8005a18:	4770      	bx	lr
	...

08005a1c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a1c:	6a03      	ldr	r3, [r0, #32]
 8005a1e:	f023 0301 	bic.w	r3, r3, #1
 8005a22:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a24:	6a03      	ldr	r3, [r0, #32]
{
 8005a26:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a2a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a32:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005a36:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a38:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005a3a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005a3e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a40:	4d1b      	ldr	r5, [pc, #108]	; (8005ab0 <TIM_OC1_SetConfig+0x94>)
 8005a42:	42a8      	cmp	r0, r5
 8005a44:	d00f      	beq.n	8005a66 <TIM_OC1_SetConfig+0x4a>
 8005a46:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005a4a:	42a8      	cmp	r0, r5
 8005a4c:	d00b      	beq.n	8005a66 <TIM_OC1_SetConfig+0x4a>
 8005a4e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005a52:	42a8      	cmp	r0, r5
 8005a54:	d007      	beq.n	8005a66 <TIM_OC1_SetConfig+0x4a>
 8005a56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005a5a:	42a8      	cmp	r0, r5
 8005a5c:	d003      	beq.n	8005a66 <TIM_OC1_SetConfig+0x4a>
 8005a5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005a62:	42a8      	cmp	r0, r5
 8005a64:	d11e      	bne.n	8005aa4 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a66:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a68:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005a6c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6e:	4d10      	ldr	r5, [pc, #64]	; (8005ab0 <TIM_OC1_SetConfig+0x94>)
 8005a70:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a72:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a76:	d00f      	beq.n	8005a98 <TIM_OC1_SetConfig+0x7c>
 8005a78:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005a7c:	42a8      	cmp	r0, r5
 8005a7e:	d00b      	beq.n	8005a98 <TIM_OC1_SetConfig+0x7c>
 8005a80:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005a84:	42a8      	cmp	r0, r5
 8005a86:	d007      	beq.n	8005a98 <TIM_OC1_SetConfig+0x7c>
 8005a88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005a8c:	42a8      	cmp	r0, r5
 8005a8e:	d003      	beq.n	8005a98 <TIM_OC1_SetConfig+0x7c>
 8005a90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005a94:	42a8      	cmp	r0, r5
 8005a96:	d105      	bne.n	8005aa4 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a98:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a9c:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8005aa0:	4334      	orrs	r4, r6
 8005aa2:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aa6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aa8:	684a      	ldr	r2, [r1, #4]
 8005aaa:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aac:	6203      	str	r3, [r0, #32]
}
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	40012c00 	.word	0x40012c00

08005ab4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ab4:	6a03      	ldr	r3, [r0, #32]
 8005ab6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aba:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005abc:	6a03      	ldr	r3, [r0, #32]
{
 8005abe:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ac2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ac4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ac6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005aca:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005ace:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ad0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005ad2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ad6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ada:	4d16      	ldr	r5, [pc, #88]	; (8005b34 <TIM_OC3_SetConfig+0x80>)
 8005adc:	42a8      	cmp	r0, r5
 8005ade:	d003      	beq.n	8005ae8 <TIM_OC3_SetConfig+0x34>
 8005ae0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005ae4:	42a8      	cmp	r0, r5
 8005ae6:	d10d      	bne.n	8005b04 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ae8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af2:	4d10      	ldr	r5, [pc, #64]	; (8005b34 <TIM_OC3_SetConfig+0x80>)
 8005af4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8005af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afa:	d00e      	beq.n	8005b1a <TIM_OC3_SetConfig+0x66>
 8005afc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005b00:	42a8      	cmp	r0, r5
 8005b02:	d00a      	beq.n	8005b1a <TIM_OC3_SetConfig+0x66>
 8005b04:	4d0c      	ldr	r5, [pc, #48]	; (8005b38 <TIM_OC3_SetConfig+0x84>)
 8005b06:	42a8      	cmp	r0, r5
 8005b08:	d007      	beq.n	8005b1a <TIM_OC3_SetConfig+0x66>
 8005b0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b0e:	42a8      	cmp	r0, r5
 8005b10:	d003      	beq.n	8005b1a <TIM_OC3_SetConfig+0x66>
 8005b12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b16:	42a8      	cmp	r0, r5
 8005b18:	d106      	bne.n	8005b28 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b1a:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b1e:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8005b22:	4334      	orrs	r4, r6
 8005b24:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b28:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b2a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b2c:	684a      	ldr	r2, [r1, #4]
 8005b2e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b30:	6203      	str	r3, [r0, #32]
}
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	40012c00 	.word	0x40012c00
 8005b38:	40014000 	.word	0x40014000

08005b3c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b3c:	6a03      	ldr	r3, [r0, #32]
 8005b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b42:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b44:	6a03      	ldr	r3, [r0, #32]
{
 8005b46:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b48:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b4a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b4c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b4e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005b52:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b56:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b5a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005b5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b60:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b64:	4d0e      	ldr	r5, [pc, #56]	; (8005ba0 <TIM_OC4_SetConfig+0x64>)
 8005b66:	42a8      	cmp	r0, r5
 8005b68:	d00f      	beq.n	8005b8a <TIM_OC4_SetConfig+0x4e>
 8005b6a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005b6e:	42a8      	cmp	r0, r5
 8005b70:	d00b      	beq.n	8005b8a <TIM_OC4_SetConfig+0x4e>
 8005b72:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005b76:	42a8      	cmp	r0, r5
 8005b78:	d007      	beq.n	8005b8a <TIM_OC4_SetConfig+0x4e>
 8005b7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b7e:	42a8      	cmp	r0, r5
 8005b80:	d003      	beq.n	8005b8a <TIM_OC4_SetConfig+0x4e>
 8005b82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b86:	42a8      	cmp	r0, r5
 8005b88:	d104      	bne.n	8005b94 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b8a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b8c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b90:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b94:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b96:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b98:	684a      	ldr	r2, [r1, #4]
 8005b9a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9c:	6203      	str	r3, [r0, #32]
}
 8005b9e:	bd30      	pop	{r4, r5, pc}
 8005ba0:	40012c00 	.word	0x40012c00

08005ba4 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ba4:	6a03      	ldr	r3, [r0, #32]
 8005ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005baa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bac:	6a03      	ldr	r3, [r0, #32]
{
 8005bae:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bb2:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bb6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005bba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005bbe:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005bc0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005bc2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005bc6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bca:	4d0f      	ldr	r5, [pc, #60]	; (8005c08 <TIM_OC5_SetConfig+0x64>)
 8005bcc:	42a8      	cmp	r0, r5
 8005bce:	d00f      	beq.n	8005bf0 <TIM_OC5_SetConfig+0x4c>
 8005bd0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005bd4:	42a8      	cmp	r0, r5
 8005bd6:	d00b      	beq.n	8005bf0 <TIM_OC5_SetConfig+0x4c>
 8005bd8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005bdc:	42a8      	cmp	r0, r5
 8005bde:	d007      	beq.n	8005bf0 <TIM_OC5_SetConfig+0x4c>
 8005be0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005be4:	42a8      	cmp	r0, r5
 8005be6:	d003      	beq.n	8005bf0 <TIM_OC5_SetConfig+0x4c>
 8005be8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bec:	42a8      	cmp	r0, r5
 8005bee:	d104      	bne.n	8005bfa <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005bf0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bf2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005bf6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bfc:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bfe:	684a      	ldr	r2, [r1, #4]
 8005c00:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c02:	6203      	str	r3, [r0, #32]
}
 8005c04:	bd30      	pop	{r4, r5, pc}
 8005c06:	bf00      	nop
 8005c08:	40012c00 	.word	0x40012c00

08005c0c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c0c:	6a03      	ldr	r3, [r0, #32]
 8005c0e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c12:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c14:	6a03      	ldr	r3, [r0, #32]
{
 8005c16:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c18:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c1a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c1e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005c22:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c26:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c2a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c30:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c34:	4d0e      	ldr	r5, [pc, #56]	; (8005c70 <TIM_OC6_SetConfig+0x64>)
 8005c36:	42a8      	cmp	r0, r5
 8005c38:	d00f      	beq.n	8005c5a <TIM_OC6_SetConfig+0x4e>
 8005c3a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005c3e:	42a8      	cmp	r0, r5
 8005c40:	d00b      	beq.n	8005c5a <TIM_OC6_SetConfig+0x4e>
 8005c42:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005c46:	42a8      	cmp	r0, r5
 8005c48:	d007      	beq.n	8005c5a <TIM_OC6_SetConfig+0x4e>
 8005c4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c4e:	42a8      	cmp	r0, r5
 8005c50:	d003      	beq.n	8005c5a <TIM_OC6_SetConfig+0x4e>
 8005c52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c56:	42a8      	cmp	r0, r5
 8005c58:	d104      	bne.n	8005c64 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c5a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c5c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c60:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c64:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c66:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c68:	684a      	ldr	r2, [r1, #4]
 8005c6a:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6c:	6203      	str	r3, [r0, #32]
}
 8005c6e:	bd30      	pop	{r4, r5, pc}
 8005c70:	40012c00 	.word	0x40012c00

08005c74 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c74:	6803      	ldr	r3, [r0, #0]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005c76:	480a      	ldr	r0, [pc, #40]	; (8005ca0 <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005c80:	6899      	ldr	r1, [r3, #8]
 8005c82:	4001      	ands	r1, r0
 8005c84:	2906      	cmp	r1, #6
 8005c86:	d008      	beq.n	8005c9a <HAL_TIM_Base_Start_IT+0x26>
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	4002      	ands	r2, r0
 8005c8c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005c90:	bf1e      	ittt	ne
 8005c92:	681a      	ldrne	r2, [r3, #0]
 8005c94:	f042 0201 	orrne.w	r2, r2, #1
 8005c98:	601a      	strne	r2, [r3, #0]
}
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	00010007 	.word	0x00010007

08005ca4 <HAL_TIM_ReadCapturedValue>:
  __HAL_LOCK(htim);
 8005ca4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d01c      	beq.n	8005ce6 <HAL_TIM_ReadCapturedValue+0x42>
  switch (Channel)
 8005cac:	290c      	cmp	r1, #12
 8005cae:	d818      	bhi.n	8005ce2 <HAL_TIM_ReadCapturedValue+0x3e>
 8005cb0:	e8df f001 	tbb	[pc, r1]
 8005cb4:	17171707 	.word	0x17171707
 8005cb8:	1717170e 	.word	0x1717170e
 8005cbc:	17171711 	.word	0x17171711
 8005cc0:	14          	.byte	0x14
 8005cc1:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8005cc2:	6803      	ldr	r3, [r0, #0]
 8005cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  __HAL_UNLOCK(htim);
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8005cd0:	6803      	ldr	r3, [r0, #0]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      break;
 8005cd4:	e7f7      	b.n	8005cc6 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR3;
 8005cd6:	6803      	ldr	r3, [r0, #0]
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      break;
 8005cda:	e7f4      	b.n	8005cc6 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR4;
 8005cdc:	6803      	ldr	r3, [r0, #0]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      break;
 8005ce0:	e7f1      	b.n	8005cc6 <HAL_TIM_ReadCapturedValue+0x22>
  uint32_t tmpreg = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e7ef      	b.n	8005cc6 <HAL_TIM_ReadCapturedValue+0x22>
  __HAL_LOCK(htim);
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e7f0      	b.n	8005ccc <HAL_TIM_ReadCapturedValue+0x28>

08005cea <HAL_TIM_IC_CaptureCallback>:
 8005cea:	4770      	bx	lr

08005cec <HAL_TIM_PWM_PulseFinishedCallback>:
 8005cec:	4770      	bx	lr

08005cee <HAL_TIM_TriggerCallback>:
 8005cee:	4770      	bx	lr

08005cf0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cf0:	6803      	ldr	r3, [r0, #0]
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	0791      	lsls	r1, r2, #30
{
 8005cf6:	b510      	push	{r4, lr}
 8005cf8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cfa:	d50f      	bpl.n	8005d1c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	0792      	lsls	r2, r2, #30
 8005d00:	d50c      	bpl.n	8005d1c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d02:	f06f 0202 	mvn.w	r2, #2
 8005d06:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d08:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d0a:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d0c:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d0e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d10:	f000 8085 	beq.w	8005e1e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005d14:	f7ff ffe9 	bl	8005cea <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	0752      	lsls	r2, r2, #29
 8005d22:	d510      	bpl.n	8005d46 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	0750      	lsls	r0, r2, #29
 8005d28:	d50d      	bpl.n	8005d46 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d2a:	f06f 0204 	mvn.w	r2, #4
 8005d2e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d30:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d32:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d34:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d38:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d3c:	d075      	beq.n	8005e2a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3e:	f7ff ffd4 	bl	8005cea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d42:	2300      	movs	r3, #0
 8005d44:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	0711      	lsls	r1, r2, #28
 8005d4c:	d50f      	bpl.n	8005d6e <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	0712      	lsls	r2, r2, #28
 8005d52:	d50c      	bpl.n	8005d6e <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d54:	f06f 0208 	mvn.w	r2, #8
 8005d58:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d5a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d5c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d5e:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d60:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005d62:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d64:	d067      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005d66:	f7ff ffc0 	bl	8005cea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	691a      	ldr	r2, [r3, #16]
 8005d72:	06d0      	lsls	r0, r2, #27
 8005d74:	d510      	bpl.n	8005d98 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	06d1      	lsls	r1, r2, #27
 8005d7a:	d50d      	bpl.n	8005d98 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d7c:	f06f 0210 	mvn.w	r2, #16
 8005d80:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d82:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d84:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d86:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d8a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d8e:	d058      	beq.n	8005e42 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8005d90:	f7ff ffab 	bl	8005cea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d94:	2300      	movs	r3, #0
 8005d96:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	07d2      	lsls	r2, r2, #31
 8005d9e:	d508      	bpl.n	8005db2 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	07d0      	lsls	r0, r2, #31
 8005da4:	d505      	bpl.n	8005db2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005da6:	f06f 0201 	mvn.w	r2, #1
 8005daa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dac:	4620      	mov	r0, r4
 8005dae:	f7fa fd01 	bl	80007b4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	0611      	lsls	r1, r2, #24
 8005db8:	d508      	bpl.n	8005dcc <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	0612      	lsls	r2, r2, #24
 8005dbe:	d505      	bpl.n	8005dcc <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dc4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f000 f95b 	bl	8006082 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	05d0      	lsls	r0, r2, #23
 8005dd2:	d508      	bpl.n	8005de6 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	0611      	lsls	r1, r2, #24
 8005dd8:	d505      	bpl.n	8005de6 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005dda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dde:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 f94f 	bl	8006084 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	0652      	lsls	r2, r2, #25
 8005dec:	d508      	bpl.n	8005e00 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	0650      	lsls	r0, r2, #25
 8005df2:	d505      	bpl.n	8005e00 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005df4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005df8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f7ff ff77 	bl	8005cee <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	0691      	lsls	r1, r2, #26
 8005e06:	d522      	bpl.n	8005e4e <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	0692      	lsls	r2, r2, #26
 8005e0c:	d51f      	bpl.n	8005e4e <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e0e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8005e12:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e14:	611a      	str	r2, [r3, #16]
}
 8005e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8005e1a:	f000 b931 	b.w	8006080 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e1e:	f7fa fcb5 	bl	800078c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e22:	4620      	mov	r0, r4
 8005e24:	f7ff ff62 	bl	8005cec <HAL_TIM_PWM_PulseFinishedCallback>
 8005e28:	e776      	b.n	8005d18 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2a:	f7fa fcaf 	bl	800078c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f7ff ff5c 	bl	8005cec <HAL_TIM_PWM_PulseFinishedCallback>
 8005e34:	e785      	b.n	8005d42 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e36:	f7fa fca9 	bl	800078c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f7ff ff56 	bl	8005cec <HAL_TIM_PWM_PulseFinishedCallback>
 8005e40:	e793      	b.n	8005d6a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e42:	f7fa fca3 	bl	800078c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e46:	4620      	mov	r0, r4
 8005e48:	f7ff ff50 	bl	8005cec <HAL_TIM_PWM_PulseFinishedCallback>
 8005e4c:	e7a2      	b.n	8005d94 <HAL_TIM_IRQHandler+0xa4>
}
 8005e4e:	bd10      	pop	{r4, pc}

08005e50 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e50:	4a30      	ldr	r2, [pc, #192]	; (8005f14 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005e52:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e54:	4290      	cmp	r0, r2
 8005e56:	d012      	beq.n	8005e7e <TIM_Base_SetConfig+0x2e>
 8005e58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005e5c:	d00f      	beq.n	8005e7e <TIM_Base_SetConfig+0x2e>
 8005e5e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005e62:	4290      	cmp	r0, r2
 8005e64:	d00b      	beq.n	8005e7e <TIM_Base_SetConfig+0x2e>
 8005e66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e6a:	4290      	cmp	r0, r2
 8005e6c:	d007      	beq.n	8005e7e <TIM_Base_SetConfig+0x2e>
 8005e6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e72:	4290      	cmp	r0, r2
 8005e74:	d003      	beq.n	8005e7e <TIM_Base_SetConfig+0x2e>
 8005e76:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005e7a:	4290      	cmp	r0, r2
 8005e7c:	d119      	bne.n	8005eb2 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8005e7e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005e84:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e86:	4a23      	ldr	r2, [pc, #140]	; (8005f14 <TIM_Base_SetConfig+0xc4>)
 8005e88:	4290      	cmp	r0, r2
 8005e8a:	d01d      	beq.n	8005ec8 <TIM_Base_SetConfig+0x78>
 8005e8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005e90:	d01a      	beq.n	8005ec8 <TIM_Base_SetConfig+0x78>
 8005e92:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005e96:	4290      	cmp	r0, r2
 8005e98:	d016      	beq.n	8005ec8 <TIM_Base_SetConfig+0x78>
 8005e9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e9e:	4290      	cmp	r0, r2
 8005ea0:	d012      	beq.n	8005ec8 <TIM_Base_SetConfig+0x78>
 8005ea2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ea6:	4290      	cmp	r0, r2
 8005ea8:	d00e      	beq.n	8005ec8 <TIM_Base_SetConfig+0x78>
 8005eaa:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005eae:	4290      	cmp	r0, r2
 8005eb0:	d00a      	beq.n	8005ec8 <TIM_Base_SetConfig+0x78>
 8005eb2:	4a19      	ldr	r2, [pc, #100]	; (8005f18 <TIM_Base_SetConfig+0xc8>)
 8005eb4:	4290      	cmp	r0, r2
 8005eb6:	d007      	beq.n	8005ec8 <TIM_Base_SetConfig+0x78>
 8005eb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ebc:	4290      	cmp	r0, r2
 8005ebe:	d003      	beq.n	8005ec8 <TIM_Base_SetConfig+0x78>
 8005ec0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ec4:	4290      	cmp	r0, r2
 8005ec6:	d103      	bne.n	8005ed0 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ec8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ece:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ed0:	694a      	ldr	r2, [r1, #20]
 8005ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005ed8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eda:	688b      	ldr	r3, [r1, #8]
 8005edc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005ede:	680b      	ldr	r3, [r1, #0]
 8005ee0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ee2:	4b0c      	ldr	r3, [pc, #48]	; (8005f14 <TIM_Base_SetConfig+0xc4>)
 8005ee4:	4298      	cmp	r0, r3
 8005ee6:	d00f      	beq.n	8005f08 <TIM_Base_SetConfig+0xb8>
 8005ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eec:	4298      	cmp	r0, r3
 8005eee:	d00b      	beq.n	8005f08 <TIM_Base_SetConfig+0xb8>
 8005ef0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005ef4:	4298      	cmp	r0, r3
 8005ef6:	d007      	beq.n	8005f08 <TIM_Base_SetConfig+0xb8>
 8005ef8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005efc:	4298      	cmp	r0, r3
 8005efe:	d003      	beq.n	8005f08 <TIM_Base_SetConfig+0xb8>
 8005f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f04:	4298      	cmp	r0, r3
 8005f06:	d101      	bne.n	8005f0c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8005f08:	690b      	ldr	r3, [r1, #16]
 8005f0a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	6143      	str	r3, [r0, #20]
}
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40012c00 	.word	0x40012c00
 8005f18:	40014000 	.word	0x40014000

08005f1c <HAL_TIM_Base_Init>:
{
 8005f1c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005f1e:	4604      	mov	r4, r0
 8005f20:	b1a0      	cbz	r0, 8005f4c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005f22:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005f26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f2a:	b91b      	cbnz	r3, 8005f34 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005f2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005f30:	f7fb fa3c 	bl	80013ac <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	2302      	movs	r3, #2
 8005f36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f3a:	6820      	ldr	r0, [r4, #0]
 8005f3c:	1d21      	adds	r1, r4, #4
 8005f3e:	f7ff ff87 	bl	8005e50 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005f48:	2000      	movs	r0, #0
}
 8005f4a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005f4c:	2001      	movs	r0, #1
 8005f4e:	e7fc      	b.n	8005f4a <HAL_TIM_Base_Init+0x2e>

08005f50 <HAL_TIM_OC_Init>:
{
 8005f50:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005f52:	4604      	mov	r4, r0
 8005f54:	b1a0      	cbz	r0, 8005f80 <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005f56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005f5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f5e:	b91b      	cbnz	r3, 8005f68 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005f60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8005f64:	f7fb fa5a 	bl	800141c <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005f6e:	6820      	ldr	r0, [r4, #0]
 8005f70:	1d21      	adds	r1, r4, #4
 8005f72:	f7ff ff6d 	bl	8005e50 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005f76:	2301      	movs	r3, #1
 8005f78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005f7c:	2000      	movs	r0, #0
}
 8005f7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005f80:	2001      	movs	r0, #1
 8005f82:	e7fc      	b.n	8005f7e <HAL_TIM_OC_Init+0x2e>

08005f84 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f84:	6a03      	ldr	r3, [r0, #32]
 8005f86:	f023 0310 	bic.w	r3, r3, #16
 8005f8a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005f8c:	6a03      	ldr	r3, [r0, #32]
{
 8005f8e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8005f90:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005f92:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f96:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005f9a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f9e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fa2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005fa4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fa8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fac:	4d16      	ldr	r5, [pc, #88]	; (8006008 <TIM_OC2_SetConfig+0x84>)
 8005fae:	42a8      	cmp	r0, r5
 8005fb0:	d003      	beq.n	8005fba <TIM_OC2_SetConfig+0x36>
 8005fb2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005fb6:	42a8      	cmp	r0, r5
 8005fb8:	d10d      	bne.n	8005fd6 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fc0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc4:	4d10      	ldr	r5, [pc, #64]	; (8006008 <TIM_OC2_SetConfig+0x84>)
 8005fc6:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fcc:	d00e      	beq.n	8005fec <TIM_OC2_SetConfig+0x68>
 8005fce:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005fd2:	42a8      	cmp	r0, r5
 8005fd4:	d00a      	beq.n	8005fec <TIM_OC2_SetConfig+0x68>
 8005fd6:	4d0d      	ldr	r5, [pc, #52]	; (800600c <TIM_OC2_SetConfig+0x88>)
 8005fd8:	42a8      	cmp	r0, r5
 8005fda:	d007      	beq.n	8005fec <TIM_OC2_SetConfig+0x68>
 8005fdc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005fe0:	42a8      	cmp	r0, r5
 8005fe2:	d003      	beq.n	8005fec <TIM_OC2_SetConfig+0x68>
 8005fe4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005fe8:	42a8      	cmp	r0, r5
 8005fea:	d106      	bne.n	8005ffa <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fec:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ff0:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8005ff4:	4334      	orrs	r4, r6
 8005ff6:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8005ffa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005ffc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005ffe:	684a      	ldr	r2, [r1, #4]
 8006000:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006002:	6203      	str	r3, [r0, #32]
}
 8006004:	bd70      	pop	{r4, r5, r6, pc}
 8006006:	bf00      	nop
 8006008:	40012c00 	.word	0x40012c00
 800600c:	40014000 	.word	0x40014000

08006010 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8006010:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006014:	2b01      	cmp	r3, #1
{
 8006016:	b510      	push	{r4, lr}
 8006018:	4604      	mov	r4, r0
 800601a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800601e:	d010      	beq.n	8006042 <HAL_TIM_OC_ConfigChannel+0x32>
 8006020:	2301      	movs	r3, #1
  switch (Channel)
 8006022:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8006024:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800602c:	d01c      	beq.n	8006068 <HAL_TIM_OC_ConfigChannel+0x58>
 800602e:	d809      	bhi.n	8006044 <HAL_TIM_OC_ConfigChannel+0x34>
 8006030:	b192      	cbz	r2, 8006058 <HAL_TIM_OC_ConfigChannel+0x48>
 8006032:	2a04      	cmp	r2, #4
 8006034:	d014      	beq.n	8006060 <HAL_TIM_OC_ConfigChannel+0x50>
  htim->State = HAL_TIM_STATE_READY;
 8006036:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8006038:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800603a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800603e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006042:	bd10      	pop	{r4, pc}
  switch (Channel)
 8006044:	2a10      	cmp	r2, #16
 8006046:	d013      	beq.n	8006070 <HAL_TIM_OC_ConfigChannel+0x60>
 8006048:	2a14      	cmp	r2, #20
 800604a:	d015      	beq.n	8006078 <HAL_TIM_OC_ConfigChannel+0x68>
 800604c:	2a0c      	cmp	r2, #12
 800604e:	d1f2      	bne.n	8006036 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006050:	6820      	ldr	r0, [r4, #0]
 8006052:	f7ff fd73 	bl	8005b3c <TIM_OC4_SetConfig>
      break;
 8006056:	e7ee      	b.n	8006036 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006058:	6820      	ldr	r0, [r4, #0]
 800605a:	f7ff fcdf 	bl	8005a1c <TIM_OC1_SetConfig>
      break;
 800605e:	e7ea      	b.n	8006036 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006060:	6820      	ldr	r0, [r4, #0]
 8006062:	f7ff ff8f 	bl	8005f84 <TIM_OC2_SetConfig>
      break;
 8006066:	e7e6      	b.n	8006036 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006068:	6820      	ldr	r0, [r4, #0]
 800606a:	f7ff fd23 	bl	8005ab4 <TIM_OC3_SetConfig>
      break;
 800606e:	e7e2      	b.n	8006036 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006070:	6820      	ldr	r0, [r4, #0]
 8006072:	f7ff fd97 	bl	8005ba4 <TIM_OC5_SetConfig>
      break;
 8006076:	e7de      	b.n	8006036 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006078:	6820      	ldr	r0, [r4, #0]
 800607a:	f7ff fdc7 	bl	8005c0c <TIM_OC6_SetConfig>
      break;
 800607e:	e7da      	b.n	8006036 <HAL_TIM_OC_ConfigChannel+0x26>

08006080 <HAL_TIMEx_CommutationCallback>:
 8006080:	4770      	bx	lr

08006082 <HAL_TIMEx_BreakCallback>:
 8006082:	4770      	bx	lr

08006084 <HAL_TIMEx_Break2Callback>:
 8006084:	4770      	bx	lr
	...

08006088 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006088:	4b0a      	ldr	r3, [pc, #40]	; (80060b4 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800608a:	3b01      	subs	r3, #1
 800608c:	d00f      	beq.n	80060ae <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800608e:	6902      	ldr	r2, [r0, #16]
 8006090:	2a00      	cmp	r2, #0
 8006092:	dafa      	bge.n	800608a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006094:	6903      	ldr	r3, [r0, #16]
 8006096:	4a07      	ldr	r2, [pc, #28]	; (80060b4 <USB_CoreReset+0x2c>)
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800609e:	3a01      	subs	r2, #1
 80060a0:	d005      	beq.n	80060ae <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060a2:	6903      	ldr	r3, [r0, #16]
 80060a4:	f013 0301 	ands.w	r3, r3, #1
 80060a8:	d1f9      	bne.n	800609e <USB_CoreReset+0x16>

  return HAL_OK;
 80060aa:	4618      	mov	r0, r3
 80060ac:	4770      	bx	lr
      return HAL_TIMEOUT;
 80060ae:	2003      	movs	r0, #3
}
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	00030d41 	.word	0x00030d41

080060b8 <USB_CoreInit>:
{
 80060b8:	b084      	sub	sp, #16
 80060ba:	b538      	push	{r3, r4, r5, lr}
 80060bc:	ad05      	add	r5, sp, #20
 80060be:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c4:	2b01      	cmp	r3, #1
{
 80060c6:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060c8:	d11b      	bne.n	8006102 <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80060cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060d0:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060d2:	68c3      	ldr	r3, [r0, #12]
 80060d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80060d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060dc:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060de:	68c3      	ldr	r3, [r0, #12]
 80060e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80060e4:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80060e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060e8:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060ea:	bf02      	ittt	eq
 80060ec:	68c3      	ldreq	r3, [r0, #12]
 80060ee:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80060f2:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80060f4:	f7ff ffc8 	bl	8006088 <USB_CoreReset>
}
 80060f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060fc:	2000      	movs	r0, #0
 80060fe:	b004      	add	sp, #16
 8006100:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006102:	68c3      	ldr	r3, [r0, #12]
 8006104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006108:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 800610a:	f7ff ffbd 	bl	8006088 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800610e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006112:	63a3      	str	r3, [r4, #56]	; 0x38
 8006114:	e7f0      	b.n	80060f8 <USB_CoreInit+0x40>

08006116 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006116:	6883      	ldr	r3, [r0, #8]
 8006118:	f043 0301 	orr.w	r3, r3, #1
 800611c:	6083      	str	r3, [r0, #8]
}
 800611e:	2000      	movs	r0, #0
 8006120:	4770      	bx	lr

08006122 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006122:	6883      	ldr	r3, [r0, #8]
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	6083      	str	r3, [r0, #8]
}
 800612a:	2000      	movs	r0, #0
 800612c:	4770      	bx	lr

0800612e <USB_SetCurrentMode>:
{
 800612e:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006130:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006132:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006134:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006138:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800613a:	d108      	bne.n	800614e <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800613c:	68c3      	ldr	r3, [r0, #12]
 800613e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006142:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8006144:	2032      	movs	r0, #50	; 0x32
 8006146:	f7fa fb3d 	bl	80007c4 <HAL_Delay>
  return HAL_OK;
 800614a:	2000      	movs	r0, #0
}
 800614c:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800614e:	b919      	cbnz	r1, 8006158 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006150:	68c3      	ldr	r3, [r0, #12]
 8006152:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006156:	e7f4      	b.n	8006142 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8006158:	2001      	movs	r0, #1
 800615a:	e7f7      	b.n	800614c <USB_SetCurrentMode+0x1e>

0800615c <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800615c:	0189      	lsls	r1, r1, #6
 800615e:	f041 0120 	orr.w	r1, r1, #32
 8006162:	4a06      	ldr	r2, [pc, #24]	; (800617c <USB_FlushTxFifo+0x20>)
 8006164:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8006166:	3a01      	subs	r2, #1
 8006168:	d005      	beq.n	8006176 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800616a:	6903      	ldr	r3, [r0, #16]
 800616c:	f013 0320 	ands.w	r3, r3, #32
 8006170:	d1f9      	bne.n	8006166 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8006172:	4618      	mov	r0, r3
 8006174:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006176:	2003      	movs	r0, #3
}
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	00030d41 	.word	0x00030d41

08006180 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006180:	2310      	movs	r3, #16
 8006182:	4a06      	ldr	r2, [pc, #24]	; (800619c <USB_FlushRxFifo+0x1c>)
 8006184:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8006186:	3a01      	subs	r2, #1
 8006188:	d005      	beq.n	8006196 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800618a:	6903      	ldr	r3, [r0, #16]
 800618c:	f013 0310 	ands.w	r3, r3, #16
 8006190:	d1f9      	bne.n	8006186 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8006192:	4618      	mov	r0, r3
 8006194:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006196:	2003      	movs	r0, #3
}
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	00030d41 	.word	0x00030d41

080061a0 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80061a0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80061a4:	4319      	orrs	r1, r3
 80061a6:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80061aa:	2000      	movs	r0, #0
 80061ac:	4770      	bx	lr
	...

080061b0 <USB_DevInit>:
{
 80061b0:	b084      	sub	sp, #16
 80061b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b6:	4604      	mov	r4, r0
 80061b8:	a807      	add	r0, sp, #28
 80061ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80061be:	2300      	movs	r3, #0
 80061c0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80061c2:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 80061c4:	4619      	mov	r1, r3
 80061c6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80061ca:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80061ce:	3301      	adds	r3, #1
 80061d0:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80061d2:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80061d4:	d1f7      	bne.n	80061c6 <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80061d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061dc:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 80061de:	b95f      	cbnz	r7, 80061f8 <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80061e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061e6:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ee:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f6:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80061f8:	2500      	movs	r5, #0
 80061fa:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80061fe:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8006202:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006206:	2103      	movs	r1, #3
 8006208:	4620      	mov	r0, r4
 800620a:	f7ff ffc9 	bl	80061a0 <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800620e:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006212:	2110      	movs	r1, #16
 8006214:	4620      	mov	r0, r4
 8006216:	f7ff ffa1 	bl	800615c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800621a:	4620      	mov	r0, r4
 800621c:	f7ff ffb0 	bl	8006180 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 8006220:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006222:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 8006224:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8006226:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 8006228:	61f5      	str	r5, [r6, #28]
 800622a:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800622e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006232:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006236:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800623a:	4543      	cmp	r3, r8
 800623c:	d12f      	bne.n	800629e <USB_DevInit+0xee>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800623e:	2100      	movs	r1, #0
 8006240:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006244:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006246:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800624a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800624e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006252:	428b      	cmp	r3, r1
 8006254:	d134      	bne.n	80062c0 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006256:	6933      	ldr	r3, [r6, #16]
 8006258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800625c:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006262:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8006266:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006268:	69a3      	ldr	r3, [r4, #24]
 800626a:	f043 0310 	orr.w	r3, r3, #16
 800626e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006270:	69a2      	ldr	r2, [r4, #24]
 8006272:	4b1c      	ldr	r3, [pc, #112]	; (80062e4 <USB_DevInit+0x134>)
 8006274:	4313      	orrs	r3, r2
 8006276:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8006278:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800627a:	b11b      	cbz	r3, 8006284 <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800627c:	69a3      	ldr	r3, [r4, #24]
 800627e:	f043 0308 	orr.w	r3, r3, #8
 8006282:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8006284:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006286:	bf01      	itttt	eq
 8006288:	69a3      	ldreq	r3, [r4, #24]
 800628a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800628e:	f043 0304 	orreq.w	r3, r3, #4
 8006292:	61a3      	streq	r3, [r4, #24]
}
 8006294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006298:	2000      	movs	r0, #0
 800629a:	b004      	add	sp, #16
 800629c:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800629e:	f8d2 e000 	ldr.w	lr, [r2]
 80062a2:	f1be 0f00 	cmp.w	lr, #0
 80062a6:	da09      	bge.n	80062bc <USB_DevInit+0x10c>
      if (i == 0U)
 80062a8:	b933      	cbnz	r3, 80062b8 <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062aa:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062ac:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062ae:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062b0:	f8c2 c008 	str.w	ip, [r2, #8]
 80062b4:	3220      	adds	r2, #32
 80062b6:	e7c0      	b.n	800623a <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062b8:	6010      	str	r0, [r2, #0]
 80062ba:	e7f7      	b.n	80062ac <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 80062bc:	6011      	str	r1, [r2, #0]
 80062be:	e7f5      	b.n	80062ac <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062c0:	f8d2 8000 	ldr.w	r8, [r2]
 80062c4:	f1b8 0f00 	cmp.w	r8, #0
 80062c8:	da0a      	bge.n	80062e0 <USB_DevInit+0x130>
      if (i == 0U)
 80062ca:	b939      	cbnz	r1, 80062dc <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062cc:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80062d0:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062d2:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062d4:	f8c2 e008 	str.w	lr, [r2, #8]
 80062d8:	3220      	adds	r2, #32
 80062da:	e7ba      	b.n	8006252 <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062dc:	6015      	str	r5, [r2, #0]
 80062de:	e7f7      	b.n	80062d0 <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062e0:	6010      	str	r0, [r2, #0]
 80062e2:	e7f5      	b.n	80062d0 <USB_DevInit+0x120>
 80062e4:	803c3800 	.word	0x803c3800

080062e8 <USB_ActivateEndpoint>:
{
 80062e8:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80062ea:	780d      	ldrb	r5, [r1, #0]
 80062ec:	2401      	movs	r4, #1
 80062ee:	f005 030f 	and.w	r3, r5, #15
 80062f2:	409c      	lsls	r4, r3
  if (ep->is_in == 1U)
 80062f4:	784b      	ldrb	r3, [r1, #1]
 80062f6:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8006300:	69d3      	ldr	r3, [r2, #28]
  if (ep->is_in == 1U)
 8006302:	d118      	bne.n	8006336 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8006304:	431c      	orrs	r4, r3
 8006306:	61d4      	str	r4, [r2, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006308:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800630c:	041a      	lsls	r2, r3, #16
 800630e:	d410      	bmi.n	8006332 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006310:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006312:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006314:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8006318:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800631c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006324:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8006328:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 800632c:	4313      	orrs	r3, r2
 800632e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006332:	2000      	movs	r0, #0
 8006334:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 8006336:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800633a:	61d4      	str	r4, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800633c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006340:	041b      	lsls	r3, r3, #16
 8006342:	d4f6      	bmi.n	8006332 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006344:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 8006346:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006348:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800634c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006358:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800635c:	4313      	orrs	r3, r2
 800635e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006362:	e7e6      	b.n	8006332 <USB_ActivateEndpoint+0x4a>

08006364 <USB_DeactivateEndpoint>:
{
 8006364:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8006366:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8006368:	7849      	ldrb	r1, [r1, #1]
 800636a:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800636e:	f004 050f 	and.w	r5, r4, #15
 8006372:	2301      	movs	r3, #1
 8006374:	2901      	cmp	r1, #1
 8006376:	fa03 f305 	lsl.w	r3, r3, r5
 800637a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 800637e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
  if (ep->is_in == 1U)
 8006380:	d10d      	bne.n	800639e <USB_DeactivateEndpoint+0x3a>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8006382:	43db      	mvns	r3, r3
 8006384:	4019      	ands	r1, r3
 8006386:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8006388:	69d1      	ldr	r1, [r2, #28]
 800638a:	400b      	ands	r3, r1
 800638c:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800638e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8006392:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <USB_DeactivateEndpoint+0x58>)
 8006394:	4013      	ands	r3, r2
 8006396:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800639a:	2000      	movs	r0, #0
 800639c:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 800639e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80063a2:	4019      	ands	r1, r3
 80063a4:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 80063a6:	69d1      	ldr	r1, [r2, #28]
 80063a8:	400b      	ands	r3, r1
 80063aa:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80063ac:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80063b0:	4b03      	ldr	r3, [pc, #12]	; (80063c0 <USB_DeactivateEndpoint+0x5c>)
 80063b2:	4013      	ands	r3, r2
 80063b4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80063b8:	e7ef      	b.n	800639a <USB_DeactivateEndpoint+0x36>
 80063ba:	bf00      	nop
 80063bc:	ec337800 	.word	0xec337800
 80063c0:	eff37800 	.word	0xeff37800

080063c4 <USB_EP0StartXfer>:
{
 80063c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 80063c6:	784b      	ldrb	r3, [r1, #1]
 80063c8:	780a      	ldrb	r2, [r1, #0]
 80063ca:	694c      	ldr	r4, [r1, #20]
 80063cc:	4d2b      	ldr	r5, [pc, #172]	; (800647c <USB_EP0StartXfer+0xb8>)
 80063ce:	4e2c      	ldr	r6, [pc, #176]	; (8006480 <USB_EP0StartXfer+0xbc>)
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	eb00 1242 	add.w	r2, r0, r2, lsl #5
 80063d6:	d135      	bne.n	8006444 <USB_EP0StartXfer+0x80>
 80063d8:	f502 6310 	add.w	r3, r2, #2304	; 0x900
    if (ep->xfer_len == 0U)
 80063dc:	b9ec      	cbnz	r4, 800641a <USB_EP0StartXfer+0x56>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063de:	691c      	ldr	r4, [r3, #16]
 80063e0:	4025      	ands	r5, r4
 80063e2:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063e4:	691c      	ldr	r4, [r3, #16]
 80063e6:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80063ea:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063ec:	691c      	ldr	r4, [r3, #16]
 80063ee:	4026      	ands	r6, r4
 80063f0:	611e      	str	r6, [r3, #16]
    if (ep->xfer_len > 0U)
 80063f2:	694b      	ldr	r3, [r1, #20]
 80063f4:	b14b      	cbz	r3, 800640a <USB_EP0StartXfer+0x46>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 80063f6:	780b      	ldrb	r3, [r1, #0]
 80063f8:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 80063fc:	f003 010f 	and.w	r1, r3, #15
 8006400:	2301      	movs	r3, #1
 8006402:	408b      	lsls	r3, r1
 8006404:	4323      	orrs	r3, r4
 8006406:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800640a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800640e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006412:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
}
 8006416:	2000      	movs	r0, #0
 8006418:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800641a:	691f      	ldr	r7, [r3, #16]
 800641c:	403e      	ands	r6, r7
 800641e:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006420:	691e      	ldr	r6, [r3, #16]
 8006422:	4035      	ands	r5, r6
 8006424:	611d      	str	r5, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8006426:	688d      	ldr	r5, [r1, #8]
 8006428:	42a5      	cmp	r5, r4
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800642a:	691c      	ldr	r4, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 800642c:	bf38      	it	cc
 800642e:	614d      	strcc	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006430:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8006434:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006436:	694c      	ldr	r4, [r1, #20]
 8006438:	691d      	ldr	r5, [r3, #16]
 800643a:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800643e:	432c      	orrs	r4, r5
 8006440:	611c      	str	r4, [r3, #16]
 8006442:	e7d6      	b.n	80063f2 <USB_EP0StartXfer+0x2e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006444:	f502 6330 	add.w	r3, r2, #2816	; 0xb00
 8006448:	6918      	ldr	r0, [r3, #16]
 800644a:	4030      	ands	r0, r6
 800644c:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800644e:	6918      	ldr	r0, [r3, #16]
 8006450:	4028      	ands	r0, r5
 8006452:	6118      	str	r0, [r3, #16]
 8006454:	6888      	ldr	r0, [r1, #8]
    if (ep->xfer_len > 0U)
 8006456:	b104      	cbz	r4, 800645a <USB_EP0StartXfer+0x96>
      ep->xfer_len = ep->maxpacket;
 8006458:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800645a:	6919      	ldr	r1, [r3, #16]
 800645c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8006460:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006462:	6919      	ldr	r1, [r3, #16]
 8006464:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8006468:	4308      	orrs	r0, r1
 800646a:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800646c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8006470:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006474:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8006478:	e7cd      	b.n	8006416 <USB_EP0StartXfer+0x52>
 800647a:	bf00      	nop
 800647c:	e007ffff 	.word	0xe007ffff
 8006480:	fff80000 	.word	0xfff80000

08006484 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8006484:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8006486:	eb00 3202 	add.w	r2, r0, r2, lsl #12
  count32b = ((uint32_t)len + 3U) / 4U;
 800648a:	089b      	lsrs	r3, r3, #2
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800648c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006490:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  for (i = 0U; i < count32b; i++)
 8006494:	4299      	cmp	r1, r3
 8006496:	d101      	bne.n	800649c <USB_WritePacket+0x18>
}
 8006498:	2000      	movs	r0, #0
 800649a:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800649c:	f851 0b04 	ldr.w	r0, [r1], #4
 80064a0:	6010      	str	r0, [r2, #0]
 80064a2:	e7f7      	b.n	8006494 <USB_WritePacket+0x10>

080064a4 <USB_EPStartXfer>:
{
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 80064a6:	f891 c001 	ldrb.w	ip, [r1, #1]
 80064aa:	780c      	ldrb	r4, [r1, #0]
 80064ac:	694b      	ldr	r3, [r1, #20]
 80064ae:	78ce      	ldrb	r6, [r1, #3]
 80064b0:	4f4f      	ldr	r7, [pc, #316]	; (80065f0 <USB_EPStartXfer+0x14c>)
 80064b2:	f8df e144 	ldr.w	lr, [pc, #324]	; 80065f8 <USB_EPStartXfer+0x154>
 80064b6:	f1bc 0f01 	cmp.w	ip, #1
 80064ba:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80064be:	d15b      	bne.n	8006578 <USB_EPStartXfer+0xd4>
 80064c0:	f504 6210 	add.w	r2, r4, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064c4:	6915      	ldr	r5, [r2, #16]
    if (ep->xfer_len == 0U)
 80064c6:	b9d3      	cbnz	r3, 80064fe <USB_EPStartXfer+0x5a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064c8:	402f      	ands	r7, r5
 80064ca:	6117      	str	r7, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064cc:	6915      	ldr	r5, [r2, #16]
 80064ce:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80064d2:	6115      	str	r5, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064d4:	6915      	ldr	r5, [r2, #16]
    if (ep->type != EP_TYPE_ISOC)
 80064d6:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064d8:	ea05 050e 	and.w	r5, r5, lr
 80064dc:	6115      	str	r5, [r2, #16]
    if (ep->type != EP_TYPE_ISOC)
 80064de:	d030      	beq.n	8006542 <USB_EPStartXfer+0x9e>
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064e0:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 80064e4:	2e01      	cmp	r6, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064e6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80064ea:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 80064ee:	d104      	bne.n	80064fa <USB_EPStartXfer+0x56>
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80064f0:	780a      	ldrb	r2, [r1, #0]
 80064f2:	68c9      	ldr	r1, [r1, #12]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	f7ff ffc5 	bl	8006484 <USB_WritePacket>
}
 80064fa:	2000      	movs	r0, #0
 80064fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064fe:	ea05 050e 	and.w	r5, r5, lr
 8006502:	6115      	str	r5, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006504:	6915      	ldr	r5, [r2, #16]
 8006506:	402f      	ands	r7, r5
 8006508:	6117      	str	r7, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800650a:	688f      	ldr	r7, [r1, #8]
 800650c:	f8d2 e010 	ldr.w	lr, [r2, #16]
 8006510:	18fd      	adds	r5, r7, r3
 8006512:	3d01      	subs	r5, #1
 8006514:	fbb5 f7f7 	udiv	r7, r5, r7
 8006518:	4d36      	ldr	r5, [pc, #216]	; (80065f4 <USB_EPStartXfer+0x150>)
 800651a:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 800651e:	ea45 050e 	orr.w	r5, r5, lr
 8006522:	6115      	str	r5, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006524:	6917      	ldr	r7, [r2, #16]
 8006526:	f3c3 0512 	ubfx	r5, r3, #0, #19
 800652a:	433d      	orrs	r5, r7
      if (ep->type == EP_TYPE_ISOC)
 800652c:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800652e:	6115      	str	r5, [r2, #16]
      if (ep->type == EP_TYPE_ISOC)
 8006530:	d110      	bne.n	8006554 <USB_EPStartXfer+0xb0>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006532:	6915      	ldr	r5, [r2, #16]
 8006534:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8006538:	6115      	str	r5, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800653a:	6915      	ldr	r5, [r2, #16]
 800653c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006540:	6115      	str	r5, [r2, #16]
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006542:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8006546:	05d2      	lsls	r2, r2, #23
 8006548:	d50f      	bpl.n	800656a <USB_EPStartXfer+0xc6>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800654a:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
 800654e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006552:	e00e      	b.n	8006572 <USB_EPStartXfer+0xce>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8006554:	780a      	ldrb	r2, [r1, #0]
 8006556:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 800655a:	f002 020f 	and.w	r2, r2, #15
 800655e:	fa0c f202 	lsl.w	r2, ip, r2
 8006562:	433a      	orrs	r2, r7
 8006564:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8006568:	e7ba      	b.n	80064e0 <USB_EPStartXfer+0x3c>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800656a:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
 800656e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006572:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
 8006576:	e7b3      	b.n	80064e0 <USB_EPStartXfer+0x3c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006578:	f504 6530 	add.w	r5, r4, #2816	; 0xb00
 800657c:	692a      	ldr	r2, [r5, #16]
 800657e:	ea02 020e 	and.w	r2, r2, lr
 8006582:	612a      	str	r2, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006584:	692a      	ldr	r2, [r5, #16]
 8006586:	403a      	ands	r2, r7
 8006588:	612a      	str	r2, [r5, #16]
 800658a:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len == 0U)
 800658c:	b9f3      	cbnz	r3, 80065cc <USB_EPStartXfer+0x128>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800658e:	692b      	ldr	r3, [r5, #16]
 8006590:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006594:	431a      	orrs	r2, r3
 8006596:	612a      	str	r2, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006598:	692b      	ldr	r3, [r5, #16]
 800659a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800659e:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 80065a0:	2e01      	cmp	r6, #1
 80065a2:	d10c      	bne.n	80065be <USB_EPStartXfer+0x11a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065a4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80065a8:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80065ac:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80065b0:	bf0c      	ite	eq
 80065b2:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80065b6:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80065ba:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065be:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80065c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065c6:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
  return HAL_OK;
 80065ca:	e796      	b.n	80064fa <USB_EPStartXfer+0x56>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80065cc:	4909      	ldr	r1, [pc, #36]	; (80065f4 <USB_EPStartXfer+0x150>)
 80065ce:	692f      	ldr	r7, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065d0:	4413      	add	r3, r2
 80065d2:	3b01      	subs	r3, #1
 80065d4:	fbb3 f3f2 	udiv	r3, r3, r2
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80065d8:	ea01 41c3 	and.w	r1, r1, r3, lsl #19
 80065dc:	4339      	orrs	r1, r7
 80065de:	6129      	str	r1, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	6929      	ldr	r1, [r5, #16]
 80065e4:	435a      	muls	r2, r3
 80065e6:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80065ea:	430a      	orrs	r2, r1
 80065ec:	612a      	str	r2, [r5, #16]
 80065ee:	e7d7      	b.n	80065a0 <USB_EPStartXfer+0xfc>
 80065f0:	e007ffff 	.word	0xe007ffff
 80065f4:	1ff80000 	.word	0x1ff80000
 80065f8:	fff80000 	.word	0xfff80000

080065fc <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80065fc:	3203      	adds	r2, #3
 80065fe:	0892      	lsrs	r2, r2, #2
 8006600:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8006604:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8006608:	4291      	cmp	r1, r2
 800660a:	d101      	bne.n	8006610 <USB_ReadPacket+0x14>
}
 800660c:	4608      	mov	r0, r1
 800660e:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8006610:	6803      	ldr	r3, [r0, #0]
 8006612:	f841 3b04 	str.w	r3, [r1], #4
 8006616:	e7f7      	b.n	8006608 <USB_ReadPacket+0xc>

08006618 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8006618:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800661a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800661c:	2a01      	cmp	r2, #1
 800661e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006622:	d112      	bne.n	800664a <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006624:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8006628:	2a00      	cmp	r2, #0
 800662a:	db06      	blt.n	800663a <USB_EPSetStall+0x22>
 800662c:	b12b      	cbz	r3, 800663a <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800662e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006632:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006636:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800663a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800663e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006642:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006646:	2000      	movs	r0, #0
 8006648:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800664a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800664e:	2a00      	cmp	r2, #0
 8006650:	db06      	blt.n	8006660 <USB_EPSetStall+0x48>
 8006652:	b12b      	cbz	r3, 8006660 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006654:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006658:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800665c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006660:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006664:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006668:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800666c:	e7eb      	b.n	8006646 <USB_EPSetStall+0x2e>

0800666e <USB_EPClearStall>:
{
 800666e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8006670:	784a      	ldrb	r2, [r1, #1]
 8006672:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006676:	78cb      	ldrb	r3, [r1, #3]
 8006678:	2a01      	cmp	r2, #1
 800667a:	f1a3 0302 	sub.w	r3, r3, #2
 800667e:	b2db      	uxtb	r3, r3
 8006680:	d10f      	bne.n	80066a2 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006682:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006686:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006688:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800668c:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006690:	d805      	bhi.n	800669e <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006692:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800669a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800669e:	2000      	movs	r0, #0
 80066a0:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066a2:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80066a6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066aa:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066ac:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066b0:	bf9e      	ittt	ls
 80066b2:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 80066b6:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 80066ba:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 80066be:	e7ee      	b.n	800669e <USB_EPClearStall+0x30>

080066c0 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066c0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80066c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066c8:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066cc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80066d0:	0109      	lsls	r1, r1, #4
 80066d2:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80066d6:	4319      	orrs	r1, r3
 80066d8:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80066dc:	2000      	movs	r0, #0
 80066de:	4770      	bx	lr

080066e0 <USB_DevConnect>:
{
 80066e0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80066e2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80066e6:	f023 0302 	bic.w	r3, r3, #2
 80066ea:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80066ee:	2003      	movs	r0, #3
 80066f0:	f7fa f868 	bl	80007c4 <HAL_Delay>
}
 80066f4:	2000      	movs	r0, #0
 80066f6:	bd08      	pop	{r3, pc}

080066f8 <USB_DevDisconnect>:
{
 80066f8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066fa:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80066fe:	f043 0302 	orr.w	r3, r3, #2
 8006702:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8006706:	2003      	movs	r0, #3
 8006708:	f7fa f85c 	bl	80007c4 <HAL_Delay>
}
 800670c:	2000      	movs	r0, #0
 800670e:	bd08      	pop	{r3, pc}

08006710 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8006710:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8006712:	6980      	ldr	r0, [r0, #24]
}
 8006714:	4010      	ands	r0, r2
 8006716:	4770      	bx	lr

08006718 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006718:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800671c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006720:	69c0      	ldr	r0, [r0, #28]
 8006722:	4018      	ands	r0, r3
}
 8006724:	0c00      	lsrs	r0, r0, #16
 8006726:	4770      	bx	lr

08006728 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006728:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800672c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006730:	69c0      	ldr	r0, [r0, #28]
 8006732:	4018      	ands	r0, r3
}
 8006734:	b280      	uxth	r0, r0
 8006736:	4770      	bx	lr

08006738 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006738:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800673c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006740:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006744:	6940      	ldr	r0, [r0, #20]
}
 8006746:	4010      	ands	r0, r2
 8006748:	4770      	bx	lr

0800674a <USB_ReadDevInEPInterrupt>:
{
 800674a:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 800674c:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006750:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006754:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8006758:	f001 010f 	and.w	r1, r1, #15
 800675c:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800675e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8006762:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006764:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8006766:	b2db      	uxtb	r3, r3
 8006768:	4323      	orrs	r3, r4
}
 800676a:	4018      	ands	r0, r3
 800676c:	bd10      	pop	{r4, pc}

0800676e <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800676e:	6940      	ldr	r0, [r0, #20]
}
 8006770:	f000 0001 	and.w	r0, r0, #1
 8006774:	4770      	bx	lr

08006776 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006776:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800677a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800677e:	f023 0307 	bic.w	r3, r3, #7
 8006782:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006786:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	f002 0206 	and.w	r2, r2, #6
 8006790:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8006792:	bf02      	ittt	eq
 8006794:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8006798:	f042 0203 	orreq.w	r2, r2, #3
 800679c:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067a6:	605a      	str	r2, [r3, #4]
}
 80067a8:	2000      	movs	r0, #0
 80067aa:	4770      	bx	lr

080067ac <USB_EP0_OutStart>:
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067ac:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80067b0:	2000      	movs	r0, #0
 80067b2:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067b4:	691a      	ldr	r2, [r3, #16]
 80067b6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80067ba:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067bc:	691a      	ldr	r2, [r3, #16]
 80067be:	f042 0218 	orr.w	r2, r2, #24
 80067c2:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067c4:	691a      	ldr	r2, [r3, #16]
 80067c6:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 80067ca:	611a      	str	r2, [r3, #16]
}
 80067cc:	4770      	bx	lr

080067ce <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80067ce:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
{
 80067d2:	b510      	push	{r4, lr}
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80067d4:	b16b      	cbz	r3, 80067f2 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80067d6:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80067da:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80067de:	28ff      	cmp	r0, #255	; 0xff
 80067e0:	d007      	beq.n	80067f2 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80067e8:	4621      	mov	r1, r4
 80067ea:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 80067ec:	23ff      	movs	r3, #255	; 0xff
 80067ee:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80067f2:	2000      	movs	r0, #0
 80067f4:	bd10      	pop	{r4, pc}
	...

080067f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80067f8:	2343      	movs	r3, #67	; 0x43
 80067fa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80067fc:	4800      	ldr	r0, [pc, #0]	; (8006800 <USBD_CDC_GetFSCfgDesc+0x8>)
 80067fe:	4770      	bx	lr
 8006800:	200000ec 	.word	0x200000ec

08006804 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006804:	2343      	movs	r3, #67	; 0x43
 8006806:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8006808:	4800      	ldr	r0, [pc, #0]	; (800680c <USBD_CDC_GetHSCfgDesc+0x8>)
 800680a:	4770      	bx	lr
 800680c:	20000130 	.word	0x20000130

08006810 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006810:	2343      	movs	r3, #67	; 0x43
 8006812:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8006814:	4800      	ldr	r0, [pc, #0]	; (8006818 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8006816:	4770      	bx	lr
 8006818:	20000174 	.word	0x20000174

0800681c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800681c:	230a      	movs	r3, #10
 800681e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8006820:	4800      	ldr	r0, [pc, #0]	; (8006824 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8006822:	4770      	bx	lr
 8006824:	200001b8 	.word	0x200001b8

08006828 <USBD_CDC_DataOut>:
{
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800682c:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006830:	f7fa ffa0 	bl	8001774 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8006834:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006838:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800683c:	b14b      	cbz	r3, 8006852 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800683e:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 8006842:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800684c:	4798      	blx	r3
    return USBD_OK;
 800684e:	2000      	movs	r0, #0
}
 8006850:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8006852:	2002      	movs	r0, #2
 8006854:	e7fc      	b.n	8006850 <USBD_CDC_DataOut+0x28>

08006856 <USBD_CDC_DataIn>:
{
 8006856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006858:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 800685c:	b1d6      	cbz	r6, 8006894 <USBD_CDC_DataIn+0x3e>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800685e:	2314      	movs	r3, #20
 8006860:	fb03 0301 	mla	r3, r3, r1, r0
 8006864:	69dd      	ldr	r5, [r3, #28]
 8006866:	b18d      	cbz	r5, 800688c <USBD_CDC_DataIn+0x36>
 8006868:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 800686c:	271c      	movs	r7, #28
 800686e:	fb07 4201 	mla	r2, r7, r1, r4
 8006872:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006874:	fbb5 f4f2 	udiv	r4, r5, r2
 8006878:	fb02 5414 	mls	r4, r2, r4, r5
 800687c:	b934      	cbnz	r4, 800688c <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 800687e:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006880:	4622      	mov	r2, r4
 8006882:	4623      	mov	r3, r4
 8006884:	f7fa ff68 	bl	8001758 <USBD_LL_Transmit>
    return USBD_OK;
 8006888:	4620      	mov	r0, r4
}
 800688a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 800688c:	2000      	movs	r0, #0
 800688e:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8006892:	e7fa      	b.n	800688a <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8006894:	2002      	movs	r0, #2
 8006896:	e7f8      	b.n	800688a <USBD_CDC_DataIn+0x34>

08006898 <USBD_CDC_Setup>:
{
 8006898:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800689c:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800689e:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 80068a2:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068a6:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 80068aa:	4605      	mov	r5, r0
 80068ac:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 80068ae:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 80068b2:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068b6:	d028      	beq.n	800690a <USBD_CDC_Setup+0x72>
 80068b8:	2c20      	cmp	r4, #32
 80068ba:	d145      	bne.n	8006948 <USBD_CDC_Setup+0xb0>
    if (req->wLength)
 80068bc:	88cc      	ldrh	r4, [r1, #6]
 80068be:	784b      	ldrb	r3, [r1, #1]
 80068c0:	b1e4      	cbz	r4, 80068fc <USBD_CDC_Setup+0x64>
      if (req->bmRequest & 0x80U)
 80068c2:	0612      	lsls	r2, r2, #24
 80068c4:	d511      	bpl.n	80068ea <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068c6:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80068ca:	4639      	mov	r1, r7
 80068cc:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80068d0:	4618      	mov	r0, r3
 80068d2:	4622      	mov	r2, r4
 80068d4:	47c8      	blx	r9
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068d6:	88f2      	ldrh	r2, [r6, #6]
 80068d8:	4639      	mov	r1, r7
 80068da:	4628      	mov	r0, r5
 80068dc:	f000 fc33 	bl	8007146 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80068e0:	4644      	mov	r4, r8
}
 80068e2:	4620      	mov	r0, r4
 80068e4:	b003      	add	sp, #12
 80068e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hcdc->CmdOpCode = req->bRequest;
 80068ea:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80068ee:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068f2:	4622      	mov	r2, r4
 80068f4:	4639      	mov	r1, r7
 80068f6:	f000 fc3b 	bl	8007170 <USBD_CtlPrepareRx>
 80068fa:	e7f1      	b.n	80068e0 <USBD_CDC_Setup+0x48>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068fc:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006900:	4618      	mov	r0, r3
 8006902:	6895      	ldr	r5, [r2, #8]
 8006904:	4622      	mov	r2, r4
 8006906:	47a8      	blx	r5
 8006908:	e7eb      	b.n	80068e2 <USBD_CDC_Setup+0x4a>
    switch (req->bRequest)
 800690a:	784f      	ldrb	r7, [r1, #1]
 800690c:	2f0a      	cmp	r7, #10
 800690e:	d00d      	beq.n	800692c <USBD_CDC_Setup+0x94>
 8006910:	2f0b      	cmp	r7, #11
 8006912:	d015      	beq.n	8006940 <USBD_CDC_Setup+0xa8>
 8006914:	b9c7      	cbnz	r7, 8006948 <USBD_CDC_Setup+0xb0>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006916:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800691a:	2b03      	cmp	r3, #3
 800691c:	d114      	bne.n	8006948 <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800691e:	2202      	movs	r2, #2
 8006920:	f10d 0106 	add.w	r1, sp, #6
 8006924:	f000 fc0f 	bl	8007146 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8006928:	463c      	mov	r4, r7
 800692a:	e7da      	b.n	80068e2 <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800692c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006930:	2b03      	cmp	r3, #3
 8006932:	d109      	bne.n	8006948 <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006934:	2201      	movs	r2, #1
 8006936:	f10d 0105 	add.w	r1, sp, #5
 800693a:	f000 fc04 	bl	8007146 <USBD_CtlSendData>
 800693e:	e7d0      	b.n	80068e2 <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006940:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006944:	2b03      	cmp	r3, #3
 8006946:	d0cc      	beq.n	80068e2 <USBD_CDC_Setup+0x4a>
      USBD_CtlError (pdev, req);
 8006948:	4631      	mov	r1, r6
 800694a:	4628      	mov	r0, r5
 800694c:	f000 fbd4 	bl	80070f8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006950:	2402      	movs	r4, #2
      break;
 8006952:	e7c6      	b.n	80068e2 <USBD_CDC_Setup+0x4a>

08006954 <USBD_CDC_DeInit>:
{
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006958:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800695a:	2181      	movs	r1, #129	; 0x81
 800695c:	f7fa fecd 	bl	80016fa <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006960:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006962:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006964:	4620      	mov	r0, r4
 8006966:	f7fa fec8 	bl	80016fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800696a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800696e:	2182      	movs	r1, #130	; 0x82
 8006970:	4620      	mov	r0, r4
 8006972:	f7fa fec2 	bl	80016fa <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8006976:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800697a:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 800697c:	b14b      	cbz	r3, 8006992 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800697e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006986:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800698a:	f001 fb19 	bl	8007fc0 <free>
    pdev->pClassData = NULL;
 800698e:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8006992:	2000      	movs	r0, #0
 8006994:	bd38      	pop	{r3, r4, r5, pc}

08006996 <USBD_CDC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006996:	7c03      	ldrb	r3, [r0, #16]
{
 8006998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800699c:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800699e:	bbcb      	cbnz	r3, 8006a14 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069a4:	2202      	movs	r2, #2
 80069a6:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069a8:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069aa:	f7fa fe9c 	bl	80016e6 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069ae:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069b0:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069b4:	4629      	mov	r1, r5
 80069b6:	2202      	movs	r2, #2
 80069b8:	4620      	mov	r0, r4
 80069ba:	f7fa fe94 	bl	80016e6 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80069be:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069c2:	2308      	movs	r3, #8
 80069c4:	2203      	movs	r2, #3
 80069c6:	2182      	movs	r1, #130	; 0x82
 80069c8:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80069ca:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069cc:	f7fa fe8b 	bl	80016e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80069d0:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80069d2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80069d6:	f001 faeb 	bl	8007fb0 <malloc>
 80069da:	4606      	mov	r6, r0
 80069dc:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 80069e0:	b350      	cbz	r0, 8006a38 <USBD_CDC_Init+0xa2>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80069e2:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80069ea:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 80069ee:	2700      	movs	r7, #0
 80069f0:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 80069f4:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80069f8:	f1b8 0f00 	cmp.w	r8, #0
 80069fc:	d113      	bne.n	8006a26 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a02:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8006a06:	4629      	mov	r1, r5
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f7fa feac 	bl	8001766 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8006a0e:	4640      	mov	r0, r8
}
 8006a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a14:	2340      	movs	r3, #64	; 0x40
 8006a16:	2202      	movs	r2, #2
 8006a18:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a1a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a1c:	f7fa fe63 	bl	80016e6 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a20:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a22:	2340      	movs	r3, #64	; 0x40
 8006a24:	e7c6      	b.n	80069b4 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a26:	2340      	movs	r3, #64	; 0x40
 8006a28:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f7fa fe99 	bl	8001766 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8006a34:	4638      	mov	r0, r7
 8006a36:	e7eb      	b.n	8006a10 <USBD_CDC_Init+0x7a>
    ret = 1U;
 8006a38:	4628      	mov	r0, r5
 8006a3a:	e7e9      	b.n	8006a10 <USBD_CDC_Init+0x7a>

08006a3c <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8006a3c:	b119      	cbz	r1, 8006a46 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8006a3e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 8006a42:	2000      	movs	r0, #0
 8006a44:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8006a46:	2002      	movs	r0, #2
  }

  return ret;
}
 8006a48:	4770      	bx	lr

08006a4a <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a4a:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8006a4e:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8006a50:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a54:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8006a58:	4770      	bx	lr

08006a5a <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8006a5a:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 8006a5e:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8006a60:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8006a64:	4770      	bx	lr

08006a66 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a66:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 8006a6a:	b510      	push	{r4, lr}

  if(pdev->pClassData != NULL)
 8006a6c:	b182      	cbz	r2, 8006a90 <USBD_CDC_TransmitPacket+0x2a>
  {
    if(hcdc->TxState == 0U)
 8006a6e:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8006a72:	2301      	movs	r3, #1
 8006a74:	b974      	cbnz	r4, 8006a94 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006a76:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006a7a:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8006a7e:	6303      	str	r3, [r0, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a80:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	2181      	movs	r1, #129	; 0x81
 8006a88:	f7fa fe66 	bl	8001758 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8006a8c:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006a8e:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8006a90:	2002      	movs	r0, #2
 8006a92:	e7fc      	b.n	8006a8e <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8006a94:	4618      	mov	r0, r3
 8006a96:	e7fa      	b.n	8006a8e <USBD_CDC_TransmitPacket+0x28>

08006a98 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a98:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006a9a:	b180      	cbz	r0, 8006abe <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006a9c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006aa0:	b113      	cbz	r3, 8006aa8 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006aa8:	b109      	cbz	r1, 8006aae <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8006aaa:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 8006ab4:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006ab6:	f7fa fde1 	bl	800167c <USBD_LL_Init>

  return USBD_OK;
 8006aba:	2000      	movs	r0, #0
}
 8006abc:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006abe:	2002      	movs	r0, #2
 8006ac0:	e7fc      	b.n	8006abc <USBD_Init+0x24>

08006ac2 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8006ac2:	b119      	cbz	r1, 8006acc <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006ac4:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8006ac8:	2000      	movs	r0, #0
 8006aca:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006acc:	2002      	movs	r0, #2
  }

  return status;
}
 8006ace:	4770      	bx	lr

08006ad0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006ad0:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006ad2:	f7fa fe01 	bl	80016d8 <USBD_LL_Start>

  return USBD_OK;
}
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	bd08      	pop	{r3, pc}

08006ada <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ada:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8006adc:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006ae0:	b90b      	cbnz	r3, 8006ae6 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006ae2:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8006ae4:	bd08      	pop	{r3, pc}
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4798      	blx	r3
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d0fa      	beq.n	8006ae4 <USBD_SetClassConfig+0xa>
 8006aee:	e7f8      	b.n	8006ae2 <USBD_SetClassConfig+0x8>

08006af0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006af0:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006af2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	4798      	blx	r3
  return USBD_OK;
}
 8006afa:	2000      	movs	r0, #0
 8006afc:	bd08      	pop	{r3, pc}

08006afe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006afe:	b538      	push	{r3, r4, r5, lr}
 8006b00:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b02:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8006b06:	4628      	mov	r0, r5
 8006b08:	f000 fae2 	bl	80070d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b0c:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8006b0e:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8006b12:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8006b16:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8006b1a:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8006b1e:	f001 031f 	and.w	r3, r1, #31
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d00e      	beq.n	8006b44 <USBD_LL_SetupStage+0x46>
 8006b26:	d307      	bcc.n	8006b38 <USBD_LL_SetupStage+0x3a>
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d010      	beq.n	8006b4e <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b2c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8006b30:	4620      	mov	r0, r4
 8006b32:	f7fa fde9 	bl	8001708 <USBD_LL_StallEP>
    break;
 8006b36:	e003      	b.n	8006b40 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8006b38:	4629      	mov	r1, r5
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f000 f902 	bl	8006d44 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8006b40:	2000      	movs	r0, #0
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8006b44:	4629      	mov	r1, r5
 8006b46:	4620      	mov	r0, r4
 8006b48:	f000 fa16 	bl	8006f78 <USBD_StdItfReq>
    break;
 8006b4c:	e7f8      	b.n	8006b40 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8006b4e:	4629      	mov	r1, r5
 8006b50:	4620      	mov	r0, r4
 8006b52:	f000 fa36 	bl	8006fc2 <USBD_StdEPReq>
    break;
 8006b56:	e7f3      	b.n	8006b40 <USBD_LL_SetupStage+0x42>

08006b58 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006b5e:	bb39      	cbnz	r1, 8006bb0 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b60:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d11e      	bne.n	8006ba6 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 8006b68:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8006b6c:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d90b      	bls.n	8006b8c <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8006b74:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 8006b76:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8006b78:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8006b7c:	bf8c      	ite	hi
 8006b7e:	b29a      	uxthhi	r2, r3
 8006b80:	b292      	uxthls	r2, r2
 8006b82:	4631      	mov	r1, r6
 8006b84:	f000 fb03 	bl	800718e <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8006b88:	2000      	movs	r0, #0
}
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006b8c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	b123      	cbz	r3, 8006b9e <USBD_LL_DataOutStage+0x46>
 8006b94:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8006b98:	2a03      	cmp	r2, #3
 8006b9a:	d100      	bne.n	8006b9e <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8006b9c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f000 fafd 	bl	800719e <USBD_CtlSendStatus>
 8006ba4:	e7f0      	b.n	8006b88 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ba6:	2b05      	cmp	r3, #5
 8006ba8:	d1ee      	bne.n	8006b88 <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 8006baa:	f7fa fdad 	bl	8001708 <USBD_LL_StallEP>
 8006bae:	e7eb      	b.n	8006b88 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 8006bb0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	b12b      	cbz	r3, 8006bc4 <USBD_LL_DataOutStage+0x6c>
 8006bb8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8006bbc:	2a03      	cmp	r2, #3
 8006bbe:	d101      	bne.n	8006bc4 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8006bc0:	4798      	blx	r3
 8006bc2:	e7e1      	b.n	8006b88 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8006bc4:	2002      	movs	r0, #2
 8006bc6:	e7e0      	b.n	8006b8a <USBD_LL_DataOutStage+0x32>

08006bc8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006bc8:	b570      	push	{r4, r5, r6, lr}
 8006bca:	4613      	mov	r3, r2
 8006bcc:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006bce:	460e      	mov	r6, r1
 8006bd0:	2900      	cmp	r1, #0
 8006bd2:	d148      	bne.n	8006c66 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bd4:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8006bd8:	2a02      	cmp	r2, #2
 8006bda:	d13d      	bne.n	8006c58 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006bdc:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 8006be0:	4295      	cmp	r5, r2
 8006be2:	d914      	bls.n	8006c0e <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8006be4:	1aaa      	subs	r2, r5, r2
 8006be6:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006be8:	4619      	mov	r1, r3
 8006bea:	b292      	uxth	r2, r2
 8006bec:	f000 fab8 	bl	8007160 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006bf0:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f7fa fdb5 	bl	8001766 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006bfc:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	f04f 0000 	mov.w	r0, #0
 8006c06:	d101      	bne.n	8006c0c <USBD_LL_DataInStage+0x44>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8006c08:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006c0e:	69c3      	ldr	r3, [r0, #28]
 8006c10:	fbb3 f5f2 	udiv	r5, r3, r2
 8006c14:	fb02 3515 	mls	r5, r2, r5, r3
 8006c18:	b965      	cbnz	r5, 8006c34 <USBD_LL_DataInStage+0x6c>
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d80a      	bhi.n	8006c34 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8006c1e:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d206      	bcs.n	8006c34 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c26:	462a      	mov	r2, r5
 8006c28:	f000 fa9a 	bl	8007160 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c2c:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006c30:	462b      	mov	r3, r5
 8006c32:	e7de      	b.n	8006bf2 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006c34:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	b12b      	cbz	r3, 8006c48 <USBD_LL_DataInStage+0x80>
 8006c3c:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8006c40:	2a03      	cmp	r2, #3
 8006c42:	d101      	bne.n	8006c48 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 8006c44:	4620      	mov	r0, r4
 8006c46:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8006c48:	2180      	movs	r1, #128	; 0x80
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f7fa fd5c 	bl	8001708 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 faaf 	bl	80071b4 <USBD_CtlReceiveStatus>
 8006c56:	e7d1      	b.n	8006bfc <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c58:	f032 0304 	bics.w	r3, r2, #4
 8006c5c:	d1ce      	bne.n	8006bfc <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8006c5e:	2180      	movs	r1, #128	; 0x80
 8006c60:	f7fa fd52 	bl	8001708 <USBD_LL_StallEP>
 8006c64:	e7ca      	b.n	8006bfc <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL) &&
 8006c66:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	b133      	cbz	r3, 8006c7c <USBD_LL_DataInStage+0xb4>
 8006c6e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8006c72:	2a03      	cmp	r2, #3
 8006c74:	d102      	bne.n	8006c7c <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 8006c76:	4798      	blx	r3
  return USBD_OK;
 8006c78:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8006c7a:	e7c7      	b.n	8006c0c <USBD_LL_DataInStage+0x44>
    return USBD_FAIL;
 8006c7c:	2002      	movs	r0, #2
 8006c7e:	e7c5      	b.n	8006c0c <USBD_LL_DataInStage+0x44>

08006c80 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006c80:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c82:	2200      	movs	r2, #0
{
 8006c84:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c86:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c88:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c8a:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c8c:	2340      	movs	r3, #64	; 0x40
 8006c8e:	f7fa fd2a 	bl	80016e6 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c92:	4633      	mov	r3, r6
 8006c94:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c96:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c9a:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f7fa fd20 	bl	80016e6 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8006ca6:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006caa:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cac:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cae:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cb0:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cb4:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006cb8:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cba:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8006cbe:	b123      	cbz	r3, 8006cca <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006cc0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006cca:	2000      	movs	r0, #0
 8006ccc:	bd70      	pop	{r4, r5, r6, pc}

08006cce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006cce:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	4770      	bx	lr

08006cd4 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8006cd4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006cd8:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006cdc:	2304      	movs	r3, #4
 8006cde:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	4770      	bx	lr

08006ce6 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8006ce6:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8006cea:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8006cee:	2000      	movs	r0, #0
 8006cf0:	4770      	bx	lr

08006cf2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006cf2:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf4:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8006cf8:	2a03      	cmp	r2, #3
 8006cfa:	d104      	bne.n	8006d06 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8006cfc:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	b103      	cbz	r3, 8006d06 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8006d04:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8006d06:	2000      	movs	r0, #0
 8006d08:	bd08      	pop	{r3, pc}

08006d0a <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	4770      	bx	lr

08006d0e <USBD_LL_IsoOUTIncomplete>:
 8006d0e:	2000      	movs	r0, #0
 8006d10:	4770      	bx	lr

08006d12 <USBD_LL_DevConnected>:
 8006d12:	2000      	movs	r0, #0
 8006d14:	4770      	bx	lr

08006d16 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8006d16:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d1e:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8006d22:	7901      	ldrb	r1, [r0, #4]
 8006d24:	6852      	ldr	r2, [r2, #4]
 8006d26:	4790      	blx	r2

  return USBD_OK;
}
 8006d28:	2000      	movs	r0, #0
 8006d2a:	bd08      	pop	{r3, pc}

08006d2c <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8006d2c:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8006d2e:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8006d30:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8006d32:	f7fa fce9 	bl	8001708 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006d36:	4620      	mov	r0, r4
 8006d38:	2100      	movs	r1, #0
}
 8006d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8006d3e:	f7fa bce3 	b.w	8001708 <USBD_LL_StallEP>
	...

08006d44 <USBD_StdDevReq>:
{
 8006d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d46:	780b      	ldrb	r3, [r1, #0]
 8006d48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d4c:	2b20      	cmp	r3, #32
{
 8006d4e:	4604      	mov	r4, r0
 8006d50:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d52:	d014      	beq.n	8006d7e <USBD_StdDevReq+0x3a>
 8006d54:	2b40      	cmp	r3, #64	; 0x40
 8006d56:	d012      	beq.n	8006d7e <USBD_StdDevReq+0x3a>
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f040 808b 	bne.w	8006e74 <USBD_StdDevReq+0x130>
    switch (req->bRequest)
 8006d5e:	784b      	ldrb	r3, [r1, #1]
 8006d60:	2b09      	cmp	r3, #9
 8006d62:	f200 8087 	bhi.w	8006e74 <USBD_StdDevReq+0x130>
 8006d66:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006d6a:	00df      	.short	0x00df
 8006d6c:	008500f9 	.word	0x008500f9
 8006d70:	008500f2 	.word	0x008500f2
 8006d74:	0013007a 	.word	0x0013007a
 8006d78:	00ca0085 	.word	0x00ca0085
 8006d7c:	0098      	.short	0x0098
    pdev->pClass->Setup(pdev, req);
 8006d7e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006d82:	4629      	mov	r1, r5
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	4620      	mov	r0, r4
 8006d88:	4798      	blx	r3
}
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	b003      	add	sp, #12
 8006d8e:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8006d90:	884b      	ldrh	r3, [r1, #2]
 8006d92:	0a1a      	lsrs	r2, r3, #8
 8006d94:	3a01      	subs	r2, #1
 8006d96:	2a06      	cmp	r2, #6
 8006d98:	d86c      	bhi.n	8006e74 <USBD_StdDevReq+0x130>
 8006d9a:	e8df f002 	tbb	[pc, r2]
 8006d9e:	2004      	.short	0x2004
 8006da0:	4d6b6b2d 	.word	0x4d6b6b2d
 8006da4:	56          	.byte	0x56
 8006da5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006da6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006daa:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006dac:	7c20      	ldrb	r0, [r4, #16]
 8006dae:	f10d 0106 	add.w	r1, sp, #6
 8006db2:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8006db4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006db8:	b152      	cbz	r2, 8006dd0 <USBD_StdDevReq+0x8c>
 8006dba:	88eb      	ldrh	r3, [r5, #6]
 8006dbc:	b143      	cbz	r3, 8006dd0 <USBD_StdDevReq+0x8c>
    len = MIN(len, req->wLength);
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	bf28      	it	cs
 8006dc2:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8006dc4:	4601      	mov	r1, r0
 8006dc6:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8006dc8:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8006dcc:	f000 f9bb 	bl	8007146 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8006dd0:	88eb      	ldrh	r3, [r5, #6]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1d9      	bne.n	8006d8a <USBD_StdDevReq+0x46>
      USBD_CtlSendStatus(pdev);
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 f9e1 	bl	800719e <USBD_CtlSendStatus>
 8006ddc:	e7d5      	b.n	8006d8a <USBD_StdDevReq+0x46>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006dde:	7c02      	ldrb	r2, [r0, #16]
 8006de0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006de4:	b932      	cbnz	r2, 8006df4 <USBD_StdDevReq+0xb0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006de8:	f10d 0006 	add.w	r0, sp, #6
 8006dec:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dee:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006df0:	7043      	strb	r3, [r0, #1]
 8006df2:	e7df      	b.n	8006db4 <USBD_StdDevReq+0x70>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	e7f7      	b.n	8006de8 <USBD_StdDevReq+0xa4>
    switch ((uint8_t)(req->wValue))
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b05      	cmp	r3, #5
 8006dfc:	d83a      	bhi.n	8006e74 <USBD_StdDevReq+0x130>
 8006dfe:	e8df f003 	tbb	[pc, r3]
 8006e02:	0703      	.short	0x0703
 8006e04:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e08:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	e7cd      	b.n	8006dac <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e10:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	e7c9      	b.n	8006dac <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e18:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	e7c5      	b.n	8006dac <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e20:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	e7c1      	b.n	8006dac <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e28:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	e7bd      	b.n	8006dac <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e30:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	e7b9      	b.n	8006dac <USBD_StdDevReq+0x68>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006e38:	7c03      	ldrb	r3, [r0, #16]
 8006e3a:	b9db      	cbnz	r3, 8006e74 <USBD_StdDevReq+0x130>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006e3c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006e40:	f10d 0006 	add.w	r0, sp, #6
 8006e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e46:	4798      	blx	r3
 8006e48:	e7b4      	b.n	8006db4 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006e4a:	7c03      	ldrb	r3, [r0, #16]
 8006e4c:	b993      	cbnz	r3, 8006e74 <USBD_StdDevReq+0x130>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006e4e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006e52:	f10d 0006 	add.w	r0, sp, #6
 8006e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e58:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e5a:	2307      	movs	r3, #7
 8006e5c:	e7c8      	b.n	8006df0 <USBD_StdDevReq+0xac>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e5e:	888b      	ldrh	r3, [r1, #4]
 8006e60:	b943      	cbnz	r3, 8006e74 <USBD_StdDevReq+0x130>
 8006e62:	88cb      	ldrh	r3, [r1, #6]
 8006e64:	b933      	cbnz	r3, 8006e74 <USBD_StdDevReq+0x130>
 8006e66:	884d      	ldrh	r5, [r1, #2]
 8006e68:	2d7f      	cmp	r5, #127	; 0x7f
 8006e6a:	d803      	bhi.n	8006e74 <USBD_StdDevReq+0x130>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e6c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d103      	bne.n	8006e7c <USBD_StdDevReq+0x138>
      USBD_CtlError(pdev , req);
 8006e74:	4620      	mov	r0, r4
 8006e76:	f7ff ff59 	bl	8006d2c <USBD_CtlError.constprop.1>
 8006e7a:	e786      	b.n	8006d8a <USBD_StdDevReq+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e7c:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8006e7e:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e82:	f7fa fc62 	bl	800174a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006e86:	4620      	mov	r0, r4
 8006e88:	f000 f989 	bl	800719e <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006e8c:	b11d      	cbz	r5, 8006e96 <USBD_StdDevReq+0x152>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e8e:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e90:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8006e94:	e779      	b.n	8006d8a <USBD_StdDevReq+0x46>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e7fa      	b.n	8006e90 <USBD_StdDevReq+0x14c>
  cfgidx = (uint8_t)(req->wValue);
 8006e9a:	7889      	ldrb	r1, [r1, #2]
 8006e9c:	4d35      	ldr	r5, [pc, #212]	; (8006f74 <USBD_StdDevReq+0x230>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e9e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8006ea0:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ea2:	d8e7      	bhi.n	8006e74 <USBD_StdDevReq+0x130>
    switch (pdev->dev_state)
 8006ea4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d008      	beq.n	8006ebe <USBD_StdDevReq+0x17a>
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d014      	beq.n	8006eda <USBD_StdDevReq+0x196>
      USBD_CtlError(pdev, req);
 8006eb0:	f7ff ff3c 	bl	8006d2c <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 8006eb4:	7829      	ldrb	r1, [r5, #0]
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f7ff fe1a 	bl	8006af0 <USBD_ClrClassConfig>
 8006ebc:	e765      	b.n	8006d8a <USBD_StdDevReq+0x46>
      if (cfgidx)
 8006ebe:	2900      	cmp	r1, #0
 8006ec0:	d089      	beq.n	8006dd6 <USBD_StdDevReq+0x92>
        pdev->dev_config = cfgidx;
 8006ec2:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ec4:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8006ec6:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ec8:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f7ff fe04 	bl	8006ada <USBD_SetClassConfig>
 8006ed2:	2802      	cmp	r0, #2
 8006ed4:	f47f af7f 	bne.w	8006dd6 <USBD_StdDevReq+0x92>
 8006ed8:	e7cc      	b.n	8006e74 <USBD_StdDevReq+0x130>
      if (cfgidx == 0U)
 8006eda:	b931      	cbnz	r1, 8006eea <USBD_StdDevReq+0x1a6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006edc:	2302      	movs	r3, #2
 8006ede:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8006ee2:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8006ee4:	f7ff fe04 	bl	8006af0 <USBD_ClrClassConfig>
 8006ee8:	e775      	b.n	8006dd6 <USBD_StdDevReq+0x92>
      else if (cfgidx != pdev->dev_config)
 8006eea:	6841      	ldr	r1, [r0, #4]
 8006eec:	2901      	cmp	r1, #1
 8006eee:	f43f af72 	beq.w	8006dd6 <USBD_StdDevReq+0x92>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ef2:	b2c9      	uxtb	r1, r1
 8006ef4:	f7ff fdfc 	bl	8006af0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006ef8:	7829      	ldrb	r1, [r5, #0]
 8006efa:	6061      	str	r1, [r4, #4]
 8006efc:	e7e6      	b.n	8006ecc <USBD_StdDevReq+0x188>
  if (req->wLength != 1U)
 8006efe:	88ca      	ldrh	r2, [r1, #6]
 8006f00:	2a01      	cmp	r2, #1
 8006f02:	d1b7      	bne.n	8006e74 <USBD_StdDevReq+0x130>
    switch (pdev->dev_state)
 8006f04:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0b3      	beq.n	8006e74 <USBD_StdDevReq+0x130>
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d903      	bls.n	8006f18 <USBD_StdDevReq+0x1d4>
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d1af      	bne.n	8006e74 <USBD_StdDevReq+0x130>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006f14:	1d01      	adds	r1, r0, #4
 8006f16:	e003      	b.n	8006f20 <USBD_StdDevReq+0x1dc>
      pdev->dev_default_config = 0U;
 8006f18:	4601      	mov	r1, r0
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 f910 	bl	8007146 <USBD_CtlSendData>
 8006f26:	e730      	b.n	8006d8a <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8006f28:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d8a0      	bhi.n	8006e74 <USBD_StdDevReq+0x130>
    if(req->wLength != 0x2U)
 8006f32:	88cb      	ldrh	r3, [r1, #6]
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d19d      	bne.n	8006e74 <USBD_StdDevReq+0x130>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8006f3c:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8006f40:	b10b      	cbz	r3, 8006f46 <USBD_StdDevReq+0x202>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f42:	2303      	movs	r3, #3
 8006f44:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006f46:	2202      	movs	r2, #2
 8006f48:	f104 010c 	add.w	r1, r4, #12
 8006f4c:	e7e8      	b.n	8006f20 <USBD_StdDevReq+0x1dc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f4e:	884b      	ldrh	r3, [r1, #2]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	f47f af1a 	bne.w	8006d8a <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 8006f56:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8006f5a:	e73c      	b.n	8006dd6 <USBD_StdDevReq+0x92>
  switch (pdev->dev_state)
 8006f5c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006f60:	3b01      	subs	r3, #1
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d886      	bhi.n	8006e74 <USBD_StdDevReq+0x130>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f66:	884b      	ldrh	r3, [r1, #2]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	f47f af0e 	bne.w	8006d8a <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e7f1      	b.n	8006f56 <USBD_StdDevReq+0x212>
 8006f72:	bf00      	nop
 8006f74:	20000464 	.word	0x20000464

08006f78 <USBD_StdItfReq>:
{
 8006f78:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f7a:	780b      	ldrb	r3, [r1, #0]
 8006f7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f80:	2b20      	cmp	r3, #32
{
 8006f82:	4604      	mov	r4, r0
 8006f84:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f86:	d002      	beq.n	8006f8e <USBD_StdItfReq+0x16>
 8006f88:	2b40      	cmp	r3, #64	; 0x40
 8006f8a:	d000      	beq.n	8006f8e <USBD_StdItfReq+0x16>
 8006f8c:	b9ab      	cbnz	r3, 8006fba <USBD_StdItfReq+0x42>
    switch (pdev->dev_state)
 8006f8e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8006f92:	3b01      	subs	r3, #1
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d810      	bhi.n	8006fba <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f98:	792b      	ldrb	r3, [r5, #4]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d80d      	bhi.n	8006fba <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006f9e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006faa:	88eb      	ldrh	r3, [r5, #6]
 8006fac:	b91b      	cbnz	r3, 8006fb6 <USBD_StdItfReq+0x3e>
 8006fae:	b910      	cbnz	r0, 8006fb6 <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f000 f8f4 	bl	800719e <USBD_CtlSendStatus>
}
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f7ff feb6 	bl	8006d2c <USBD_CtlError.constprop.1>
      break;
 8006fc0:	e7f9      	b.n	8006fb6 <USBD_StdItfReq+0x3e>

08006fc2 <USBD_StdEPReq>:
{
 8006fc2:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fc4:	780a      	ldrb	r2, [r1, #0]
 8006fc6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8006fca:	2a20      	cmp	r2, #32
{
 8006fcc:	4604      	mov	r4, r0
 8006fce:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fd0:	d014      	beq.n	8006ffc <USBD_StdEPReq+0x3a>
 8006fd2:	2a40      	cmp	r2, #64	; 0x40
 8006fd4:	d012      	beq.n	8006ffc <USBD_StdEPReq+0x3a>
 8006fd6:	b96a      	cbnz	r2, 8006ff4 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8006fd8:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8006fda:	888d      	ldrh	r5, [r1, #4]
    switch (req->bRequest)
 8006fdc:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 8006fde:	b2e9      	uxtb	r1, r5
    switch (req->bRequest)
 8006fe0:	d020      	beq.n	8007024 <USBD_StdEPReq+0x62>
 8006fe2:	d336      	bcc.n	8007052 <USBD_StdEPReq+0x90>
 8006fe4:	2a03      	cmp	r2, #3
 8006fe6:	d105      	bne.n	8006ff4 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8006fe8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8006fec:	2a02      	cmp	r2, #2
 8006fee:	d027      	beq.n	8007040 <USBD_StdEPReq+0x7e>
 8006ff0:	2a03      	cmp	r2, #3
 8006ff2:	d00b      	beq.n	800700c <USBD_StdEPReq+0x4a>
        USBD_CtlError(pdev, req);
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f7ff fe99 	bl	8006d2c <USBD_CtlError.constprop.1>
        break;
 8006ffa:	e005      	b.n	8007008 <USBD_StdEPReq+0x46>
    pdev->pClass->Setup (pdev, req);
 8006ffc:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8007000:	4619      	mov	r1, r3
 8007002:	6892      	ldr	r2, [r2, #8]
 8007004:	4620      	mov	r0, r4
 8007006:	4790      	blx	r2
}
 8007008:	2000      	movs	r0, #0
 800700a:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 800700c:	885a      	ldrh	r2, [r3, #2]
 800700e:	b92a      	cbnz	r2, 800701c <USBD_StdEPReq+0x5a>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007010:	064a      	lsls	r2, r1, #25
 8007012:	d003      	beq.n	800701c <USBD_StdEPReq+0x5a>
 8007014:	88db      	ldrh	r3, [r3, #6]
 8007016:	b90b      	cbnz	r3, 800701c <USBD_StdEPReq+0x5a>
            USBD_LL_StallEP(pdev, ep_addr);
 8007018:	f7fa fb76 	bl	8001708 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 800701c:	4620      	mov	r0, r4
 800701e:	f000 f8be 	bl	800719e <USBD_CtlSendStatus>
        break;
 8007022:	e7f1      	b.n	8007008 <USBD_StdEPReq+0x46>
      switch (pdev->dev_state)
 8007024:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007028:	2a02      	cmp	r2, #2
 800702a:	d009      	beq.n	8007040 <USBD_StdEPReq+0x7e>
 800702c:	2a03      	cmp	r2, #3
 800702e:	d1e1      	bne.n	8006ff4 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007030:	885b      	ldrh	r3, [r3, #2]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e8      	bne.n	8007008 <USBD_StdEPReq+0x46>
          if ((ep_addr & 0x7FU) != 0x00U)
 8007036:	064d      	lsls	r5, r1, #25
 8007038:	d0f0      	beq.n	800701c <USBD_StdEPReq+0x5a>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800703a:	f7fa fb6c 	bl	8001716 <USBD_LL_ClearStallEP>
 800703e:	e7ed      	b.n	800701c <USBD_StdEPReq+0x5a>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007040:	064b      	lsls	r3, r1, #25
 8007042:	d0d7      	beq.n	8006ff4 <USBD_StdEPReq+0x32>
          USBD_LL_StallEP(pdev, ep_addr);
 8007044:	f7fa fb60 	bl	8001708 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007048:	2180      	movs	r1, #128	; 0x80
 800704a:	4620      	mov	r0, r4
 800704c:	f7fa fb5c 	bl	8001708 <USBD_LL_StallEP>
 8007050:	e7da      	b.n	8007008 <USBD_StdEPReq+0x46>
      switch (pdev->dev_state)
 8007052:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007056:	2b02      	cmp	r3, #2
 8007058:	d018      	beq.n	800708c <USBD_StdEPReq+0xca>
 800705a:	2b03      	cmp	r3, #3
 800705c:	d1ca      	bne.n	8006ff4 <USBD_StdEPReq+0x32>
 800705e:	f001 020f 	and.w	r2, r1, #15
 8007062:	2314      	movs	r3, #20
        if((ep_addr & 0x80U) == 0x80U)
 8007064:	f015 0f80 	tst.w	r5, #128	; 0x80
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007068:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 800706c:	d01d      	beq.n	80070aa <USBD_StdEPReq+0xe8>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800706e:	6992      	ldr	r2, [r2, #24]
 8007070:	2a00      	cmp	r2, #0
 8007072:	d0bf      	beq.n	8006ff4 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007074:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8007078:	fb05 3503 	mla	r5, r5, r3, r3
 800707c:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800707e:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8007082:	d11d      	bne.n	80070c0 <USBD_StdEPReq+0xfe>
            pep->status = 0x0001U;
 8007084:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007086:	2202      	movs	r2, #2
 8007088:	4629      	mov	r1, r5
 800708a:	e00a      	b.n	80070a2 <USBD_StdEPReq+0xe0>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800708c:	064a      	lsls	r2, r1, #25
 800708e:	d1b1      	bne.n	8006ff4 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007090:	062b      	lsls	r3, r5, #24
 8007092:	bf4c      	ite	mi
 8007094:	f100 0114 	addmi.w	r1, r0, #20
 8007098:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 800709c:	2300      	movs	r3, #0
 800709e:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070a0:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070a2:	4620      	mov	r0, r4
 80070a4:	f000 f84f 	bl	8007146 <USBD_CtlSendData>
          break;
 80070a8:	e7ae      	b.n	8007008 <USBD_StdEPReq+0x46>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80070aa:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 80070ae:	2a00      	cmp	r2, #0
 80070b0:	d0a0      	beq.n	8006ff4 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80070b2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80070b6:	fb03 0505 	mla	r5, r3, r5, r0
 80070ba:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 80070be:	e7de      	b.n	800707e <USBD_StdEPReq+0xbc>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80070c0:	4620      	mov	r0, r4
 80070c2:	f7fa fb2f 	bl	8001724 <USBD_LL_IsStallEP>
 80070c6:	b108      	cbz	r0, 80070cc <USBD_StdEPReq+0x10a>
            pep->status = 0x0001U;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e7db      	b.n	8007084 <USBD_StdEPReq+0xc2>
            pep->status = 0x0000U;
 80070cc:	6028      	str	r0, [r5, #0]
 80070ce:	e7da      	b.n	8007086 <USBD_StdEPReq+0xc4>

080070d0 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80070d0:	780b      	ldrb	r3, [r1, #0]
 80070d2:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80070d4:	784b      	ldrb	r3, [r1, #1]
 80070d6:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80070d8:	78ca      	ldrb	r2, [r1, #3]
 80070da:	788b      	ldrb	r3, [r1, #2]
 80070dc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80070e0:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80070e2:	794a      	ldrb	r2, [r1, #5]
 80070e4:	790b      	ldrb	r3, [r1, #4]
 80070e6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80070ea:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80070ec:	79ca      	ldrb	r2, [r1, #7]
 80070ee:	798b      	ldrb	r3, [r1, #6]
 80070f0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80070f4:	80c3      	strh	r3, [r0, #6]
}
 80070f6:	4770      	bx	lr

080070f8 <USBD_CtlError>:
{
 80070f8:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 80070fa:	2180      	movs	r1, #128	; 0x80
{
 80070fc:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 80070fe:	f7fa fb03 	bl	8001708 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007102:	4620      	mov	r0, r4
 8007104:	2100      	movs	r1, #0
}
 8007106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800710a:	f7fa bafd 	b.w	8001708 <USBD_LL_StallEP>

0800710e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800710e:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8007110:	b188      	cbz	r0, 8007136 <USBD_GetString+0x28>
 8007112:	4605      	mov	r5, r0
 8007114:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8007116:	f815 4b01 	ldrb.w	r4, [r5], #1
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2c00      	cmp	r4, #0
 800711e:	d1f9      	bne.n	8007114 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007120:	3301      	adds	r3, #1
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007126:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007128:	2303      	movs	r3, #3
 800712a:	704b      	strb	r3, [r1, #1]
 800712c:	3801      	subs	r0, #1
 800712e:	2302      	movs	r3, #2
    while (*desc != '\0')
 8007130:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007134:	b905      	cbnz	r5, 8007138 <USBD_GetString+0x2a>
}
 8007136:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 800713e:	3302      	adds	r3, #2
 8007140:	b2db      	uxtb	r3, r3
 8007142:	548c      	strb	r4, [r1, r2]
 8007144:	e7f4      	b.n	8007130 <USBD_GetString+0x22>

08007146 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007146:	b510      	push	{r4, lr}
 8007148:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800714a:	2202      	movs	r2, #2
 800714c:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8007150:	e9c0 3307 	strd	r3, r3, [r0, #28]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007154:	460a      	mov	r2, r1
 8007156:	2100      	movs	r1, #0
 8007158:	f7fa fafe 	bl	8001758 <USBD_LL_Transmit>

  return USBD_OK;
}
 800715c:	2000      	movs	r0, #0
 800715e:	bd10      	pop	{r4, pc}

08007160 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007160:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007162:	4613      	mov	r3, r2
 8007164:	460a      	mov	r2, r1
 8007166:	2100      	movs	r1, #0
 8007168:	f7fa faf6 	bl	8001758 <USBD_LL_Transmit>

  return USBD_OK;
}
 800716c:	2000      	movs	r0, #0
 800716e:	bd08      	pop	{r3, pc}

08007170 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007170:	b510      	push	{r4, lr}
 8007172:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007174:	2203      	movs	r2, #3
 8007176:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800717a:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800717e:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8007180:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007184:	2100      	movs	r1, #0
 8007186:	f7fa faee 	bl	8001766 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800718a:	2000      	movs	r0, #0
 800718c:	bd10      	pop	{r4, pc}

0800718e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800718e:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007190:	4613      	mov	r3, r2
 8007192:	460a      	mov	r2, r1
 8007194:	2100      	movs	r1, #0
 8007196:	f7fa fae6 	bl	8001766 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800719a:	2000      	movs	r0, #0
 800719c:	bd08      	pop	{r3, pc}

0800719e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800719e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80071a0:	2304      	movs	r3, #4
 80071a2:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071a6:	2300      	movs	r3, #0
 80071a8:	461a      	mov	r2, r3
 80071aa:	4619      	mov	r1, r3
 80071ac:	f7fa fad4 	bl	8001758 <USBD_LL_Transmit>

  return USBD_OK;
}
 80071b0:	2000      	movs	r0, #0
 80071b2:	bd08      	pop	{r3, pc}

080071b4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80071b4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071b6:	2305      	movs	r3, #5
 80071b8:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80071bc:	2300      	movs	r3, #0
 80071be:	461a      	mov	r2, r3
 80071c0:	4619      	mov	r1, r3
 80071c2:	f7fa fad0 	bl	8001766 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80071c6:	2000      	movs	r0, #0
 80071c8:	bd08      	pop	{r3, pc}
	...

080071cc <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80071cc:	b510      	push	{r4, lr}
 80071ce:	b08a      	sub	sp, #40	; 0x28
 80071d0:	461c      	mov	r4, r3
  cp.device_name_char_len = device_name_char_len;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 80071d2:	4b19      	ldr	r3, [pc, #100]	; (8007238 <aci_gap_init_IDB05A1+0x6c>)
 80071d4:	9304      	str	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
  rq.cparam = &cp;
 80071d6:	ab01      	add	r3, sp, #4
  cp.device_name_char_len = device_name_char_len;
 80071d8:	f88d 2006 	strb.w	r2, [sp, #6]
  rq.cparam = &cp;
 80071dc:	9306      	str	r3, [sp, #24]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80071de:	aa02      	add	r2, sp, #8
  rq.clen = sizeof(cp);
 80071e0:	2303      	movs	r3, #3
  cp.role = role;
 80071e2:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 80071e6:	f88d 1005 	strb.w	r1, [sp, #5]
  rq.rparam = &resp;
 80071ea:	e9cd 3207 	strd	r3, r2, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80071ee:	2100      	movs	r1, #0
  rq.rlen = GAP_INIT_RP_SIZE;
 80071f0:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 80071f2:	a804      	add	r0, sp, #16
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80071f4:	9102      	str	r1, [sp, #8]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80071f6:	9105      	str	r1, [sp, #20]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80071f8:	f8cd 100b 	str.w	r1, [sp, #11]
  rq.rlen = GAP_INIT_RP_SIZE;
 80071fc:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 80071fe:	f000 fb93 	bl	8007928 <hci_send_req>
 8007202:	2800      	cmp	r0, #0
 8007204:	db15      	blt.n	8007232 <aci_gap_init_IDB05A1+0x66>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8007206:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800720a:	b980      	cbnz	r0, 800722e <aci_gap_init_IDB05A1+0x62>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 800720c:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800720e:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *service_handle = btohs(resp.service_handle);
 8007212:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8007216:	8022      	strh	r2, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8007218:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800721c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007222:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8007224:	9b03      	ldr	r3, [sp, #12]
 8007226:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007228:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800722c:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 800722e:	b00a      	add	sp, #40	; 0x28
 8007230:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 8007232:	20ff      	movs	r0, #255	; 0xff
 8007234:	e7fb      	b.n	800722e <aci_gap_init_IDB05A1+0x62>
 8007236:	bf00      	nop
 8007238:	008a003f 	.word	0x008a003f

0800723c <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	b092      	sub	sp, #72	; 0x48
 8007240:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8007244:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8007248:	192e      	adds	r6, r5, r4
 800724a:	2e1a      	cmp	r6, #26
 800724c:	dc47      	bgt.n	80072de <aci_gap_set_discoverable+0xa2>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 800724e:	f88d 0020 	strb.w	r0, [sp, #32]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8007252:	f8ad 1021 	strh.w	r1, [sp, #33]	; 0x21
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8007256:	f8ad 2023 	strh.w	r2, [sp, #35]	; 0x23
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 800725a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800725e:	462a      	mov	r2, r5
  buffer[indx] = AdvFilterPolicy;
 8007260:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8007264:	9918      	ldr	r1, [sp, #96]	; 0x60
  buffer[indx] = AdvFilterPolicy;
 8007266:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800726a:	a80a      	add	r0, sp, #40	; 0x28
  buffer[indx] = LocalNameLen;
 800726c:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8007270:	f000 feae 	bl	8007fd0 <memcpy>
  indx +=  LocalNameLen;
 8007274:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 8007278:	aa12      	add	r2, sp, #72	; 0x48
 800727a:	fa52 f383 	uxtab	r3, r2, r3
  indx++;
 800727e:	3509      	adds	r5, #9
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8007280:	ae08      	add	r6, sp, #32
  indx++;
 8007282:	b2ed      	uxtb	r5, r5
  buffer[indx] = ServiceUUIDLen;
 8007284:	f803 4c28 	strb.w	r4, [r3, #-40]

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8007288:	4622      	mov	r2, r4
 800728a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800728c:	1970      	adds	r0, r6, r5
  indx +=  ServiceUUIDLen;  
 800728e:	442c      	add	r4, r5
  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8007290:	f000 fe9e 	bl	8007fd0 <memcpy>
  indx +=  ServiceUUIDLen;  
 8007294:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8007296:	ab12      	add	r3, sp, #72	; 0x48
 8007298:	4423      	add	r3, r4
 800729a:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800729e:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;
 80072a2:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80072a4:	aa12      	add	r2, sp, #72	; 0x48
 80072a6:	fa52 f383 	uxtab	r3, r2, r3
 80072aa:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 80072ae:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;    

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 80072b2:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <aci_gap_set_discoverable+0xac>)
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
  rq.cparam = (void *)buffer;
 80072b4:	9604      	str	r6, [sp, #16]
  rq.ogf = OGF_VENDOR_CMD;
 80072b6:	2100      	movs	r1, #0
 80072b8:	e9cd 3102 	strd	r3, r1, [sp, #8]
  indx +=  2;    
 80072bc:	3404      	adds	r4, #4
  rq.clen = indx;
  rq.rparam = &status;
 80072be:	f10d 0307 	add.w	r3, sp, #7
 80072c2:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 80072c4:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 80072c6:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80072c8:	a802      	add	r0, sp, #8
  rq.clen = indx;
 80072ca:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 80072cc:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80072ce:	f000 fb2b 	bl	8007928 <hci_send_req>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	db05      	blt.n	80072e2 <aci_gap_set_discoverable+0xa6>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 80072d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 80072da:	b012      	add	sp, #72	; 0x48
 80072dc:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80072de:	2042      	movs	r0, #66	; 0x42
 80072e0:	e7fb      	b.n	80072da <aci_gap_set_discoverable+0x9e>
    return BLE_STATUS_TIMEOUT;
 80072e2:	20ff      	movs	r0, #255	; 0xff
 80072e4:	e7f9      	b.n	80072da <aci_gap_set_discoverable+0x9e>
 80072e6:	bf00      	nop
 80072e8:	0083003f 	.word	0x0083003f

080072ec <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 80072ec:	b510      	push	{r4, lr}
 80072ee:	b08e      	sub	sp, #56	; 0x38
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80072f0:	f88d 001c 	strb.w	r0, [sp, #28]
  cp.oob_enable = oob_enable;
 80072f4:	f88d 101d 	strb.w	r1, [sp, #29]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80072f8:	f102 0010 	add.w	r0, r2, #16
 80072fc:	f10d 011e 	add.w	r1, sp, #30
 8007300:	f852 4b04 	ldr.w	r4, [r2], #4
 8007304:	f841 4b04 	str.w	r4, [r1], #4
 8007308:	4282      	cmp	r2, r0
 800730a:	d1f9      	bne.n	8007300 <aci_gap_set_auth_requirement+0x14>
  cp.min_encryption_key_size = min_encryption_key_size;
 800730c:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  cp.max_encryption_key_size = max_encryption_key_size;
 8007310:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8007314:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  cp.use_fixed_pin = use_fixed_pin;
 8007318:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800731c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  cp.fixed_pin = htobl(fixed_pin);
 8007320:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007322:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
  cp.bonding_mode = bonding_mode;
 8007326:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800732a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 800732e:	4b0b      	ldr	r3, [pc, #44]	; (800735c <aci_gap_set_auth_requirement+0x70>)
 8007330:	2100      	movs	r1, #0
 8007332:	e9cd 3101 	strd	r3, r1, [sp, #4]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
  rq.cparam = &cp;
 8007336:	ab07      	add	r3, sp, #28
 8007338:	9303      	str	r3, [sp, #12]
  rq.clen = sizeof(cp);
 800733a:	231a      	movs	r3, #26
 800733c:	9304      	str	r3, [sp, #16]
  rq.rparam = &status;
 800733e:	f10d 0303 	add.w	r3, sp, #3
 8007342:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8007344:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 8007346:	2301      	movs	r3, #1
 8007348:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800734a:	f000 faed 	bl	8007928 <hci_send_req>
 800734e:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8007350:	bfac      	ite	ge
 8007352:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 8007356:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 8007358:	b00e      	add	sp, #56	; 0x38
 800735a:	bd10      	pop	{r4, pc}
 800735c:	0086003f 	.word	0x0086003f

08007360 <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 8007360:	b500      	push	{lr}
 8007362:	b08f      	sub	sp, #60	; 0x3c
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
  cp.scanWindow = htobs(scanWindow);
  cp.peer_bdaddr_type = peer_bdaddr_type;
 8007364:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	889b      	ldrh	r3, [r3, #4]
 800736c:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
  cp.own_bdaddr_type = own_bdaddr_type;
 8007370:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8007374:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  cp.conn_min_interval = htobs(conn_min_interval);
 8007378:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800737c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  cp.conn_max_interval = htobs(conn_max_interval);
 8007380:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8007384:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  cp.conn_latency = htobs(conn_latency);
 8007388:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800738c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  cp.supervision_timeout = htobs(supervision_timeout);
 8007390:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8007394:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  cp.min_conn_length = htobs(min_conn_length);
 8007398:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800739c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  cp.max_conn_length = htobs(max_conn_length);
 80073a0:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 80073a4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
  rq.cparam = &cp;
 80073a8:	ab08      	add	r3, sp, #32
  cp.scanWindow = htobs(scanWindow);
 80073aa:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  rq.cparam = &cp;
 80073ae:	9304      	str	r3, [sp, #16]
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 80073b0:	490d      	ldr	r1, [pc, #52]	; (80073e8 <aci_gap_create_connection+0x88>)
  cp.scanInterval = htobs(scanInterval);
 80073b2:	f8ad 0020 	strh.w	r0, [sp, #32]
  rq.clen = sizeof(cp);
 80073b6:	2318      	movs	r3, #24
 80073b8:	9305      	str	r3, [sp, #20]
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 80073ba:	230f      	movs	r3, #15
 80073bc:	e9cd 1302 	strd	r1, r3, [sp, #8]
  rq.event = EVT_CMD_STATUS;
  rq.rparam = &status;
 80073c0:	f10d 0307 	add.w	r3, sp, #7
 80073c4:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 80073c6:	2100      	movs	r1, #0
  rq.rlen = 1;
 80073c8:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80073ca:	a802      	add	r0, sp, #8
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 80073cc:	f8cd 2025 	str.w	r2, [sp, #37]	; 0x25
  rq.rlen = 1;
 80073d0:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80073d2:	f000 faa9 	bl	8007928 <hci_send_req>
 80073d6:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80073d8:	bfac      	ite	ge
 80073da:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80073de:	20ff      	movlt	r0, #255	; 0xff
}
 80073e0:	b00f      	add	sp, #60	; 0x3c
 80073e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80073e6:	bf00      	nop
 80073e8:	009c003f 	.word	0x009c003f

080073ec <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80073ec:	b500      	push	{lr}
 80073ee:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 80073f0:	4b0a      	ldr	r3, [pc, #40]	; (800741c <aci_gatt_init+0x30>)
 80073f2:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
  rq.rparam = &status;
 80073f4:	f10d 0307 	add.w	r3, sp, #7
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80073f8:	2100      	movs	r1, #0
  rq.rparam = &status;
 80073fa:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 80073fc:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80073fe:	2301      	movs	r3, #1
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007400:	e9cd 1103 	strd	r1, r1, [sp, #12]
 8007404:	9105      	str	r1, [sp, #20]
  rq.rlen = 1;
 8007406:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8007408:	f000 fa8e 	bl	8007928 <hci_send_req>
 800740c:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800740e:	bfac      	ite	ge
 8007410:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8007414:	20ff      	movlt	r0, #255	; 0xff
}
 8007416:	b009      	add	sp, #36	; 0x24
 8007418:	f85d fb04 	ldr.w	pc, [sp], #4
 800741c:	0101003f 	.word	0x0101003f

08007420 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8007420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007422:	b08d      	sub	sp, #52	; 0x34
    
  if(service_uuid_type == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8007424:	2801      	cmp	r0, #1
  buffer[indx] = service_uuid_type;
 8007426:	ad0c      	add	r5, sp, #48	; 0x30
    uuid_len = 16;
 8007428:	bf0c      	ite	eq
 800742a:	2402      	moveq	r4, #2
 800742c:	2410      	movne	r4, #16
  buffer[indx] = service_uuid_type;
 800742e:	f805 0d2c 	strb.w	r0, [r5, #-44]!
{
 8007432:	4617      	mov	r7, r2
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8007434:	f10d 0005 	add.w	r0, sp, #5
 8007438:	4622      	mov	r2, r4
{
 800743a:	461e      	mov	r6, r3
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800743c:	f000 fdc8 	bl	8007fd0 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 8007440:	ab0c      	add	r3, sp, #48	; 0x30
 8007442:	4423      	add	r3, r4
    
  buffer[indx] = max_attr_records;
  indx++;
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007444:	2100      	movs	r1, #0
  buffer[indx] = service_type;
 8007446:	f803 7c2b 	strb.w	r7, [r3, #-43]
  buffer[indx] = max_attr_records;
 800744a:	ab0c      	add	r3, sp, #48	; 0x30
 800744c:	191a      	adds	r2, r3, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 800744e:	4b10      	ldr	r3, [pc, #64]	; (8007490 <aci_gatt_add_serv+0x70>)
 8007450:	9306      	str	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8007452:	3403      	adds	r4, #3
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8007454:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8007456:	a806      	add	r0, sp, #24
  buffer[indx] = max_attr_records;
 8007458:	f802 6c2a 	strb.w	r6, [r2, #-42]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800745c:	f8ad 1000 	strh.w	r1, [sp]
 8007460:	f88d 1002 	strb.w	r1, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007464:	9107      	str	r1, [sp, #28]
  rq.cparam = (void *)buffer;
 8007466:	9508      	str	r5, [sp, #32]
  rq.clen = indx;
 8007468:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 800746a:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800746e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 8007470:	f000 fa5a 	bl	8007928 <hci_send_req>
 8007474:	2800      	cmp	r0, #0
 8007476:	db09      	blt.n	800748c <aci_gatt_add_serv+0x6c>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8007478:	f89d 0000 	ldrb.w	r0, [sp]
 800747c:	b920      	cbnz	r0, 8007488 <aci_gatt_add_serv+0x68>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 800747e:	9b00      	ldr	r3, [sp, #0]
 8007480:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007482:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8007486:	8013      	strh	r3, [r2, #0]

  return 0;
}
 8007488:	b00d      	add	sp, #52	; 0x34
 800748a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800748c:	20ff      	movs	r0, #255	; 0xff
 800748e:	e7fb      	b.n	8007488 <aci_gatt_add_serv+0x68>
 8007490:	0102003f 	.word	0x0102003f

08007494 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8007494:	b570      	push	{r4, r5, r6, lr}
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8007496:	2901      	cmp	r1, #1
{
 8007498:	b08e      	sub	sp, #56	; 0x38
    uuid_len = 16;
 800749a:	bf0c      	ite	eq
 800749c:	2402      	moveq	r4, #2
 800749e:	2410      	movne	r4, #16
{
 80074a0:	4616      	mov	r6, r2
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 80074a2:	f8ad 001c 	strh.w	r0, [sp, #28]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80074a6:	4622      	mov	r2, r4
  buffer[indx] = charUuidType;
 80074a8:	f88d 101e 	strb.w	r1, [sp, #30]
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80074ac:	f10d 001f 	add.w	r0, sp, #31
 80074b0:	4631      	mov	r1, r6
{
 80074b2:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80074b4:	f000 fd8c 	bl	8007fd0 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 80074b8:	ab0e      	add	r3, sp, #56	; 0x38
 80074ba:	191a      	adds	r2, r3, r4
  indx++;
    
  buffer[indx] = charProperties;
 80074bc:	4613      	mov	r3, r2
  buffer[indx] = charValueLen;
 80074be:	f802 5c19 	strb.w	r5, [r2, #-25]
  buffer[indx] = charProperties;
 80074c2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80074c6:	f803 2c18 	strb.w	r2, [r3, #-24]
  indx++;
    
  buffer[indx] = secPermissions;
 80074ca:	ab0e      	add	r3, sp, #56	; 0x38
 80074cc:	4423      	add	r3, r4
 80074ce:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 80074d2:	f803 2c17 	strb.w	r2, [r3, #-23]
  indx++;
    
  buffer[indx] = gattEvtMask;
 80074d6:	ab0e      	add	r3, sp, #56	; 0x38
 80074d8:	4423      	add	r3, r4
 80074da:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80074de:	f803 2c16 	strb.w	r2, [r3, #-22]
  indx++;
    
  buffer[indx] = encryKeySize;
 80074e2:	ab0e      	add	r3, sp, #56	; 0x38
 80074e4:	4423      	add	r3, r4
 80074e6:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80074ea:	f803 2c15 	strb.w	r2, [r3, #-21]
  indx++;
    
  buffer[indx] = isVariable;
 80074ee:	ab0e      	add	r3, sp, #56	; 0x38
 80074f0:	4423      	add	r3, r4
 80074f2:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 80074f6:	f803 2c14 	strb.w	r2, [r3, #-20]
  indx++;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 80074fa:	4b10      	ldr	r3, [pc, #64]	; (800753c <aci_gatt_add_char+0xa8>)
 80074fc:	9301      	str	r3, [sp, #4]
  rq.ocf = OCF_GATT_ADD_CHAR;
  rq.cparam = (void *)buffer;
 80074fe:	ab07      	add	r3, sp, #28
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007500:	2100      	movs	r1, #0
  rq.cparam = (void *)buffer;
 8007502:	9303      	str	r3, [sp, #12]
  rq.clen = indx;
 8007504:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8007506:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8007508:	a801      	add	r0, sp, #4
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800750a:	f8ad 1000 	strh.w	r1, [sp]
 800750e:	f88d 1002 	strb.w	r1, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007512:	9102      	str	r1, [sp, #8]
  rq.clen = indx;
 8007514:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 8007516:	f8cd d014 	str.w	sp, [sp, #20]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800751a:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800751c:	f000 fa04 	bl	8007928 <hci_send_req>
 8007520:	2800      	cmp	r0, #0
 8007522:	db09      	blt.n	8007538 <aci_gatt_add_char+0xa4>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8007524:	f89d 0000 	ldrb.w	r0, [sp]
 8007528:	b920      	cbnz	r0, 8007534 <aci_gatt_add_char+0xa0>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 800752a:	9b00      	ldr	r3, [sp, #0]
 800752c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800752e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8007532:	8013      	strh	r3, [r2, #0]

  return 0;
}
 8007534:	b00e      	add	sp, #56	; 0x38
 8007536:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8007538:	20ff      	movs	r0, #255	; 0xff
 800753a:	e7fb      	b.n	8007534 <aci_gatt_add_char+0xa0>
 800753c:	0104003f 	.word	0x0104003f

08007540 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8007540:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8007542:	2b7a      	cmp	r3, #122	; 0x7a
{
 8007544:	b0a8      	sub	sp, #160	; 0xa0
 8007546:	461c      	mov	r4, r3
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8007548:	d824      	bhi.n	8007594 <aci_gatt_update_char_value+0x54>
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800754a:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800754e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;
    
  buffer[indx] = charValOffset;
 8007552:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  indx++;
    
  buffer[indx] = charValueLen;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8007556:	992a      	ldr	r1, [sp, #168]	; 0xa8
  buffer[indx] = charValueLen;
 8007558:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800755c:	461a      	mov	r2, r3
 800755e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8007562:	f000 fd35 	bl	8007fd0 <memcpy>
  indx +=  charValueLen;

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 8007566:	4b0d      	ldr	r3, [pc, #52]	; (800759c <aci_gatt_update_char_value+0x5c>)
 8007568:	2100      	movs	r1, #0
 800756a:	e9cd 3102 	strd	r3, r1, [sp, #8]
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
  rq.cparam = (void *)buffer;
 800756e:	ab08      	add	r3, sp, #32
 8007570:	9304      	str	r3, [sp, #16]
  indx +=  charValueLen;
 8007572:	3406      	adds	r4, #6
  rq.clen = indx;
  rq.rparam = &status;
 8007574:	f10d 0307 	add.w	r3, sp, #7
 8007578:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 800757a:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 800757c:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800757e:	a802      	add	r0, sp, #8
  rq.clen = indx;
 8007580:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8007582:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8007584:	f000 f9d0 	bl	8007928 <hci_send_req>
 8007588:	2800      	cmp	r0, #0
 800758a:	db05      	blt.n	8007598 <aci_gatt_update_char_value+0x58>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800758c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 8007590:	b028      	add	sp, #160	; 0xa0
 8007592:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8007594:	2042      	movs	r0, #66	; 0x42
 8007596:	e7fb      	b.n	8007590 <aci_gatt_update_char_value+0x50>
    return BLE_STATUS_TIMEOUT;
 8007598:	20ff      	movs	r0, #255	; 0xff
 800759a:	e7f9      	b.n	8007590 <aci_gatt_update_char_value+0x50>
 800759c:	0106003f 	.word	0x0106003f

080075a0 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 80075a0:	b510      	push	{r4, lr}
  indx += 2;
  
  buffer[indx] = charUuidType;
  indx++;
    
  if(charUuidType == 0x01){
 80075a2:	2b01      	cmp	r3, #1
{
 80075a4:	b08e      	sub	sp, #56	; 0x38
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80075a6:	bf0c      	ite	eq
 80075a8:	2402      	moveq	r4, #2
 80075aa:	2410      	movne	r4, #16
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 80075ac:	f8ad 0008 	strh.w	r0, [sp, #8]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 80075b0:	f8ad 100a 	strh.w	r1, [sp, #10]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 80075b4:	f8ad 200c 	strh.w	r2, [sp, #12]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80075b8:	9910      	ldr	r1, [sp, #64]	; 0x40
  buffer[indx] = charUuidType;
 80075ba:	f88d 300e 	strb.w	r3, [sp, #14]
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80075be:	4622      	mov	r2, r4
 80075c0:	f10d 000f 	add.w	r0, sp, #15
 80075c4:	f000 fd04 	bl	8007fd0 <memcpy>
  indx +=  uuid_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
  rq.cparam = (void *)buffer;
 80075c8:	ab02      	add	r3, sp, #8
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 80075ca:	4a0b      	ldr	r2, [pc, #44]	; (80075f8 <aci_gatt_disc_charac_by_uuid+0x58>)
  rq.cparam = (void *)buffer;
 80075cc:	930a      	str	r3, [sp, #40]	; 0x28
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 80075ce:	230f      	movs	r3, #15
 80075d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  rq.clen = indx;
  rq.event = EVT_CMD_STATUS;
  rq.rparam = &status;
 80075d4:	f10d 0307 	add.w	r3, sp, #7
 80075d8:	930c      	str	r3, [sp, #48]	; 0x30
  rq.clen = indx;
 80075da:	3407      	adds	r4, #7
  rq.rlen = 1;
 80075dc:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80075de:	2100      	movs	r1, #0
 80075e0:	a808      	add	r0, sp, #32
  rq.clen = indx;
 80075e2:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rlen = 1;
 80075e4:	930d      	str	r3, [sp, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 80075e6:	f000 f99f 	bl	8007928 <hci_send_req>
 80075ea:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80075ec:	bfac      	ite	ge
 80075ee:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80075f2:	20ff      	movlt	r0, #255	; 0xff
}
 80075f4:	b00e      	add	sp, #56	; 0x38
 80075f6:	bd10      	pop	{r4, pc}
 80075f8:	0116003f 	.word	0x0116003f

080075fc <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 80075fc:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 80075fe:	2a7b      	cmp	r2, #123	; 0x7b
{
 8007600:	b0a8      	sub	sp, #160	; 0xa0
 8007602:	4614      	mov	r4, r2
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8007604:	d822      	bhi.n	800764c <aci_gatt_write_charac_descriptor+0x50>
    return BLE_STATUS_INVALID_PARAMS;

  conn_handle = htobs(conn_handle);
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8007606:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  attr_handle = htobs(attr_handle);
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 800760a:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;

  buffer[indx] = value_len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 800760e:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8007612:	4619      	mov	r1, r3
  buffer[indx] = value_len;
 8007614:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 8007618:	f000 fcda 	bl	8007fd0 <memcpy>
  indx +=  value_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
  rq.cparam = (void *)buffer;
 800761c:	ab08      	add	r3, sp, #32
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 800761e:	4a0d      	ldr	r2, [pc, #52]	; (8007654 <aci_gatt_write_charac_descriptor+0x58>)
  rq.cparam = (void *)buffer;
 8007620:	9304      	str	r3, [sp, #16]
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 8007622:	230f      	movs	r3, #15
 8007624:	e9cd 2302 	strd	r2, r3, [sp, #8]
  indx +=  value_len;
 8007628:	3405      	adds	r4, #5
  rq.clen = indx;
  rq.event = EVT_CMD_STATUS; 
  rq.rparam = &status;
 800762a:	f10d 0307 	add.w	r3, sp, #7
 800762e:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 8007630:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8007632:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8007634:	2100      	movs	r1, #0
 8007636:	a802      	add	r0, sp, #8
  rq.clen = indx;
 8007638:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800763a:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800763c:	f000 f974 	bl	8007928 <hci_send_req>
 8007640:	2800      	cmp	r0, #0
 8007642:	db05      	blt.n	8007650 <aci_gatt_write_charac_descriptor+0x54>
    return BLE_STATUS_TIMEOUT;

  return status;
 8007644:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8007648:	b028      	add	sp, #160	; 0xa0
 800764a:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800764c:	2042      	movs	r0, #66	; 0x42
 800764e:	e7fb      	b.n	8007648 <aci_gatt_write_charac_descriptor+0x4c>
    return BLE_STATUS_TIMEOUT;
 8007650:	20ff      	movs	r0, #255	; 0xff
 8007652:	e7f9      	b.n	8007648 <aci_gatt_write_charac_descriptor+0x4c>
 8007654:	0121003f 	.word	0x0121003f

08007658 <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 8007658:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 800765a:	2a14      	cmp	r2, #20
{
 800765c:	b08e      	sub	sp, #56	; 0x38
 800765e:	4614      	mov	r4, r2
  if(val_len > sizeof(cp.attr_val))
 8007660:	d820      	bhi.n	80076a4 <aci_gatt_write_without_response+0x4c>
    return BLE_STATUS_INVALID_PARAMS;

  cp.conn_handle = htobs(conn_handle);
 8007662:	f8ad 001c 	strh.w	r0, [sp, #28]
  cp.attr_handle = htobs(attr_handle);
 8007666:	f8ad 101e 	strh.w	r1, [sp, #30]
  cp.val_len = val_len;
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 800766a:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 800766e:	4619      	mov	r1, r3
  cp.val_len = val_len;
 8007670:	f88d 2020 	strb.w	r2, [sp, #32]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 8007674:	f000 fcac 	bl	8007fd0 <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 8007678:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <aci_gatt_write_without_response+0x54>)
 800767a:	2100      	movs	r1, #0
 800767c:	e9cd 3101 	strd	r3, r1, [sp, #4]
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
  rq.cparam = &cp;
 8007680:	ab07      	add	r3, sp, #28
 8007682:	9303      	str	r3, [sp, #12]
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
  rq.rparam = &status;
 8007684:	f10d 0303 	add.w	r3, sp, #3
 8007688:	9305      	str	r3, [sp, #20]
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 800768a:	3405      	adds	r4, #5
  rq.rlen = 1;
 800768c:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800768e:	a801      	add	r0, sp, #4
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 8007690:	9404      	str	r4, [sp, #16]
  rq.rlen = 1;
 8007692:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8007694:	f000 f948 	bl	8007928 <hci_send_req>
 8007698:	2800      	cmp	r0, #0
 800769a:	db05      	blt.n	80076a8 <aci_gatt_write_without_response+0x50>
    return BLE_STATUS_TIMEOUT;

  return status;
 800769c:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 80076a0:	b00e      	add	sp, #56	; 0x38
 80076a2:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80076a4:	2042      	movs	r0, #66	; 0x42
 80076a6:	e7fb      	b.n	80076a0 <aci_gatt_write_without_response+0x48>
    return BLE_STATUS_TIMEOUT;
 80076a8:	20ff      	movs	r0, #255	; 0xff
 80076aa:	e7f9      	b.n	80076a0 <aci_gatt_write_without_response+0x48>
 80076ac:	0123003f 	.word	0x0123003f

080076b0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 80076b0:	b510      	push	{r4, lr}
 80076b2:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 80076b4:	2c7e      	cmp	r4, #126	; 0x7e
{
 80076b6:	b0a8      	sub	sp, #160	; 0xa0
 80076b8:	4611      	mov	r1, r2
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 80076ba:	d81f      	bhi.n	80076fc <aci_hal_write_config_data+0x4c>
  indx++;
    
  buffer[indx] = len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 80076bc:	4622      	mov	r2, r4
  buffer[indx] = offset;
 80076be:	f88d 0020 	strb.w	r0, [sp, #32]
  BLUENRG_memcpy(buffer + indx, val, len);
 80076c2:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  buffer[indx] = len;
 80076c6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  BLUENRG_memcpy(buffer + indx, val, len);
 80076ca:	f000 fc81 	bl	8007fd0 <memcpy>
  indx +=  len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 80076ce:	4b0d      	ldr	r3, [pc, #52]	; (8007704 <aci_hal_write_config_data+0x54>)
 80076d0:	2100      	movs	r1, #0
 80076d2:	e9cd 3102 	strd	r3, r1, [sp, #8]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
  rq.cparam = (void *)buffer;
 80076d6:	ab08      	add	r3, sp, #32
 80076d8:	9304      	str	r3, [sp, #16]
  indx +=  len;
 80076da:	3402      	adds	r4, #2
  rq.clen = indx;
  rq.rparam = &status;
 80076dc:	f10d 0307 	add.w	r3, sp, #7
 80076e0:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 80076e2:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 80076e4:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80076e6:	a802      	add	r0, sp, #8
  rq.clen = indx;
 80076e8:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 80076ea:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80076ec:	f000 f91c 	bl	8007928 <hci_send_req>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	db05      	blt.n	8007700 <aci_hal_write_config_data+0x50>
    return BLE_STATUS_TIMEOUT;

  return status;
 80076f4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80076f8:	b028      	add	sp, #160	; 0xa0
 80076fa:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80076fc:	2042      	movs	r0, #66	; 0x42
 80076fe:	e7fb      	b.n	80076f8 <aci_hal_write_config_data+0x48>
    return BLE_STATUS_TIMEOUT;
 8007700:	20ff      	movs	r0, #255	; 0xff
 8007702:	e7f9      	b.n	80076f8 <aci_hal_write_config_data+0x48>
 8007704:	000c003f 	.word	0x000c003f

08007708 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8007708:	b500      	push	{lr}
 800770a:	b089      	sub	sp, #36	; 0x24
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 800770c:	4b0d      	ldr	r3, [pc, #52]	; (8007744 <aci_hal_set_tx_power_level+0x3c>)
  cp.pa_level = pa_level;
 800770e:	f88d 1005 	strb.w	r1, [sp, #5]
  rq.ogf = OGF_VENDOR_CMD;
 8007712:	2100      	movs	r1, #0
 8007714:	e9cd 3102 	strd	r3, r1, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
  rq.cparam = &cp;
 8007718:	ab01      	add	r3, sp, #4
 800771a:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800771c:	2302      	movs	r3, #2
 800771e:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 8007720:	f10d 0303 	add.w	r3, sp, #3
  cp.en_high_power = en_high_power;
 8007724:	f88d 0004 	strb.w	r0, [sp, #4]
  rq.rparam = &status;
 8007728:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 800772a:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800772c:	2301      	movs	r3, #1
 800772e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8007730:	f000 f8fa 	bl	8007928 <hci_send_req>
 8007734:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8007736:	bfac      	ite	ge
 8007738:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800773c:	20ff      	movlt	r0, #255	; 0xff
}
 800773e:	b009      	add	sp, #36	; 0x24
 8007740:	f85d fb04 	ldr.w	pc, [sp], #4
 8007744:	000f003f 	.word	0x000f003f

08007748 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8007748:	b530      	push	{r4, r5, lr}
 800774a:	b085      	sub	sp, #20
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800774c:	f10d 030e 	add.w	r3, sp, #14
 8007750:	9300      	str	r3, [sp, #0]
{
 8007752:	4605      	mov	r5, r0
 8007754:	460c      	mov	r4, r1
  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8007756:	ab03      	add	r3, sp, #12
 8007758:	f10d 0209 	add.w	r2, sp, #9
 800775c:	f10d 010a 	add.w	r1, sp, #10
 8007760:	a802      	add	r0, sp, #8
 8007762:	f000 f82b 	bl	80077bc <hci_le_read_local_version>
 8007766:	b2c0      	uxtb	r0, r0
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8007768:	b968      	cbnz	r0, 8007786 <getBlueNRGVersion+0x3e>
    *hwVersion = hci_revision >> 8;
 800776a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800776e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    *hwVersion = hci_revision >> 8;
 8007772:	0a0b      	lsrs	r3, r1, #8
 8007774:	702b      	strb	r3, [r5, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8007776:	f002 030f 	and.w	r3, r2, #15
 800777a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800777e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8007782:	4313      	orrs	r3, r2
 8007784:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 8007786:	b005      	add	sp, #20
 8007788:	bd30      	pop	{r4, r5, pc}

0800778a <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800778a:	b500      	push	{lr}
 800778c:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_HOST_CTL;
 800778e:	f04f 1303 	mov.w	r3, #196611	; 0x30003
 8007792:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_RESET;
  rq.rparam = &status;
 8007794:	f10d 0307 	add.w	r3, sp, #7
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007798:	2100      	movs	r1, #0
  rq.rparam = &status;
 800779a:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 800779c:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800779e:	2301      	movs	r3, #1
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80077a0:	e9cd 1103 	strd	r1, r1, [sp, #12]
 80077a4:	9105      	str	r1, [sp, #20]
  rq.rlen = 1;
 80077a6:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80077a8:	f000 f8be 	bl	8007928 <hci_send_req>
 80077ac:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 80077ae:	bfac      	ite	ge
 80077b0:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80077b4:	20ff      	movlt	r0, #255	; 0xff
}
 80077b6:	b009      	add	sp, #36	; 0x24
 80077b8:	f85d fb04 	ldr.w	pc, [sp], #4

080077bc <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80077bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077be:	b08b      	sub	sp, #44	; 0x2c
 80077c0:	4607      	mov	r7, r0
 80077c2:	461c      	mov	r4, r3
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80077c4:	a801      	add	r0, sp, #4
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_INFO_PARAM;
 80077c6:	4b18      	ldr	r3, [pc, #96]	; (8007828 <hci_le_read_local_version+0x6c>)
 80077c8:	9304      	str	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
 80077ca:	9008      	str	r0, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 80077cc:	2309      	movs	r3, #9
{
 80077ce:	460e      	mov	r6, r1
  
  if (hci_send_req(&rq, FALSE) < 0)
 80077d0:	a804      	add	r0, sp, #16
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80077d2:	2100      	movs	r1, #0
{
 80077d4:	4615      	mov	r5, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80077d6:	e9cd 1101 	strd	r1, r1, [sp, #4]
 80077da:	f88d 100c 	strb.w	r1, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80077de:	e9cd 1105 	strd	r1, r1, [sp, #20]
 80077e2:	9107      	str	r1, [sp, #28]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 80077e4:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 80077e6:	f000 f89f 	bl	8007928 <hci_send_req>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	db19      	blt.n	8007822 <hci_le_read_local_version+0x66>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 80077ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80077f2:	b9a0      	cbnz	r0, 800781e <hci_le_read_local_version+0x62>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 80077f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80077f8:	703b      	strb	r3, [r7, #0]
  *hci_revision =  btohs(resp.hci_revision);
  *lmp_pal_version = resp.lmp_pal_version;
  *manufacturer_name = btohs(resp.manufacturer_name);
 80077fa:	9a02      	ldr	r2, [sp, #8]
  *hci_revision =  btohs(resp.hci_revision);
 80077fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007800:	8033      	strh	r3, [r6, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8007802:	f3c2 220f 	ubfx	r2, r2, #8, #16
  *lmp_pal_version = resp.lmp_pal_version;
 8007806:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800780a:	702b      	strb	r3, [r5, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800780c:	8022      	strh	r2, [r4, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800780e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8007812:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8007816:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800781a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800781c:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 800781e:	b00b      	add	sp, #44	; 0x2c
 8007820:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 8007822:	20ff      	movs	r0, #255	; 0xff
 8007824:	e7fb      	b.n	800781e <hci_le_read_local_version+0x62>
 8007826:	bf00      	nop
 8007828:	00010004 	.word	0x00010004

0800782c <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800782c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800782e:	b091      	sub	sp, #68	; 0x44
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8007830:	ad08      	add	r5, sp, #32
 8007832:	2420      	movs	r4, #32
{
 8007834:	4606      	mov	r6, r0
 8007836:	460f      	mov	r7, r1
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8007838:	4622      	mov	r2, r4
 800783a:	2100      	movs	r1, #0
 800783c:	4628      	mov	r0, r5
 800783e:	f000 fbd2 	bl	8007fe6 <memset>
  scan_resp_cp.length = length;
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8007842:	2e1f      	cmp	r6, #31
 8007844:	4632      	mov	r2, r6
 8007846:	4639      	mov	r1, r7
 8007848:	bf28      	it	cs
 800784a:	221f      	movcs	r2, #31
 800784c:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  scan_resp_cp.length = length;
 8007850:	f88d 6020 	strb.w	r6, [sp, #32]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8007854:	f000 fbbc 	bl	8007fd0 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_LE_CTL;
 8007858:	4b0a      	ldr	r3, [pc, #40]	; (8007884 <hci_le_set_scan_resp_data+0x58>)
 800785a:	2100      	movs	r1, #0
 800785c:	e9cd 3102 	strd	r3, r1, [sp, #8]
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
  rq.cparam = &scan_resp_cp;
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
  rq.rparam = &status;
 8007860:	f10d 0307 	add.w	r3, sp, #7
 8007864:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007866:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8007868:	2301      	movs	r3, #1
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800786a:	e9cd 5404 	strd	r5, r4, [sp, #16]
  rq.rlen = 1;
 800786e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8007870:	f000 f85a 	bl	8007928 <hci_send_req>
 8007874:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;
 8007876:	bfac      	ite	ge
 8007878:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800787c:	20ff      	movlt	r0, #255	; 0xff
}
 800787e:	b011      	add	sp, #68	; 0x44
 8007880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007882:	bf00      	nop
 8007884:	00090008 	.word	0x00090008

08007888 <move_list.constprop.0>:
  *
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
 8007888:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
  {
    list_remove_tail(src_list, &tmp_node);
    list_insert_head(dest_list, tmp_node);
 800788a:	4d08      	ldr	r5, [pc, #32]	; (80078ac <move_list.constprop.0+0x24>)
static void move_list(tListNode * dest_list, tListNode * src_list)
 800788c:	4604      	mov	r4, r0
  while (!list_is_empty(src_list))
 800788e:	4620      	mov	r0, r4
 8007890:	f000 f95f 	bl	8007b52 <list_is_empty>
 8007894:	b108      	cbz	r0, 800789a <move_list.constprop.0+0x12>
  }
}
 8007896:	b003      	add	sp, #12
 8007898:	bd30      	pop	{r4, r5, pc}
    list_remove_tail(src_list, &tmp_node);
 800789a:	a901      	add	r1, sp, #4
 800789c:	4620      	mov	r0, r4
 800789e:	f000 f997 	bl	8007bd0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80078a2:	9901      	ldr	r1, [sp, #4]
 80078a4:	4628      	mov	r0, r5
 80078a6:	f000 f95e 	bl	8007b66 <list_insert_head>
 80078aa:	e7f0      	b.n	800788e <move_list.constprop.0+0x6>
 80078ac:	200029f4 	.word	0x200029f4

080078b0 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80078b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b4:	4d11      	ldr	r5, [pc, #68]	; (80078fc <hci_init+0x4c>)
  uint8_t index;
  
  if(UserEvtRx != NULL)
 80078b6:	b100      	cbz	r0, 80078ba <hci_init+0xa>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80078b8:	61e8      	str	r0, [r5, #28]
  }
  
  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80078ba:	f7f8 ff2f 	bl	800071c <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80078be:	4810      	ldr	r0, [pc, #64]	; (8007900 <hci_init+0x50>)
  list_init_head(&hciReadPktRxQueue);
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80078c0:	4f10      	ldr	r7, [pc, #64]	; (8007904 <hci_init+0x54>)
 80078c2:	4e0f      	ldr	r6, [pc, #60]	; (8007900 <hci_init+0x50>)
  list_init_head(&hciReadPktPool);
 80078c4:	f000 f942 	bl	8007b4c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80078c8:	480f      	ldr	r0, [pc, #60]	; (8007908 <hci_init+0x58>)
 80078ca:	f000 f93f 	bl	8007b4c <list_init_head>
 80078ce:	2400      	movs	r4, #0
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80078d0:	f04f 088c 	mov.w	r8, #140	; 0x8c
 80078d4:	fb08 7104 	mla	r1, r8, r4, r7
 80078d8:	4630      	mov	r0, r6
 80078da:	3401      	adds	r4, #1
 80078dc:	f000 f94f 	bl	8007b7e <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80078e0:	2c05      	cmp	r4, #5
 80078e2:	d1f7      	bne.n	80078d4 <hci_init+0x24>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 80078e4:	682b      	ldr	r3, [r5, #0]
 80078e6:	b10b      	cbz	r3, 80078ec <hci_init+0x3c>
 80078e8:	2000      	movs	r0, #0
 80078ea:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 80078ec:	68ab      	ldr	r3, [r5, #8]
 80078ee:	b113      	cbz	r3, 80078f6 <hci_init+0x46>
}
 80078f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 80078f4:	4718      	bx	r3
}
 80078f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078fa:	bf00      	nop
 80078fc:	20000468 	.word	0x20000468
 8007900:	200029ec 	.word	0x200029ec
 8007904:	20000488 	.word	0x20000488
 8007908:	200029f4 	.word	0x200029f4

0800790c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800790c:	4b05      	ldr	r3, [pc, #20]	; (8007924 <hci_register_io_bus+0x18>)
 800790e:	6802      	ldr	r2, [r0, #0]
 8007910:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 8007912:	68c2      	ldr	r2, [r0, #12]
 8007914:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 8007916:	6902      	ldr	r2, [r0, #16]
 8007918:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 800791a:	6982      	ldr	r2, [r0, #24]
 800791c:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;    
 800791e:	6882      	ldr	r2, [r0, #8]
 8007920:	609a      	str	r2, [r3, #8]
}
 8007922:	4770      	bx	lr
 8007924:	20000468 	.word	0x20000468

08007928 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8007928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800792c:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800792e:	8846      	ldrh	r6, [r0, #2]
 8007930:	f8b0 8000 	ldrh.w	r8, [r0]
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8007934:	4f59      	ldr	r7, [pc, #356]	; (8007a9c <hci_send_req+0x174>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8007936:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8007aa4 <hci_send_req+0x17c>
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800793a:	2300      	movs	r3, #0
{
 800793c:	4604      	mov	r4, r0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800793e:	a802      	add	r0, sp, #8
{
 8007940:	460d      	mov	r5, r1
  tHciDataPacket * hciReadPacket = NULL;
 8007942:	9301      	str	r3, [sp, #4]
  list_init_head(&hciTempQueue);
 8007944:	f000 f902 	bl	8007b4c <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8007948:	4638      	mov	r0, r7
 800794a:	f000 f953 	bl	8007bf4 <list_get_size>
 800794e:	2801      	cmp	r0, #1
 8007950:	dd53      	ble.n	80079fa <hci_send_req+0xd2>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8007952:	8863      	ldrh	r3, [r4, #2]
 8007954:	8822      	ldrh	r2, [r4, #0]

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8007956:	7b27      	ldrb	r7, [r4, #12]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8007958:	68a1      	ldr	r1, [r4, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800795a:	f88d 7013 	strb.w	r7, [sp, #19]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800795e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007962:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 8007966:	2201      	movs	r2, #1
 8007968:	f88d 2010 	strb.w	r2, [sp, #16]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800796c:	a805      	add	r0, sp, #20
 800796e:	463a      	mov	r2, r7
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8007970:	f8ad 3011 	strh.w	r3, [sp, #17]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8007974:	f000 fb2c 	bl	8007fd0 <memcpy>
  if (hciContext.io.Send)
 8007978:	4b49      	ldr	r3, [pc, #292]	; (8007aa0 <hci_send_req+0x178>)
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	b113      	cbz	r3, 8007984 <hci_send_req+0x5c>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800797e:	1d39      	adds	r1, r7, #4
 8007980:	a804      	add	r0, sp, #16
 8007982:	4798      	blx	r3
  
  if (async)
 8007984:	2d00      	cmp	r5, #0
 8007986:	d178      	bne.n	8007a7a <hci_send_req+0x152>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8007988:	f3c6 0509 	ubfx	r5, r6, #0, #10
 800798c:	ea45 2588 	orr.w	r5, r5, r8, lsl #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8007990:	4e44      	ldr	r6, [pc, #272]	; (8007aa4 <hci_send_req+0x17c>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8007992:	4f42      	ldr	r7, [pc, #264]	; (8007a9c <hci_send_req+0x174>)
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8007994:	b2ad      	uxth	r5, r5
    uint32_t tickstart = HAL_GetTick();
 8007996:	f7fb fa5f 	bl	8002e58 <HAL_GetTick>
 800799a:	4680      	mov	r8, r0
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800799c:	f7fb fa5c 	bl	8002e58 <HAL_GetTick>
 80079a0:	eba0 0008 	sub.w	r0, r0, r8
 80079a4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80079a8:	d84a      	bhi.n	8007a40 <hci_send_req+0x118>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80079aa:	4630      	mov	r0, r6
 80079ac:	f000 f8d1 	bl	8007b52 <list_is_empty>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d1f3      	bne.n	800799c <hci_send_req+0x74>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80079b4:	a901      	add	r1, sp, #4
 80079b6:	4630      	mov	r0, r6
 80079b8:	f000 f8f8 	bl	8007bac <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 80079bc:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 80079be:	7a0b      	ldrb	r3, [r1, #8]
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d109      	bne.n	80079d8 <hci_send_req+0xb0>
      switch (event_pckt->evt) 
 80079c4:	7a48      	ldrb	r0, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80079c6:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 80079ca:	280f      	cmp	r0, #15
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80079cc:	f1a3 0203 	sub.w	r2, r3, #3
      switch (event_pckt->evt) 
 80079d0:	d02c      	beq.n	8007a2c <hci_send_req+0x104>
 80079d2:	d81b      	bhi.n	8007a0c <hci_send_req+0xe4>
 80079d4:	280e      	cmp	r0, #14
 80079d6:	d052      	beq.n	8007a7e <hci_send_req+0x156>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80079d8:	4638      	mov	r0, r7
 80079da:	f000 f8ba 	bl	8007b52 <list_is_empty>
 80079de:	2800      	cmp	r0, #0
 80079e0:	d058      	beq.n	8007a94 <hci_send_req+0x16c>
 80079e2:	4630      	mov	r0, r6
 80079e4:	f000 f8b5 	bl	8007b52 <list_is_empty>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d053      	beq.n	8007a94 <hci_send_req+0x16c>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80079ec:	9901      	ldr	r1, [sp, #4]
 80079ee:	4638      	mov	r0, r7
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80079f0:	f000 f8c5 	bl	8007b7e <list_insert_tail>
      hciReadPacket=NULL;
 80079f4:	2300      	movs	r3, #0
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	e7cd      	b.n	8007996 <hci_send_req+0x6e>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80079fa:	a904      	add	r1, sp, #16
 80079fc:	4648      	mov	r0, r9
 80079fe:	f000 f8d5 	bl	8007bac <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8007a02:	9904      	ldr	r1, [sp, #16]
 8007a04:	4638      	mov	r0, r7
 8007a06:	f000 f8ba 	bl	8007b7e <list_insert_tail>
 8007a0a:	e79d      	b.n	8007948 <hci_send_req+0x20>
      switch (event_pckt->evt) 
 8007a0c:	2810      	cmp	r0, #16
 8007a0e:	d017      	beq.n	8007a40 <hci_send_req+0x118>
 8007a10:	283e      	cmp	r0, #62	; 0x3e
 8007a12:	d1e1      	bne.n	80079d8 <hci_send_req+0xb0>
        if (me->subevent != r->event)
 8007a14:	7ac8      	ldrb	r0, [r1, #11]
 8007a16:	6862      	ldr	r2, [r4, #4]
 8007a18:	4290      	cmp	r0, r2
 8007a1a:	d1dd      	bne.n	80079d8 <hci_send_req+0xb0>
        len -= 1;
 8007a1c:	1f1a      	subs	r2, r3, #4
        r->rlen = MIN(len, r->rlen);
 8007a1e:	6963      	ldr	r3, [r4, #20]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	bf28      	it	cs
 8007a24:	461a      	movcs	r2, r3
 8007a26:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8007a28:	310c      	adds	r1, #12
 8007a2a:	e01c      	b.n	8007a66 <hci_send_req+0x13e>
        if (cs->opcode != opcode)
 8007a2c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 8007a30:	42ab      	cmp	r3, r5
 8007a32:	d105      	bne.n	8007a40 <hci_send_req+0x118>
        if (r->event != EVT_CMD_STATUS) {
 8007a34:	6863      	ldr	r3, [r4, #4]
 8007a36:	2b0f      	cmp	r3, #15
 8007a38:	d00f      	beq.n	8007a5a <hci_send_req+0x132>
          if (cs->status) {
 8007a3a:	7acb      	ldrb	r3, [r1, #11]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d0cb      	beq.n	80079d8 <hci_send_req+0xb0>
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8007a40:	9901      	ldr	r1, [sp, #4]
 8007a42:	b111      	cbz	r1, 8007a4a <hci_send_req+0x122>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8007a44:	4815      	ldr	r0, [pc, #84]	; (8007a9c <hci_send_req+0x174>)
 8007a46:	f000 f88e 	bl	8007b66 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 8007a4a:	a802      	add	r0, sp, #8
 8007a4c:	f7ff ff1c 	bl	8007888 <move_list.constprop.0>
  return -1;
 8007a50:	f04f 30ff 	mov.w	r0, #4294967295
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);
  return 0;
}
 8007a54:	b025      	add	sp, #148	; 0x94
 8007a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        r->rlen = MIN(len, r->rlen);
 8007a5a:	6963      	ldr	r3, [r4, #20]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	bf28      	it	cs
 8007a60:	461a      	movcs	r2, r3
 8007a62:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8007a64:	310b      	adds	r1, #11
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8007a66:	6920      	ldr	r0, [r4, #16]
 8007a68:	f000 fab2 	bl	8007fd0 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8007a6c:	480b      	ldr	r0, [pc, #44]	; (8007a9c <hci_send_req+0x174>)
 8007a6e:	9901      	ldr	r1, [sp, #4]
 8007a70:	f000 f879 	bl	8007b66 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8007a74:	a802      	add	r0, sp, #8
 8007a76:	f7ff ff07 	bl	8007888 <move_list.constprop.0>
    return 0;
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	e7ea      	b.n	8007a54 <hci_send_req+0x12c>
        if (cc->opcode != opcode)
 8007a7e:	898a      	ldrh	r2, [r1, #12]
 8007a80:	42aa      	cmp	r2, r5
 8007a82:	d1dd      	bne.n	8007a40 <hci_send_req+0x118>
        len -= EVT_CMD_COMPLETE_SIZE;
 8007a84:	1f9a      	subs	r2, r3, #6
        r->rlen = MIN(len, r->rlen);
 8007a86:	6963      	ldr	r3, [r4, #20]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	bf28      	it	cs
 8007a8c:	461a      	movcs	r2, r3
 8007a8e:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8007a90:	310e      	adds	r1, #14
 8007a92:	e7e8      	b.n	8007a66 <hci_send_req+0x13e>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8007a94:	9901      	ldr	r1, [sp, #4]
 8007a96:	a802      	add	r0, sp, #8
 8007a98:	e7aa      	b.n	80079f0 <hci_send_req+0xc8>
 8007a9a:	bf00      	nop
 8007a9c:	200029ec 	.word	0x200029ec
 8007aa0:	20000468 	.word	0x20000468
 8007aa4:	200029f4 	.word	0x200029f4

08007aa8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007aa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  tHciDataPacket * hciReadPacket = NULL;
 8007aaa:	2300      	movs	r3, #0
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8007aac:	4c0b      	ldr	r4, [pc, #44]	; (8007adc <hci_user_evt_proc+0x34>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
    if (hciContext.UserEvtRx != NULL)
 8007aae:	4d0c      	ldr	r5, [pc, #48]	; (8007ae0 <hci_user_evt_proc+0x38>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
    }
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8007ab0:	4e0c      	ldr	r6, [pc, #48]	; (8007ae4 <hci_user_evt_proc+0x3c>)
  tHciDataPacket * hciReadPacket = NULL;
 8007ab2:	9301      	str	r3, [sp, #4]
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f000 f84c 	bl	8007b52 <list_is_empty>
 8007aba:	b108      	cbz	r0, 8007ac0 <hci_user_evt_proc+0x18>
  }
}
 8007abc:	b002      	add	sp, #8
 8007abe:	bd70      	pop	{r4, r5, r6, pc}
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8007ac0:	a901      	add	r1, sp, #4
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f000 f872 	bl	8007bac <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8007ac8:	69eb      	ldr	r3, [r5, #28]
 8007aca:	b113      	cbz	r3, 8007ad2 <hci_user_evt_proc+0x2a>
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8007acc:	9801      	ldr	r0, [sp, #4]
 8007ace:	3008      	adds	r0, #8
 8007ad0:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8007ad2:	9901      	ldr	r1, [sp, #4]
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f000 f852 	bl	8007b7e <list_insert_tail>
 8007ada:	e7eb      	b.n	8007ab4 <hci_user_evt_proc+0xc>
 8007adc:	200029f4 	.word	0x200029f4
 8007ae0:	20000468 	.word	0x20000468
 8007ae4:	200029ec 	.word	0x200029ec

08007ae8 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8007ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tHciDataPacket * hciReadPacket = NULL;
 8007aea:	2300      	movs	r3, #0
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8007aec:	4814      	ldr	r0, [pc, #80]	; (8007b40 <hci_notify_asynch_evt+0x58>)
  tHciDataPacket * hciReadPacket = NULL;
 8007aee:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8007af0:	f000 f82f 	bl	8007b52 <list_is_empty>
 8007af4:	bb00      	cbnz	r0, 8007b38 <hci_notify_asynch_evt+0x50>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8007af6:	a901      	add	r1, sp, #4
 8007af8:	4811      	ldr	r0, [pc, #68]	; (8007b40 <hci_notify_asynch_evt+0x58>)
 8007afa:	f000 f857 	bl	8007bac <list_remove_head>
    
    if (hciContext.io.Receive)
 8007afe:	4b11      	ldr	r3, [pc, #68]	; (8007b44 <hci_notify_asynch_evt+0x5c>)
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	b1db      	cbz	r3, 8007b3c <hci_notify_asynch_evt+0x54>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8007b04:	9801      	ldr	r0, [sp, #4]
 8007b06:	2180      	movs	r1, #128	; 0x80
 8007b08:	3008      	adds	r0, #8
 8007b0a:	4798      	blx	r3
 8007b0c:	b2c4      	uxtb	r4, r0
      if (data_len > 0)
      {                    
        hciReadPacket->data_len = data_len;
 8007b0e:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 8007b10:	b174      	cbz	r4, 8007b30 <hci_notify_asynch_evt+0x48>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8007b12:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 8007b14:	f881 4088 	strb.w	r4, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d109      	bne.n	8007b30 <hci_notify_asynch_evt+0x48>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8007b1c:	7a8b      	ldrb	r3, [r1, #10]
 8007b1e:	1ee0      	subs	r0, r4, #3
 8007b20:	4283      	cmp	r3, r0
 8007b22:	d105      	bne.n	8007b30 <hci_notify_asynch_evt+0x48>
        if (verify_packet(hciReadPacket) == 0)
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8007b24:	4808      	ldr	r0, [pc, #32]	; (8007b48 <hci_notify_asynch_evt+0x60>)
 8007b26:	f000 f82a 	bl	8007b7e <list_insert_tail>
  int32_t ret = 0;
 8007b2a:	2000      	movs	r0, #0
  {
    ret = 1;
  }
  return ret;

}
 8007b2c:	b003      	add	sp, #12
 8007b2e:	bd30      	pop	{r4, r5, pc}
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8007b30:	4803      	ldr	r0, [pc, #12]	; (8007b40 <hci_notify_asynch_evt+0x58>)
 8007b32:	f000 f818 	bl	8007b66 <list_insert_head>
 8007b36:	e7f8      	b.n	8007b2a <hci_notify_asynch_evt+0x42>
    ret = 1;
 8007b38:	2001      	movs	r0, #1
 8007b3a:	e7f7      	b.n	8007b2c <hci_notify_asynch_evt+0x44>
  int32_t ret = 0;
 8007b3c:	4618      	mov	r0, r3
  return ret;
 8007b3e:	e7f5      	b.n	8007b2c <hci_notify_asynch_evt+0x44>
 8007b40:	200029ec 	.word	0x200029ec
 8007b44:	20000468 	.word	0x20000468
 8007b48:	200029f4 	.word	0x200029f4

08007b4c <list_init_head>:
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
  listHead->prev = listHead;	
 8007b4c:	e9c0 0000 	strd	r0, r0, [r0]
}
 8007b50:	4770      	bx	lr

08007b52 <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007b52:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007b56:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8007b58:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 8007b5a:	1a1b      	subs	r3, r3, r0
 8007b5c:	4258      	negs	r0, r3
 8007b5e:	4158      	adcs	r0, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b60:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 8007b64:	4770      	bx	lr

08007b66 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007b66:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007b6a:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8007b6c:	6802      	ldr	r2, [r0, #0]
  node->prev = listHead;
 8007b6e:	e9c1 2000 	strd	r2, r0, [r1]
  listHead->next = node;
 8007b72:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8007b74:	680a      	ldr	r2, [r1, #0]
 8007b76:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b78:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007b7c:	4770      	bx	lr

08007b7e <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007b7e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007b82:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 8007b84:	6842      	ldr	r2, [r0, #4]
 8007b86:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 8007b88:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 8007b8a:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8007b8c:	684a      	ldr	r2, [r1, #4]
 8007b8e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b90:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007b94:	4770      	bx	lr

08007b96 <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007b96:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007b9a:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8007b9c:	e9d0 1300 	ldrd	r1, r3, [r0]
 8007ba0:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 8007ba2:	6801      	ldr	r1, [r0, #0]
 8007ba4:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ba6:	f382 8810 	msr	PRIMASK, r2
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007baa:	4770      	bx	lr

08007bac <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007bb0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007bb4:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8007bb6:	6803      	ldr	r3, [r0, #0]
 8007bb8:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->next);
 8007bba:	6800      	ldr	r0, [r0, #0]
 8007bbc:	f7ff ffeb 	bl	8007b96 <list_remove_node>
  (*node)->next = NULL;
 8007bc0:	6822      	ldr	r2, [r4, #0]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8007bc6:	6822      	ldr	r2, [r4, #0]
 8007bc8:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bca:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007bce:	bd38      	pop	{r3, r4, r5, pc}

08007bd0 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007bd4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007bd8:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8007bda:	6843      	ldr	r3, [r0, #4]
 8007bdc:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->prev);
 8007bde:	6840      	ldr	r0, [r0, #4]
 8007be0:	f7ff ffd9 	bl	8007b96 <list_remove_node>
  (*node)->next = NULL;
 8007be4:	6822      	ldr	r2, [r4, #0]
 8007be6:	2300      	movs	r3, #0
 8007be8:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8007bea:	6822      	ldr	r2, [r4, #0]
 8007bec:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bee:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}

08007bf4 <list_get_size>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007bf4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007bf8:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8007bfa:	6802      	ldr	r2, [r0, #0]
  int size = 0;
 8007bfc:	2300      	movs	r3, #0
  while (temp != listHead)
 8007bfe:	4282      	cmp	r2, r0
 8007c00:	d103      	bne.n	8007c0a <list_get_size+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c02:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	4770      	bx	lr
    size++;
 8007c0a:	3301      	adds	r3, #1
    temp = temp->next;		
 8007c0c:	6812      	ldr	r2, [r2, #0]
 8007c0e:	e7f6      	b.n	8007bfe <list_get_size+0xa>

08007c10 <__errno>:
 8007c10:	4b01      	ldr	r3, [pc, #4]	; (8007c18 <__errno+0x8>)
 8007c12:	6818      	ldr	r0, [r3, #0]
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	200001fc 	.word	0x200001fc

08007c1c <__sflush_r>:
 8007c1c:	898a      	ldrh	r2, [r1, #12]
 8007c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c22:	4605      	mov	r5, r0
 8007c24:	0710      	lsls	r0, r2, #28
 8007c26:	460c      	mov	r4, r1
 8007c28:	d458      	bmi.n	8007cdc <__sflush_r+0xc0>
 8007c2a:	684b      	ldr	r3, [r1, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	dc05      	bgt.n	8007c3c <__sflush_r+0x20>
 8007c30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	dc02      	bgt.n	8007c3c <__sflush_r+0x20>
 8007c36:	2000      	movs	r0, #0
 8007c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c3e:	2e00      	cmp	r6, #0
 8007c40:	d0f9      	beq.n	8007c36 <__sflush_r+0x1a>
 8007c42:	2300      	movs	r3, #0
 8007c44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c48:	682f      	ldr	r7, [r5, #0]
 8007c4a:	6a21      	ldr	r1, [r4, #32]
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	d032      	beq.n	8007cb6 <__sflush_r+0x9a>
 8007c50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	075a      	lsls	r2, r3, #29
 8007c56:	d505      	bpl.n	8007c64 <__sflush_r+0x48>
 8007c58:	6863      	ldr	r3, [r4, #4]
 8007c5a:	1ac0      	subs	r0, r0, r3
 8007c5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c5e:	b10b      	cbz	r3, 8007c64 <__sflush_r+0x48>
 8007c60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c62:	1ac0      	subs	r0, r0, r3
 8007c64:	2300      	movs	r3, #0
 8007c66:	4602      	mov	r2, r0
 8007c68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c6a:	6a21      	ldr	r1, [r4, #32]
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	47b0      	blx	r6
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	d106      	bne.n	8007c84 <__sflush_r+0x68>
 8007c76:	6829      	ldr	r1, [r5, #0]
 8007c78:	291d      	cmp	r1, #29
 8007c7a:	d848      	bhi.n	8007d0e <__sflush_r+0xf2>
 8007c7c:	4a29      	ldr	r2, [pc, #164]	; (8007d24 <__sflush_r+0x108>)
 8007c7e:	40ca      	lsrs	r2, r1
 8007c80:	07d6      	lsls	r6, r2, #31
 8007c82:	d544      	bpl.n	8007d0e <__sflush_r+0xf2>
 8007c84:	2200      	movs	r2, #0
 8007c86:	6062      	str	r2, [r4, #4]
 8007c88:	04d9      	lsls	r1, r3, #19
 8007c8a:	6922      	ldr	r2, [r4, #16]
 8007c8c:	6022      	str	r2, [r4, #0]
 8007c8e:	d504      	bpl.n	8007c9a <__sflush_r+0x7e>
 8007c90:	1c42      	adds	r2, r0, #1
 8007c92:	d101      	bne.n	8007c98 <__sflush_r+0x7c>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b903      	cbnz	r3, 8007c9a <__sflush_r+0x7e>
 8007c98:	6560      	str	r0, [r4, #84]	; 0x54
 8007c9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c9c:	602f      	str	r7, [r5, #0]
 8007c9e:	2900      	cmp	r1, #0
 8007ca0:	d0c9      	beq.n	8007c36 <__sflush_r+0x1a>
 8007ca2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ca6:	4299      	cmp	r1, r3
 8007ca8:	d002      	beq.n	8007cb0 <__sflush_r+0x94>
 8007caa:	4628      	mov	r0, r5
 8007cac:	f000 f9a4 	bl	8007ff8 <_free_r>
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	6360      	str	r0, [r4, #52]	; 0x34
 8007cb4:	e7c0      	b.n	8007c38 <__sflush_r+0x1c>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b0      	blx	r6
 8007cbc:	1c41      	adds	r1, r0, #1
 8007cbe:	d1c8      	bne.n	8007c52 <__sflush_r+0x36>
 8007cc0:	682b      	ldr	r3, [r5, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0c5      	beq.n	8007c52 <__sflush_r+0x36>
 8007cc6:	2b1d      	cmp	r3, #29
 8007cc8:	d001      	beq.n	8007cce <__sflush_r+0xb2>
 8007cca:	2b16      	cmp	r3, #22
 8007ccc:	d101      	bne.n	8007cd2 <__sflush_r+0xb6>
 8007cce:	602f      	str	r7, [r5, #0]
 8007cd0:	e7b1      	b.n	8007c36 <__sflush_r+0x1a>
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd8:	81a3      	strh	r3, [r4, #12]
 8007cda:	e7ad      	b.n	8007c38 <__sflush_r+0x1c>
 8007cdc:	690f      	ldr	r7, [r1, #16]
 8007cde:	2f00      	cmp	r7, #0
 8007ce0:	d0a9      	beq.n	8007c36 <__sflush_r+0x1a>
 8007ce2:	0793      	lsls	r3, r2, #30
 8007ce4:	680e      	ldr	r6, [r1, #0]
 8007ce6:	bf08      	it	eq
 8007ce8:	694b      	ldreq	r3, [r1, #20]
 8007cea:	600f      	str	r7, [r1, #0]
 8007cec:	bf18      	it	ne
 8007cee:	2300      	movne	r3, #0
 8007cf0:	eba6 0807 	sub.w	r8, r6, r7
 8007cf4:	608b      	str	r3, [r1, #8]
 8007cf6:	f1b8 0f00 	cmp.w	r8, #0
 8007cfa:	dd9c      	ble.n	8007c36 <__sflush_r+0x1a>
 8007cfc:	4643      	mov	r3, r8
 8007cfe:	463a      	mov	r2, r7
 8007d00:	6a21      	ldr	r1, [r4, #32]
 8007d02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d04:	4628      	mov	r0, r5
 8007d06:	47b0      	blx	r6
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	dc06      	bgt.n	8007d1a <__sflush_r+0xfe>
 8007d0c:	89a3      	ldrh	r3, [r4, #12]
 8007d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d12:	81a3      	strh	r3, [r4, #12]
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	e78e      	b.n	8007c38 <__sflush_r+0x1c>
 8007d1a:	4407      	add	r7, r0
 8007d1c:	eba8 0800 	sub.w	r8, r8, r0
 8007d20:	e7e9      	b.n	8007cf6 <__sflush_r+0xda>
 8007d22:	bf00      	nop
 8007d24:	20400001 	.word	0x20400001

08007d28 <_fflush_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	690b      	ldr	r3, [r1, #16]
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	460c      	mov	r4, r1
 8007d30:	b1db      	cbz	r3, 8007d6a <_fflush_r+0x42>
 8007d32:	b118      	cbz	r0, 8007d3c <_fflush_r+0x14>
 8007d34:	6983      	ldr	r3, [r0, #24]
 8007d36:	b90b      	cbnz	r3, 8007d3c <_fflush_r+0x14>
 8007d38:	f000 f872 	bl	8007e20 <__sinit>
 8007d3c:	4b0c      	ldr	r3, [pc, #48]	; (8007d70 <_fflush_r+0x48>)
 8007d3e:	429c      	cmp	r4, r3
 8007d40:	d109      	bne.n	8007d56 <_fflush_r+0x2e>
 8007d42:	686c      	ldr	r4, [r5, #4]
 8007d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d48:	b17b      	cbz	r3, 8007d6a <_fflush_r+0x42>
 8007d4a:	4621      	mov	r1, r4
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d52:	f7ff bf63 	b.w	8007c1c <__sflush_r>
 8007d56:	4b07      	ldr	r3, [pc, #28]	; (8007d74 <_fflush_r+0x4c>)
 8007d58:	429c      	cmp	r4, r3
 8007d5a:	d101      	bne.n	8007d60 <_fflush_r+0x38>
 8007d5c:	68ac      	ldr	r4, [r5, #8]
 8007d5e:	e7f1      	b.n	8007d44 <_fflush_r+0x1c>
 8007d60:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <_fflush_r+0x50>)
 8007d62:	429c      	cmp	r4, r3
 8007d64:	bf08      	it	eq
 8007d66:	68ec      	ldreq	r4, [r5, #12]
 8007d68:	e7ec      	b.n	8007d44 <_fflush_r+0x1c>
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	bd38      	pop	{r3, r4, r5, pc}
 8007d6e:	bf00      	nop
 8007d70:	08009888 	.word	0x08009888
 8007d74:	080098a8 	.word	0x080098a8
 8007d78:	08009868 	.word	0x08009868

08007d7c <fflush>:
 8007d7c:	4601      	mov	r1, r0
 8007d7e:	b920      	cbnz	r0, 8007d8a <fflush+0xe>
 8007d80:	4b04      	ldr	r3, [pc, #16]	; (8007d94 <fflush+0x18>)
 8007d82:	4905      	ldr	r1, [pc, #20]	; (8007d98 <fflush+0x1c>)
 8007d84:	6818      	ldr	r0, [r3, #0]
 8007d86:	f000 b8b7 	b.w	8007ef8 <_fwalk_reent>
 8007d8a:	4b04      	ldr	r3, [pc, #16]	; (8007d9c <fflush+0x20>)
 8007d8c:	6818      	ldr	r0, [r3, #0]
 8007d8e:	f7ff bfcb 	b.w	8007d28 <_fflush_r>
 8007d92:	bf00      	nop
 8007d94:	080098c8 	.word	0x080098c8
 8007d98:	08007d29 	.word	0x08007d29
 8007d9c:	200001fc 	.word	0x200001fc

08007da0 <std>:
 8007da0:	2300      	movs	r3, #0
 8007da2:	b510      	push	{r4, lr}
 8007da4:	4604      	mov	r4, r0
 8007da6:	e9c0 3300 	strd	r3, r3, [r0]
 8007daa:	6083      	str	r3, [r0, #8]
 8007dac:	8181      	strh	r1, [r0, #12]
 8007dae:	6643      	str	r3, [r0, #100]	; 0x64
 8007db0:	81c2      	strh	r2, [r0, #14]
 8007db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007db6:	6183      	str	r3, [r0, #24]
 8007db8:	4619      	mov	r1, r3
 8007dba:	2208      	movs	r2, #8
 8007dbc:	305c      	adds	r0, #92	; 0x5c
 8007dbe:	f000 f912 	bl	8007fe6 <memset>
 8007dc2:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <std+0x38>)
 8007dc4:	6263      	str	r3, [r4, #36]	; 0x24
 8007dc6:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <std+0x3c>)
 8007dc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dca:	4b05      	ldr	r3, [pc, #20]	; (8007de0 <std+0x40>)
 8007dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dce:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <std+0x44>)
 8007dd0:	6224      	str	r4, [r4, #32]
 8007dd2:	6323      	str	r3, [r4, #48]	; 0x30
 8007dd4:	bd10      	pop	{r4, pc}
 8007dd6:	bf00      	nop
 8007dd8:	080082a1 	.word	0x080082a1
 8007ddc:	080082c3 	.word	0x080082c3
 8007de0:	080082fb 	.word	0x080082fb
 8007de4:	0800831f 	.word	0x0800831f

08007de8 <_cleanup_r>:
 8007de8:	4901      	ldr	r1, [pc, #4]	; (8007df0 <_cleanup_r+0x8>)
 8007dea:	f000 b885 	b.w	8007ef8 <_fwalk_reent>
 8007dee:	bf00      	nop
 8007df0:	08007d29 	.word	0x08007d29

08007df4 <__sfmoreglue>:
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	1e4a      	subs	r2, r1, #1
 8007df8:	2568      	movs	r5, #104	; 0x68
 8007dfa:	4355      	muls	r5, r2
 8007dfc:	460e      	mov	r6, r1
 8007dfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e02:	f000 f947 	bl	8008094 <_malloc_r>
 8007e06:	4604      	mov	r4, r0
 8007e08:	b140      	cbz	r0, 8007e1c <__sfmoreglue+0x28>
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	e9c0 1600 	strd	r1, r6, [r0]
 8007e10:	300c      	adds	r0, #12
 8007e12:	60a0      	str	r0, [r4, #8]
 8007e14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e18:	f000 f8e5 	bl	8007fe6 <memset>
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}

08007e20 <__sinit>:
 8007e20:	6983      	ldr	r3, [r0, #24]
 8007e22:	b510      	push	{r4, lr}
 8007e24:	4604      	mov	r4, r0
 8007e26:	bb33      	cbnz	r3, 8007e76 <__sinit+0x56>
 8007e28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007e2c:	6503      	str	r3, [r0, #80]	; 0x50
 8007e2e:	4b12      	ldr	r3, [pc, #72]	; (8007e78 <__sinit+0x58>)
 8007e30:	4a12      	ldr	r2, [pc, #72]	; (8007e7c <__sinit+0x5c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6282      	str	r2, [r0, #40]	; 0x28
 8007e36:	4298      	cmp	r0, r3
 8007e38:	bf04      	itt	eq
 8007e3a:	2301      	moveq	r3, #1
 8007e3c:	6183      	streq	r3, [r0, #24]
 8007e3e:	f000 f81f 	bl	8007e80 <__sfp>
 8007e42:	6060      	str	r0, [r4, #4]
 8007e44:	4620      	mov	r0, r4
 8007e46:	f000 f81b 	bl	8007e80 <__sfp>
 8007e4a:	60a0      	str	r0, [r4, #8]
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f000 f817 	bl	8007e80 <__sfp>
 8007e52:	2200      	movs	r2, #0
 8007e54:	60e0      	str	r0, [r4, #12]
 8007e56:	2104      	movs	r1, #4
 8007e58:	6860      	ldr	r0, [r4, #4]
 8007e5a:	f7ff ffa1 	bl	8007da0 <std>
 8007e5e:	2201      	movs	r2, #1
 8007e60:	2109      	movs	r1, #9
 8007e62:	68a0      	ldr	r0, [r4, #8]
 8007e64:	f7ff ff9c 	bl	8007da0 <std>
 8007e68:	2202      	movs	r2, #2
 8007e6a:	2112      	movs	r1, #18
 8007e6c:	68e0      	ldr	r0, [r4, #12]
 8007e6e:	f7ff ff97 	bl	8007da0 <std>
 8007e72:	2301      	movs	r3, #1
 8007e74:	61a3      	str	r3, [r4, #24]
 8007e76:	bd10      	pop	{r4, pc}
 8007e78:	080098c8 	.word	0x080098c8
 8007e7c:	08007de9 	.word	0x08007de9

08007e80 <__sfp>:
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	4b1b      	ldr	r3, [pc, #108]	; (8007ef0 <__sfp+0x70>)
 8007e84:	681e      	ldr	r6, [r3, #0]
 8007e86:	69b3      	ldr	r3, [r6, #24]
 8007e88:	4607      	mov	r7, r0
 8007e8a:	b913      	cbnz	r3, 8007e92 <__sfp+0x12>
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f7ff ffc7 	bl	8007e20 <__sinit>
 8007e92:	3648      	adds	r6, #72	; 0x48
 8007e94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	d503      	bpl.n	8007ea4 <__sfp+0x24>
 8007e9c:	6833      	ldr	r3, [r6, #0]
 8007e9e:	b133      	cbz	r3, 8007eae <__sfp+0x2e>
 8007ea0:	6836      	ldr	r6, [r6, #0]
 8007ea2:	e7f7      	b.n	8007e94 <__sfp+0x14>
 8007ea4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ea8:	b16d      	cbz	r5, 8007ec6 <__sfp+0x46>
 8007eaa:	3468      	adds	r4, #104	; 0x68
 8007eac:	e7f4      	b.n	8007e98 <__sfp+0x18>
 8007eae:	2104      	movs	r1, #4
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	f7ff ff9f 	bl	8007df4 <__sfmoreglue>
 8007eb6:	6030      	str	r0, [r6, #0]
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d1f1      	bne.n	8007ea0 <__sfp+0x20>
 8007ebc:	230c      	movs	r3, #12
 8007ebe:	603b      	str	r3, [r7, #0]
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <__sfp+0x74>)
 8007ec8:	6665      	str	r5, [r4, #100]	; 0x64
 8007eca:	e9c4 5500 	strd	r5, r5, [r4]
 8007ece:	60a5      	str	r5, [r4, #8]
 8007ed0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007ed4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007ed8:	2208      	movs	r2, #8
 8007eda:	4629      	mov	r1, r5
 8007edc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ee0:	f000 f881 	bl	8007fe6 <memset>
 8007ee4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ee8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007eec:	e7e9      	b.n	8007ec2 <__sfp+0x42>
 8007eee:	bf00      	nop
 8007ef0:	080098c8 	.word	0x080098c8
 8007ef4:	ffff0001 	.word	0xffff0001

08007ef8 <_fwalk_reent>:
 8007ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007efc:	4680      	mov	r8, r0
 8007efe:	4689      	mov	r9, r1
 8007f00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f04:	2600      	movs	r6, #0
 8007f06:	b914      	cbnz	r4, 8007f0e <_fwalk_reent+0x16>
 8007f08:	4630      	mov	r0, r6
 8007f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007f12:	3f01      	subs	r7, #1
 8007f14:	d501      	bpl.n	8007f1a <_fwalk_reent+0x22>
 8007f16:	6824      	ldr	r4, [r4, #0]
 8007f18:	e7f5      	b.n	8007f06 <_fwalk_reent+0xe>
 8007f1a:	89ab      	ldrh	r3, [r5, #12]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d907      	bls.n	8007f30 <_fwalk_reent+0x38>
 8007f20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f24:	3301      	adds	r3, #1
 8007f26:	d003      	beq.n	8007f30 <_fwalk_reent+0x38>
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4640      	mov	r0, r8
 8007f2c:	47c8      	blx	r9
 8007f2e:	4306      	orrs	r6, r0
 8007f30:	3568      	adds	r5, #104	; 0x68
 8007f32:	e7ee      	b.n	8007f12 <_fwalk_reent+0x1a>

08007f34 <__libc_init_array>:
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	4e0d      	ldr	r6, [pc, #52]	; (8007f6c <__libc_init_array+0x38>)
 8007f38:	4c0d      	ldr	r4, [pc, #52]	; (8007f70 <__libc_init_array+0x3c>)
 8007f3a:	1ba4      	subs	r4, r4, r6
 8007f3c:	10a4      	asrs	r4, r4, #2
 8007f3e:	2500      	movs	r5, #0
 8007f40:	42a5      	cmp	r5, r4
 8007f42:	d109      	bne.n	8007f58 <__libc_init_array+0x24>
 8007f44:	4e0b      	ldr	r6, [pc, #44]	; (8007f74 <__libc_init_array+0x40>)
 8007f46:	4c0c      	ldr	r4, [pc, #48]	; (8007f78 <__libc_init_array+0x44>)
 8007f48:	f001 f832 	bl	8008fb0 <_init>
 8007f4c:	1ba4      	subs	r4, r4, r6
 8007f4e:	10a4      	asrs	r4, r4, #2
 8007f50:	2500      	movs	r5, #0
 8007f52:	42a5      	cmp	r5, r4
 8007f54:	d105      	bne.n	8007f62 <__libc_init_array+0x2e>
 8007f56:	bd70      	pop	{r4, r5, r6, pc}
 8007f58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f5c:	4798      	blx	r3
 8007f5e:	3501      	adds	r5, #1
 8007f60:	e7ee      	b.n	8007f40 <__libc_init_array+0xc>
 8007f62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f66:	4798      	blx	r3
 8007f68:	3501      	adds	r5, #1
 8007f6a:	e7f2      	b.n	8007f52 <__libc_init_array+0x1e>
 8007f6c:	08009928 	.word	0x08009928
 8007f70:	08009928 	.word	0x08009928
 8007f74:	08009928 	.word	0x08009928
 8007f78:	0800992c 	.word	0x0800992c

08007f7c <__itoa>:
 8007f7c:	1e93      	subs	r3, r2, #2
 8007f7e:	2b22      	cmp	r3, #34	; 0x22
 8007f80:	b510      	push	{r4, lr}
 8007f82:	460c      	mov	r4, r1
 8007f84:	d904      	bls.n	8007f90 <__itoa+0x14>
 8007f86:	2300      	movs	r3, #0
 8007f88:	700b      	strb	r3, [r1, #0]
 8007f8a:	461c      	mov	r4, r3
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	bd10      	pop	{r4, pc}
 8007f90:	2a0a      	cmp	r2, #10
 8007f92:	d109      	bne.n	8007fa8 <__itoa+0x2c>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	da07      	bge.n	8007fa8 <__itoa+0x2c>
 8007f98:	232d      	movs	r3, #45	; 0x2d
 8007f9a:	700b      	strb	r3, [r1, #0]
 8007f9c:	4240      	negs	r0, r0
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	4421      	add	r1, r4
 8007fa2:	f000 f9d7 	bl	8008354 <__utoa>
 8007fa6:	e7f1      	b.n	8007f8c <__itoa+0x10>
 8007fa8:	2100      	movs	r1, #0
 8007faa:	e7f9      	b.n	8007fa0 <__itoa+0x24>

08007fac <itoa>:
 8007fac:	f7ff bfe6 	b.w	8007f7c <__itoa>

08007fb0 <malloc>:
 8007fb0:	4b02      	ldr	r3, [pc, #8]	; (8007fbc <malloc+0xc>)
 8007fb2:	4601      	mov	r1, r0
 8007fb4:	6818      	ldr	r0, [r3, #0]
 8007fb6:	f000 b86d 	b.w	8008094 <_malloc_r>
 8007fba:	bf00      	nop
 8007fbc:	200001fc 	.word	0x200001fc

08007fc0 <free>:
 8007fc0:	4b02      	ldr	r3, [pc, #8]	; (8007fcc <free+0xc>)
 8007fc2:	4601      	mov	r1, r0
 8007fc4:	6818      	ldr	r0, [r3, #0]
 8007fc6:	f000 b817 	b.w	8007ff8 <_free_r>
 8007fca:	bf00      	nop
 8007fcc:	200001fc 	.word	0x200001fc

08007fd0 <memcpy>:
 8007fd0:	b510      	push	{r4, lr}
 8007fd2:	1e43      	subs	r3, r0, #1
 8007fd4:	440a      	add	r2, r1
 8007fd6:	4291      	cmp	r1, r2
 8007fd8:	d100      	bne.n	8007fdc <memcpy+0xc>
 8007fda:	bd10      	pop	{r4, pc}
 8007fdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fe4:	e7f7      	b.n	8007fd6 <memcpy+0x6>

08007fe6 <memset>:
 8007fe6:	4402      	add	r2, r0
 8007fe8:	4603      	mov	r3, r0
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d100      	bne.n	8007ff0 <memset+0xa>
 8007fee:	4770      	bx	lr
 8007ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8007ff4:	e7f9      	b.n	8007fea <memset+0x4>
	...

08007ff8 <_free_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	4605      	mov	r5, r0
 8007ffc:	2900      	cmp	r1, #0
 8007ffe:	d045      	beq.n	800808c <_free_r+0x94>
 8008000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008004:	1f0c      	subs	r4, r1, #4
 8008006:	2b00      	cmp	r3, #0
 8008008:	bfb8      	it	lt
 800800a:	18e4      	addlt	r4, r4, r3
 800800c:	f000 fb38 	bl	8008680 <__malloc_lock>
 8008010:	4a1f      	ldr	r2, [pc, #124]	; (8008090 <_free_r+0x98>)
 8008012:	6813      	ldr	r3, [r2, #0]
 8008014:	4610      	mov	r0, r2
 8008016:	b933      	cbnz	r3, 8008026 <_free_r+0x2e>
 8008018:	6063      	str	r3, [r4, #4]
 800801a:	6014      	str	r4, [r2, #0]
 800801c:	4628      	mov	r0, r5
 800801e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008022:	f000 bb2e 	b.w	8008682 <__malloc_unlock>
 8008026:	42a3      	cmp	r3, r4
 8008028:	d90c      	bls.n	8008044 <_free_r+0x4c>
 800802a:	6821      	ldr	r1, [r4, #0]
 800802c:	1862      	adds	r2, r4, r1
 800802e:	4293      	cmp	r3, r2
 8008030:	bf04      	itt	eq
 8008032:	681a      	ldreq	r2, [r3, #0]
 8008034:	685b      	ldreq	r3, [r3, #4]
 8008036:	6063      	str	r3, [r4, #4]
 8008038:	bf04      	itt	eq
 800803a:	1852      	addeq	r2, r2, r1
 800803c:	6022      	streq	r2, [r4, #0]
 800803e:	6004      	str	r4, [r0, #0]
 8008040:	e7ec      	b.n	800801c <_free_r+0x24>
 8008042:	4613      	mov	r3, r2
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	b10a      	cbz	r2, 800804c <_free_r+0x54>
 8008048:	42a2      	cmp	r2, r4
 800804a:	d9fa      	bls.n	8008042 <_free_r+0x4a>
 800804c:	6819      	ldr	r1, [r3, #0]
 800804e:	1858      	adds	r0, r3, r1
 8008050:	42a0      	cmp	r0, r4
 8008052:	d10b      	bne.n	800806c <_free_r+0x74>
 8008054:	6820      	ldr	r0, [r4, #0]
 8008056:	4401      	add	r1, r0
 8008058:	1858      	adds	r0, r3, r1
 800805a:	4282      	cmp	r2, r0
 800805c:	6019      	str	r1, [r3, #0]
 800805e:	d1dd      	bne.n	800801c <_free_r+0x24>
 8008060:	6810      	ldr	r0, [r2, #0]
 8008062:	6852      	ldr	r2, [r2, #4]
 8008064:	605a      	str	r2, [r3, #4]
 8008066:	4401      	add	r1, r0
 8008068:	6019      	str	r1, [r3, #0]
 800806a:	e7d7      	b.n	800801c <_free_r+0x24>
 800806c:	d902      	bls.n	8008074 <_free_r+0x7c>
 800806e:	230c      	movs	r3, #12
 8008070:	602b      	str	r3, [r5, #0]
 8008072:	e7d3      	b.n	800801c <_free_r+0x24>
 8008074:	6820      	ldr	r0, [r4, #0]
 8008076:	1821      	adds	r1, r4, r0
 8008078:	428a      	cmp	r2, r1
 800807a:	bf04      	itt	eq
 800807c:	6811      	ldreq	r1, [r2, #0]
 800807e:	6852      	ldreq	r2, [r2, #4]
 8008080:	6062      	str	r2, [r4, #4]
 8008082:	bf04      	itt	eq
 8008084:	1809      	addeq	r1, r1, r0
 8008086:	6021      	streq	r1, [r4, #0]
 8008088:	605c      	str	r4, [r3, #4]
 800808a:	e7c7      	b.n	800801c <_free_r+0x24>
 800808c:	bd38      	pop	{r3, r4, r5, pc}
 800808e:	bf00      	nop
 8008090:	20000744 	.word	0x20000744

08008094 <_malloc_r>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	1ccd      	adds	r5, r1, #3
 8008098:	f025 0503 	bic.w	r5, r5, #3
 800809c:	3508      	adds	r5, #8
 800809e:	2d0c      	cmp	r5, #12
 80080a0:	bf38      	it	cc
 80080a2:	250c      	movcc	r5, #12
 80080a4:	2d00      	cmp	r5, #0
 80080a6:	4606      	mov	r6, r0
 80080a8:	db01      	blt.n	80080ae <_malloc_r+0x1a>
 80080aa:	42a9      	cmp	r1, r5
 80080ac:	d903      	bls.n	80080b6 <_malloc_r+0x22>
 80080ae:	230c      	movs	r3, #12
 80080b0:	6033      	str	r3, [r6, #0]
 80080b2:	2000      	movs	r0, #0
 80080b4:	bd70      	pop	{r4, r5, r6, pc}
 80080b6:	f000 fae3 	bl	8008680 <__malloc_lock>
 80080ba:	4a21      	ldr	r2, [pc, #132]	; (8008140 <_malloc_r+0xac>)
 80080bc:	6814      	ldr	r4, [r2, #0]
 80080be:	4621      	mov	r1, r4
 80080c0:	b991      	cbnz	r1, 80080e8 <_malloc_r+0x54>
 80080c2:	4c20      	ldr	r4, [pc, #128]	; (8008144 <_malloc_r+0xb0>)
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	b91b      	cbnz	r3, 80080d0 <_malloc_r+0x3c>
 80080c8:	4630      	mov	r0, r6
 80080ca:	f000 f8b9 	bl	8008240 <_sbrk_r>
 80080ce:	6020      	str	r0, [r4, #0]
 80080d0:	4629      	mov	r1, r5
 80080d2:	4630      	mov	r0, r6
 80080d4:	f000 f8b4 	bl	8008240 <_sbrk_r>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d124      	bne.n	8008126 <_malloc_r+0x92>
 80080dc:	230c      	movs	r3, #12
 80080de:	6033      	str	r3, [r6, #0]
 80080e0:	4630      	mov	r0, r6
 80080e2:	f000 face 	bl	8008682 <__malloc_unlock>
 80080e6:	e7e4      	b.n	80080b2 <_malloc_r+0x1e>
 80080e8:	680b      	ldr	r3, [r1, #0]
 80080ea:	1b5b      	subs	r3, r3, r5
 80080ec:	d418      	bmi.n	8008120 <_malloc_r+0x8c>
 80080ee:	2b0b      	cmp	r3, #11
 80080f0:	d90f      	bls.n	8008112 <_malloc_r+0x7e>
 80080f2:	600b      	str	r3, [r1, #0]
 80080f4:	50cd      	str	r5, [r1, r3]
 80080f6:	18cc      	adds	r4, r1, r3
 80080f8:	4630      	mov	r0, r6
 80080fa:	f000 fac2 	bl	8008682 <__malloc_unlock>
 80080fe:	f104 000b 	add.w	r0, r4, #11
 8008102:	1d23      	adds	r3, r4, #4
 8008104:	f020 0007 	bic.w	r0, r0, #7
 8008108:	1ac3      	subs	r3, r0, r3
 800810a:	d0d3      	beq.n	80080b4 <_malloc_r+0x20>
 800810c:	425a      	negs	r2, r3
 800810e:	50e2      	str	r2, [r4, r3]
 8008110:	e7d0      	b.n	80080b4 <_malloc_r+0x20>
 8008112:	428c      	cmp	r4, r1
 8008114:	684b      	ldr	r3, [r1, #4]
 8008116:	bf16      	itet	ne
 8008118:	6063      	strne	r3, [r4, #4]
 800811a:	6013      	streq	r3, [r2, #0]
 800811c:	460c      	movne	r4, r1
 800811e:	e7eb      	b.n	80080f8 <_malloc_r+0x64>
 8008120:	460c      	mov	r4, r1
 8008122:	6849      	ldr	r1, [r1, #4]
 8008124:	e7cc      	b.n	80080c0 <_malloc_r+0x2c>
 8008126:	1cc4      	adds	r4, r0, #3
 8008128:	f024 0403 	bic.w	r4, r4, #3
 800812c:	42a0      	cmp	r0, r4
 800812e:	d005      	beq.n	800813c <_malloc_r+0xa8>
 8008130:	1a21      	subs	r1, r4, r0
 8008132:	4630      	mov	r0, r6
 8008134:	f000 f884 	bl	8008240 <_sbrk_r>
 8008138:	3001      	adds	r0, #1
 800813a:	d0cf      	beq.n	80080dc <_malloc_r+0x48>
 800813c:	6025      	str	r5, [r4, #0]
 800813e:	e7db      	b.n	80080f8 <_malloc_r+0x64>
 8008140:	20000744 	.word	0x20000744
 8008144:	20000748 	.word	0x20000748

08008148 <iprintf>:
 8008148:	b40f      	push	{r0, r1, r2, r3}
 800814a:	4b0a      	ldr	r3, [pc, #40]	; (8008174 <iprintf+0x2c>)
 800814c:	b513      	push	{r0, r1, r4, lr}
 800814e:	681c      	ldr	r4, [r3, #0]
 8008150:	b124      	cbz	r4, 800815c <iprintf+0x14>
 8008152:	69a3      	ldr	r3, [r4, #24]
 8008154:	b913      	cbnz	r3, 800815c <iprintf+0x14>
 8008156:	4620      	mov	r0, r4
 8008158:	f7ff fe62 	bl	8007e20 <__sinit>
 800815c:	ab05      	add	r3, sp, #20
 800815e:	9a04      	ldr	r2, [sp, #16]
 8008160:	68a1      	ldr	r1, [r4, #8]
 8008162:	9301      	str	r3, [sp, #4]
 8008164:	4620      	mov	r0, r4
 8008166:	f000 fc09 	bl	800897c <_vfiprintf_r>
 800816a:	b002      	add	sp, #8
 800816c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008170:	b004      	add	sp, #16
 8008172:	4770      	bx	lr
 8008174:	200001fc 	.word	0x200001fc

08008178 <_puts_r>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	460e      	mov	r6, r1
 800817c:	4605      	mov	r5, r0
 800817e:	b118      	cbz	r0, 8008188 <_puts_r+0x10>
 8008180:	6983      	ldr	r3, [r0, #24]
 8008182:	b90b      	cbnz	r3, 8008188 <_puts_r+0x10>
 8008184:	f7ff fe4c 	bl	8007e20 <__sinit>
 8008188:	69ab      	ldr	r3, [r5, #24]
 800818a:	68ac      	ldr	r4, [r5, #8]
 800818c:	b913      	cbnz	r3, 8008194 <_puts_r+0x1c>
 800818e:	4628      	mov	r0, r5
 8008190:	f7ff fe46 	bl	8007e20 <__sinit>
 8008194:	4b23      	ldr	r3, [pc, #140]	; (8008224 <_puts_r+0xac>)
 8008196:	429c      	cmp	r4, r3
 8008198:	d117      	bne.n	80081ca <_puts_r+0x52>
 800819a:	686c      	ldr	r4, [r5, #4]
 800819c:	89a3      	ldrh	r3, [r4, #12]
 800819e:	071b      	lsls	r3, r3, #28
 80081a0:	d51d      	bpl.n	80081de <_puts_r+0x66>
 80081a2:	6923      	ldr	r3, [r4, #16]
 80081a4:	b1db      	cbz	r3, 80081de <_puts_r+0x66>
 80081a6:	3e01      	subs	r6, #1
 80081a8:	68a3      	ldr	r3, [r4, #8]
 80081aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081ae:	3b01      	subs	r3, #1
 80081b0:	60a3      	str	r3, [r4, #8]
 80081b2:	b9e9      	cbnz	r1, 80081f0 <_puts_r+0x78>
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	da2e      	bge.n	8008216 <_puts_r+0x9e>
 80081b8:	4622      	mov	r2, r4
 80081ba:	210a      	movs	r1, #10
 80081bc:	4628      	mov	r0, r5
 80081be:	f000 f907 	bl	80083d0 <__swbuf_r>
 80081c2:	3001      	adds	r0, #1
 80081c4:	d011      	beq.n	80081ea <_puts_r+0x72>
 80081c6:	200a      	movs	r0, #10
 80081c8:	e011      	b.n	80081ee <_puts_r+0x76>
 80081ca:	4b17      	ldr	r3, [pc, #92]	; (8008228 <_puts_r+0xb0>)
 80081cc:	429c      	cmp	r4, r3
 80081ce:	d101      	bne.n	80081d4 <_puts_r+0x5c>
 80081d0:	68ac      	ldr	r4, [r5, #8]
 80081d2:	e7e3      	b.n	800819c <_puts_r+0x24>
 80081d4:	4b15      	ldr	r3, [pc, #84]	; (800822c <_puts_r+0xb4>)
 80081d6:	429c      	cmp	r4, r3
 80081d8:	bf08      	it	eq
 80081da:	68ec      	ldreq	r4, [r5, #12]
 80081dc:	e7de      	b.n	800819c <_puts_r+0x24>
 80081de:	4621      	mov	r1, r4
 80081e0:	4628      	mov	r0, r5
 80081e2:	f000 f959 	bl	8008498 <__swsetup_r>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d0dd      	beq.n	80081a6 <_puts_r+0x2e>
 80081ea:	f04f 30ff 	mov.w	r0, #4294967295
 80081ee:	bd70      	pop	{r4, r5, r6, pc}
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	da04      	bge.n	80081fe <_puts_r+0x86>
 80081f4:	69a2      	ldr	r2, [r4, #24]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	dc06      	bgt.n	8008208 <_puts_r+0x90>
 80081fa:	290a      	cmp	r1, #10
 80081fc:	d004      	beq.n	8008208 <_puts_r+0x90>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	6022      	str	r2, [r4, #0]
 8008204:	7019      	strb	r1, [r3, #0]
 8008206:	e7cf      	b.n	80081a8 <_puts_r+0x30>
 8008208:	4622      	mov	r2, r4
 800820a:	4628      	mov	r0, r5
 800820c:	f000 f8e0 	bl	80083d0 <__swbuf_r>
 8008210:	3001      	adds	r0, #1
 8008212:	d1c9      	bne.n	80081a8 <_puts_r+0x30>
 8008214:	e7e9      	b.n	80081ea <_puts_r+0x72>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	200a      	movs	r0, #10
 800821a:	1c5a      	adds	r2, r3, #1
 800821c:	6022      	str	r2, [r4, #0]
 800821e:	7018      	strb	r0, [r3, #0]
 8008220:	e7e5      	b.n	80081ee <_puts_r+0x76>
 8008222:	bf00      	nop
 8008224:	08009888 	.word	0x08009888
 8008228:	080098a8 	.word	0x080098a8
 800822c:	08009868 	.word	0x08009868

08008230 <puts>:
 8008230:	4b02      	ldr	r3, [pc, #8]	; (800823c <puts+0xc>)
 8008232:	4601      	mov	r1, r0
 8008234:	6818      	ldr	r0, [r3, #0]
 8008236:	f7ff bf9f 	b.w	8008178 <_puts_r>
 800823a:	bf00      	nop
 800823c:	200001fc 	.word	0x200001fc

08008240 <_sbrk_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4c06      	ldr	r4, [pc, #24]	; (800825c <_sbrk_r+0x1c>)
 8008244:	2300      	movs	r3, #0
 8008246:	4605      	mov	r5, r0
 8008248:	4608      	mov	r0, r1
 800824a:	6023      	str	r3, [r4, #0]
 800824c:	f7f8 f83a 	bl	80002c4 <_sbrk>
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	d102      	bne.n	800825a <_sbrk_r+0x1a>
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	b103      	cbz	r3, 800825a <_sbrk_r+0x1a>
 8008258:	602b      	str	r3, [r5, #0]
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	200029fc 	.word	0x200029fc

08008260 <siprintf>:
 8008260:	b40e      	push	{r1, r2, r3}
 8008262:	b500      	push	{lr}
 8008264:	b09c      	sub	sp, #112	; 0x70
 8008266:	ab1d      	add	r3, sp, #116	; 0x74
 8008268:	9002      	str	r0, [sp, #8]
 800826a:	9006      	str	r0, [sp, #24]
 800826c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008270:	4809      	ldr	r0, [pc, #36]	; (8008298 <siprintf+0x38>)
 8008272:	9107      	str	r1, [sp, #28]
 8008274:	9104      	str	r1, [sp, #16]
 8008276:	4909      	ldr	r1, [pc, #36]	; (800829c <siprintf+0x3c>)
 8008278:	f853 2b04 	ldr.w	r2, [r3], #4
 800827c:	9105      	str	r1, [sp, #20]
 800827e:	6800      	ldr	r0, [r0, #0]
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	a902      	add	r1, sp, #8
 8008284:	f000 fa58 	bl	8008738 <_svfiprintf_r>
 8008288:	9b02      	ldr	r3, [sp, #8]
 800828a:	2200      	movs	r2, #0
 800828c:	701a      	strb	r2, [r3, #0]
 800828e:	b01c      	add	sp, #112	; 0x70
 8008290:	f85d eb04 	ldr.w	lr, [sp], #4
 8008294:	b003      	add	sp, #12
 8008296:	4770      	bx	lr
 8008298:	200001fc 	.word	0x200001fc
 800829c:	ffff0208 	.word	0xffff0208

080082a0 <__sread>:
 80082a0:	b510      	push	{r4, lr}
 80082a2:	460c      	mov	r4, r1
 80082a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a8:	f000 fe06 	bl	8008eb8 <_read_r>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	bfab      	itete	ge
 80082b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082b2:	89a3      	ldrhlt	r3, [r4, #12]
 80082b4:	181b      	addge	r3, r3, r0
 80082b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082ba:	bfac      	ite	ge
 80082bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80082be:	81a3      	strhlt	r3, [r4, #12]
 80082c0:	bd10      	pop	{r4, pc}

080082c2 <__swrite>:
 80082c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c6:	461f      	mov	r7, r3
 80082c8:	898b      	ldrh	r3, [r1, #12]
 80082ca:	05db      	lsls	r3, r3, #23
 80082cc:	4605      	mov	r5, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	4616      	mov	r6, r2
 80082d2:	d505      	bpl.n	80082e0 <__swrite+0x1e>
 80082d4:	2302      	movs	r3, #2
 80082d6:	2200      	movs	r2, #0
 80082d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082dc:	f000 f95a 	bl	8008594 <_lseek_r>
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082ea:	81a3      	strh	r3, [r4, #12]
 80082ec:	4632      	mov	r2, r6
 80082ee:	463b      	mov	r3, r7
 80082f0:	4628      	mov	r0, r5
 80082f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082f6:	f000 b8bd 	b.w	8008474 <_write_r>

080082fa <__sseek>:
 80082fa:	b510      	push	{r4, lr}
 80082fc:	460c      	mov	r4, r1
 80082fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008302:	f000 f947 	bl	8008594 <_lseek_r>
 8008306:	1c43      	adds	r3, r0, #1
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	bf15      	itete	ne
 800830c:	6560      	strne	r0, [r4, #84]	; 0x54
 800830e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008316:	81a3      	strheq	r3, [r4, #12]
 8008318:	bf18      	it	ne
 800831a:	81a3      	strhne	r3, [r4, #12]
 800831c:	bd10      	pop	{r4, pc}

0800831e <__sclose>:
 800831e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008322:	f000 b927 	b.w	8008574 <_close_r>

08008326 <strcat>:
 8008326:	b510      	push	{r4, lr}
 8008328:	4603      	mov	r3, r0
 800832a:	781a      	ldrb	r2, [r3, #0]
 800832c:	1c5c      	adds	r4, r3, #1
 800832e:	b93a      	cbnz	r2, 8008340 <strcat+0x1a>
 8008330:	3b01      	subs	r3, #1
 8008332:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008336:	f803 2f01 	strb.w	r2, [r3, #1]!
 800833a:	2a00      	cmp	r2, #0
 800833c:	d1f9      	bne.n	8008332 <strcat+0xc>
 800833e:	bd10      	pop	{r4, pc}
 8008340:	4623      	mov	r3, r4
 8008342:	e7f2      	b.n	800832a <strcat+0x4>

08008344 <strcpy>:
 8008344:	4603      	mov	r3, r0
 8008346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800834a:	f803 2b01 	strb.w	r2, [r3], #1
 800834e:	2a00      	cmp	r2, #0
 8008350:	d1f9      	bne.n	8008346 <strcpy+0x2>
 8008352:	4770      	bx	lr

08008354 <__utoa>:
 8008354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008356:	4b1d      	ldr	r3, [pc, #116]	; (80083cc <__utoa+0x78>)
 8008358:	b08b      	sub	sp, #44	; 0x2c
 800835a:	4605      	mov	r5, r0
 800835c:	460c      	mov	r4, r1
 800835e:	466e      	mov	r6, sp
 8008360:	f103 0c20 	add.w	ip, r3, #32
 8008364:	6818      	ldr	r0, [r3, #0]
 8008366:	6859      	ldr	r1, [r3, #4]
 8008368:	4637      	mov	r7, r6
 800836a:	c703      	stmia	r7!, {r0, r1}
 800836c:	3308      	adds	r3, #8
 800836e:	4563      	cmp	r3, ip
 8008370:	463e      	mov	r6, r7
 8008372:	d1f7      	bne.n	8008364 <__utoa+0x10>
 8008374:	6818      	ldr	r0, [r3, #0]
 8008376:	791b      	ldrb	r3, [r3, #4]
 8008378:	713b      	strb	r3, [r7, #4]
 800837a:	1e93      	subs	r3, r2, #2
 800837c:	2b22      	cmp	r3, #34	; 0x22
 800837e:	6038      	str	r0, [r7, #0]
 8008380:	f04f 0300 	mov.w	r3, #0
 8008384:	d904      	bls.n	8008390 <__utoa+0x3c>
 8008386:	7023      	strb	r3, [r4, #0]
 8008388:	461c      	mov	r4, r3
 800838a:	4620      	mov	r0, r4
 800838c:	b00b      	add	sp, #44	; 0x2c
 800838e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008390:	1e66      	subs	r6, r4, #1
 8008392:	fbb5 f0f2 	udiv	r0, r5, r2
 8008396:	af0a      	add	r7, sp, #40	; 0x28
 8008398:	fb02 5510 	mls	r5, r2, r0, r5
 800839c:	443d      	add	r5, r7
 800839e:	1c59      	adds	r1, r3, #1
 80083a0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80083a4:	f806 5f01 	strb.w	r5, [r6, #1]!
 80083a8:	4605      	mov	r5, r0
 80083aa:	b968      	cbnz	r0, 80083c8 <__utoa+0x74>
 80083ac:	5460      	strb	r0, [r4, r1]
 80083ae:	4423      	add	r3, r4
 80083b0:	4622      	mov	r2, r4
 80083b2:	1b19      	subs	r1, r3, r4
 80083b4:	1b10      	subs	r0, r2, r4
 80083b6:	4281      	cmp	r1, r0
 80083b8:	dde7      	ble.n	800838a <__utoa+0x36>
 80083ba:	7811      	ldrb	r1, [r2, #0]
 80083bc:	7818      	ldrb	r0, [r3, #0]
 80083be:	f802 0b01 	strb.w	r0, [r2], #1
 80083c2:	f803 1901 	strb.w	r1, [r3], #-1
 80083c6:	e7f4      	b.n	80083b2 <__utoa+0x5e>
 80083c8:	460b      	mov	r3, r1
 80083ca:	e7e2      	b.n	8008392 <__utoa+0x3e>
 80083cc:	080098cc 	.word	0x080098cc

080083d0 <__swbuf_r>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	460e      	mov	r6, r1
 80083d4:	4614      	mov	r4, r2
 80083d6:	4605      	mov	r5, r0
 80083d8:	b118      	cbz	r0, 80083e2 <__swbuf_r+0x12>
 80083da:	6983      	ldr	r3, [r0, #24]
 80083dc:	b90b      	cbnz	r3, 80083e2 <__swbuf_r+0x12>
 80083de:	f7ff fd1f 	bl	8007e20 <__sinit>
 80083e2:	4b21      	ldr	r3, [pc, #132]	; (8008468 <__swbuf_r+0x98>)
 80083e4:	429c      	cmp	r4, r3
 80083e6:	d12a      	bne.n	800843e <__swbuf_r+0x6e>
 80083e8:	686c      	ldr	r4, [r5, #4]
 80083ea:	69a3      	ldr	r3, [r4, #24]
 80083ec:	60a3      	str	r3, [r4, #8]
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	071a      	lsls	r2, r3, #28
 80083f2:	d52e      	bpl.n	8008452 <__swbuf_r+0x82>
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	b363      	cbz	r3, 8008452 <__swbuf_r+0x82>
 80083f8:	6923      	ldr	r3, [r4, #16]
 80083fa:	6820      	ldr	r0, [r4, #0]
 80083fc:	1ac0      	subs	r0, r0, r3
 80083fe:	6963      	ldr	r3, [r4, #20]
 8008400:	b2f6      	uxtb	r6, r6
 8008402:	4283      	cmp	r3, r0
 8008404:	4637      	mov	r7, r6
 8008406:	dc04      	bgt.n	8008412 <__swbuf_r+0x42>
 8008408:	4621      	mov	r1, r4
 800840a:	4628      	mov	r0, r5
 800840c:	f7ff fc8c 	bl	8007d28 <_fflush_r>
 8008410:	bb28      	cbnz	r0, 800845e <__swbuf_r+0x8e>
 8008412:	68a3      	ldr	r3, [r4, #8]
 8008414:	3b01      	subs	r3, #1
 8008416:	60a3      	str	r3, [r4, #8]
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	6022      	str	r2, [r4, #0]
 800841e:	701e      	strb	r6, [r3, #0]
 8008420:	6963      	ldr	r3, [r4, #20]
 8008422:	3001      	adds	r0, #1
 8008424:	4283      	cmp	r3, r0
 8008426:	d004      	beq.n	8008432 <__swbuf_r+0x62>
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	07db      	lsls	r3, r3, #31
 800842c:	d519      	bpl.n	8008462 <__swbuf_r+0x92>
 800842e:	2e0a      	cmp	r6, #10
 8008430:	d117      	bne.n	8008462 <__swbuf_r+0x92>
 8008432:	4621      	mov	r1, r4
 8008434:	4628      	mov	r0, r5
 8008436:	f7ff fc77 	bl	8007d28 <_fflush_r>
 800843a:	b190      	cbz	r0, 8008462 <__swbuf_r+0x92>
 800843c:	e00f      	b.n	800845e <__swbuf_r+0x8e>
 800843e:	4b0b      	ldr	r3, [pc, #44]	; (800846c <__swbuf_r+0x9c>)
 8008440:	429c      	cmp	r4, r3
 8008442:	d101      	bne.n	8008448 <__swbuf_r+0x78>
 8008444:	68ac      	ldr	r4, [r5, #8]
 8008446:	e7d0      	b.n	80083ea <__swbuf_r+0x1a>
 8008448:	4b09      	ldr	r3, [pc, #36]	; (8008470 <__swbuf_r+0xa0>)
 800844a:	429c      	cmp	r4, r3
 800844c:	bf08      	it	eq
 800844e:	68ec      	ldreq	r4, [r5, #12]
 8008450:	e7cb      	b.n	80083ea <__swbuf_r+0x1a>
 8008452:	4621      	mov	r1, r4
 8008454:	4628      	mov	r0, r5
 8008456:	f000 f81f 	bl	8008498 <__swsetup_r>
 800845a:	2800      	cmp	r0, #0
 800845c:	d0cc      	beq.n	80083f8 <__swbuf_r+0x28>
 800845e:	f04f 37ff 	mov.w	r7, #4294967295
 8008462:	4638      	mov	r0, r7
 8008464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008466:	bf00      	nop
 8008468:	08009888 	.word	0x08009888
 800846c:	080098a8 	.word	0x080098a8
 8008470:	08009868 	.word	0x08009868

08008474 <_write_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4c07      	ldr	r4, [pc, #28]	; (8008494 <_write_r+0x20>)
 8008478:	4605      	mov	r5, r0
 800847a:	4608      	mov	r0, r1
 800847c:	4611      	mov	r1, r2
 800847e:	2200      	movs	r2, #0
 8008480:	6022      	str	r2, [r4, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	f7f7 ff3e 	bl	8000304 <_write>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d102      	bne.n	8008492 <_write_r+0x1e>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	b103      	cbz	r3, 8008492 <_write_r+0x1e>
 8008490:	602b      	str	r3, [r5, #0]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	200029fc 	.word	0x200029fc

08008498 <__swsetup_r>:
 8008498:	4b32      	ldr	r3, [pc, #200]	; (8008564 <__swsetup_r+0xcc>)
 800849a:	b570      	push	{r4, r5, r6, lr}
 800849c:	681d      	ldr	r5, [r3, #0]
 800849e:	4606      	mov	r6, r0
 80084a0:	460c      	mov	r4, r1
 80084a2:	b125      	cbz	r5, 80084ae <__swsetup_r+0x16>
 80084a4:	69ab      	ldr	r3, [r5, #24]
 80084a6:	b913      	cbnz	r3, 80084ae <__swsetup_r+0x16>
 80084a8:	4628      	mov	r0, r5
 80084aa:	f7ff fcb9 	bl	8007e20 <__sinit>
 80084ae:	4b2e      	ldr	r3, [pc, #184]	; (8008568 <__swsetup_r+0xd0>)
 80084b0:	429c      	cmp	r4, r3
 80084b2:	d10f      	bne.n	80084d4 <__swsetup_r+0x3c>
 80084b4:	686c      	ldr	r4, [r5, #4]
 80084b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	0715      	lsls	r5, r2, #28
 80084be:	d42c      	bmi.n	800851a <__swsetup_r+0x82>
 80084c0:	06d0      	lsls	r0, r2, #27
 80084c2:	d411      	bmi.n	80084e8 <__swsetup_r+0x50>
 80084c4:	2209      	movs	r2, #9
 80084c6:	6032      	str	r2, [r6, #0]
 80084c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084cc:	81a3      	strh	r3, [r4, #12]
 80084ce:	f04f 30ff 	mov.w	r0, #4294967295
 80084d2:	e03e      	b.n	8008552 <__swsetup_r+0xba>
 80084d4:	4b25      	ldr	r3, [pc, #148]	; (800856c <__swsetup_r+0xd4>)
 80084d6:	429c      	cmp	r4, r3
 80084d8:	d101      	bne.n	80084de <__swsetup_r+0x46>
 80084da:	68ac      	ldr	r4, [r5, #8]
 80084dc:	e7eb      	b.n	80084b6 <__swsetup_r+0x1e>
 80084de:	4b24      	ldr	r3, [pc, #144]	; (8008570 <__swsetup_r+0xd8>)
 80084e0:	429c      	cmp	r4, r3
 80084e2:	bf08      	it	eq
 80084e4:	68ec      	ldreq	r4, [r5, #12]
 80084e6:	e7e6      	b.n	80084b6 <__swsetup_r+0x1e>
 80084e8:	0751      	lsls	r1, r2, #29
 80084ea:	d512      	bpl.n	8008512 <__swsetup_r+0x7a>
 80084ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084ee:	b141      	cbz	r1, 8008502 <__swsetup_r+0x6a>
 80084f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084f4:	4299      	cmp	r1, r3
 80084f6:	d002      	beq.n	80084fe <__swsetup_r+0x66>
 80084f8:	4630      	mov	r0, r6
 80084fa:	f7ff fd7d 	bl	8007ff8 <_free_r>
 80084fe:	2300      	movs	r3, #0
 8008500:	6363      	str	r3, [r4, #52]	; 0x34
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008508:	81a3      	strh	r3, [r4, #12]
 800850a:	2300      	movs	r3, #0
 800850c:	6063      	str	r3, [r4, #4]
 800850e:	6923      	ldr	r3, [r4, #16]
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	f043 0308 	orr.w	r3, r3, #8
 8008518:	81a3      	strh	r3, [r4, #12]
 800851a:	6923      	ldr	r3, [r4, #16]
 800851c:	b94b      	cbnz	r3, 8008532 <__swsetup_r+0x9a>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008528:	d003      	beq.n	8008532 <__swsetup_r+0x9a>
 800852a:	4621      	mov	r1, r4
 800852c:	4630      	mov	r0, r6
 800852e:	f000 f867 	bl	8008600 <__smakebuf_r>
 8008532:	89a2      	ldrh	r2, [r4, #12]
 8008534:	f012 0301 	ands.w	r3, r2, #1
 8008538:	d00c      	beq.n	8008554 <__swsetup_r+0xbc>
 800853a:	2300      	movs	r3, #0
 800853c:	60a3      	str	r3, [r4, #8]
 800853e:	6963      	ldr	r3, [r4, #20]
 8008540:	425b      	negs	r3, r3
 8008542:	61a3      	str	r3, [r4, #24]
 8008544:	6923      	ldr	r3, [r4, #16]
 8008546:	b953      	cbnz	r3, 800855e <__swsetup_r+0xc6>
 8008548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800854c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008550:	d1ba      	bne.n	80084c8 <__swsetup_r+0x30>
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	0792      	lsls	r2, r2, #30
 8008556:	bf58      	it	pl
 8008558:	6963      	ldrpl	r3, [r4, #20]
 800855a:	60a3      	str	r3, [r4, #8]
 800855c:	e7f2      	b.n	8008544 <__swsetup_r+0xac>
 800855e:	2000      	movs	r0, #0
 8008560:	e7f7      	b.n	8008552 <__swsetup_r+0xba>
 8008562:	bf00      	nop
 8008564:	200001fc 	.word	0x200001fc
 8008568:	08009888 	.word	0x08009888
 800856c:	080098a8 	.word	0x080098a8
 8008570:	08009868 	.word	0x08009868

08008574 <_close_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4c06      	ldr	r4, [pc, #24]	; (8008590 <_close_r+0x1c>)
 8008578:	2300      	movs	r3, #0
 800857a:	4605      	mov	r5, r0
 800857c:	4608      	mov	r0, r1
 800857e:	6023      	str	r3, [r4, #0]
 8008580:	f7f7 fece 	bl	8000320 <_close>
 8008584:	1c43      	adds	r3, r0, #1
 8008586:	d102      	bne.n	800858e <_close_r+0x1a>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	b103      	cbz	r3, 800858e <_close_r+0x1a>
 800858c:	602b      	str	r3, [r5, #0]
 800858e:	bd38      	pop	{r3, r4, r5, pc}
 8008590:	200029fc 	.word	0x200029fc

08008594 <_lseek_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4c07      	ldr	r4, [pc, #28]	; (80085b4 <_lseek_r+0x20>)
 8008598:	4605      	mov	r5, r0
 800859a:	4608      	mov	r0, r1
 800859c:	4611      	mov	r1, r2
 800859e:	2200      	movs	r2, #0
 80085a0:	6022      	str	r2, [r4, #0]
 80085a2:	461a      	mov	r2, r3
 80085a4:	f7f7 fec6 	bl	8000334 <_lseek>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d102      	bne.n	80085b2 <_lseek_r+0x1e>
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	b103      	cbz	r3, 80085b2 <_lseek_r+0x1e>
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	200029fc 	.word	0x200029fc

080085b8 <__swhatbuf_r>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	460e      	mov	r6, r1
 80085bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c0:	2900      	cmp	r1, #0
 80085c2:	b096      	sub	sp, #88	; 0x58
 80085c4:	4614      	mov	r4, r2
 80085c6:	461d      	mov	r5, r3
 80085c8:	da07      	bge.n	80085da <__swhatbuf_r+0x22>
 80085ca:	2300      	movs	r3, #0
 80085cc:	602b      	str	r3, [r5, #0]
 80085ce:	89b3      	ldrh	r3, [r6, #12]
 80085d0:	061a      	lsls	r2, r3, #24
 80085d2:	d410      	bmi.n	80085f6 <__swhatbuf_r+0x3e>
 80085d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085d8:	e00e      	b.n	80085f8 <__swhatbuf_r+0x40>
 80085da:	466a      	mov	r2, sp
 80085dc:	f000 fc7e 	bl	8008edc <_fstat_r>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	dbf2      	blt.n	80085ca <__swhatbuf_r+0x12>
 80085e4:	9a01      	ldr	r2, [sp, #4]
 80085e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085ee:	425a      	negs	r2, r3
 80085f0:	415a      	adcs	r2, r3
 80085f2:	602a      	str	r2, [r5, #0]
 80085f4:	e7ee      	b.n	80085d4 <__swhatbuf_r+0x1c>
 80085f6:	2340      	movs	r3, #64	; 0x40
 80085f8:	2000      	movs	r0, #0
 80085fa:	6023      	str	r3, [r4, #0]
 80085fc:	b016      	add	sp, #88	; 0x58
 80085fe:	bd70      	pop	{r4, r5, r6, pc}

08008600 <__smakebuf_r>:
 8008600:	898b      	ldrh	r3, [r1, #12]
 8008602:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008604:	079d      	lsls	r5, r3, #30
 8008606:	4606      	mov	r6, r0
 8008608:	460c      	mov	r4, r1
 800860a:	d507      	bpl.n	800861c <__smakebuf_r+0x1c>
 800860c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	6123      	str	r3, [r4, #16]
 8008614:	2301      	movs	r3, #1
 8008616:	6163      	str	r3, [r4, #20]
 8008618:	b002      	add	sp, #8
 800861a:	bd70      	pop	{r4, r5, r6, pc}
 800861c:	ab01      	add	r3, sp, #4
 800861e:	466a      	mov	r2, sp
 8008620:	f7ff ffca 	bl	80085b8 <__swhatbuf_r>
 8008624:	9900      	ldr	r1, [sp, #0]
 8008626:	4605      	mov	r5, r0
 8008628:	4630      	mov	r0, r6
 800862a:	f7ff fd33 	bl	8008094 <_malloc_r>
 800862e:	b948      	cbnz	r0, 8008644 <__smakebuf_r+0x44>
 8008630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008634:	059a      	lsls	r2, r3, #22
 8008636:	d4ef      	bmi.n	8008618 <__smakebuf_r+0x18>
 8008638:	f023 0303 	bic.w	r3, r3, #3
 800863c:	f043 0302 	orr.w	r3, r3, #2
 8008640:	81a3      	strh	r3, [r4, #12]
 8008642:	e7e3      	b.n	800860c <__smakebuf_r+0xc>
 8008644:	4b0d      	ldr	r3, [pc, #52]	; (800867c <__smakebuf_r+0x7c>)
 8008646:	62b3      	str	r3, [r6, #40]	; 0x28
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	6020      	str	r0, [r4, #0]
 800864c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008650:	81a3      	strh	r3, [r4, #12]
 8008652:	9b00      	ldr	r3, [sp, #0]
 8008654:	6163      	str	r3, [r4, #20]
 8008656:	9b01      	ldr	r3, [sp, #4]
 8008658:	6120      	str	r0, [r4, #16]
 800865a:	b15b      	cbz	r3, 8008674 <__smakebuf_r+0x74>
 800865c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008660:	4630      	mov	r0, r6
 8008662:	f000 fc4d 	bl	8008f00 <_isatty_r>
 8008666:	b128      	cbz	r0, 8008674 <__smakebuf_r+0x74>
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	f023 0303 	bic.w	r3, r3, #3
 800866e:	f043 0301 	orr.w	r3, r3, #1
 8008672:	81a3      	strh	r3, [r4, #12]
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	431d      	orrs	r5, r3
 8008678:	81a5      	strh	r5, [r4, #12]
 800867a:	e7cd      	b.n	8008618 <__smakebuf_r+0x18>
 800867c:	08007de9 	.word	0x08007de9

08008680 <__malloc_lock>:
 8008680:	4770      	bx	lr

08008682 <__malloc_unlock>:
 8008682:	4770      	bx	lr

08008684 <__ssputs_r>:
 8008684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008688:	688e      	ldr	r6, [r1, #8]
 800868a:	429e      	cmp	r6, r3
 800868c:	4682      	mov	sl, r0
 800868e:	460c      	mov	r4, r1
 8008690:	4690      	mov	r8, r2
 8008692:	4699      	mov	r9, r3
 8008694:	d837      	bhi.n	8008706 <__ssputs_r+0x82>
 8008696:	898a      	ldrh	r2, [r1, #12]
 8008698:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800869c:	d031      	beq.n	8008702 <__ssputs_r+0x7e>
 800869e:	6825      	ldr	r5, [r4, #0]
 80086a0:	6909      	ldr	r1, [r1, #16]
 80086a2:	1a6f      	subs	r7, r5, r1
 80086a4:	6965      	ldr	r5, [r4, #20]
 80086a6:	2302      	movs	r3, #2
 80086a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80086b0:	f109 0301 	add.w	r3, r9, #1
 80086b4:	443b      	add	r3, r7
 80086b6:	429d      	cmp	r5, r3
 80086b8:	bf38      	it	cc
 80086ba:	461d      	movcc	r5, r3
 80086bc:	0553      	lsls	r3, r2, #21
 80086be:	d530      	bpl.n	8008722 <__ssputs_r+0x9e>
 80086c0:	4629      	mov	r1, r5
 80086c2:	f7ff fce7 	bl	8008094 <_malloc_r>
 80086c6:	4606      	mov	r6, r0
 80086c8:	b950      	cbnz	r0, 80086e0 <__ssputs_r+0x5c>
 80086ca:	230c      	movs	r3, #12
 80086cc:	f8ca 3000 	str.w	r3, [sl]
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086d6:	81a3      	strh	r3, [r4, #12]
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295
 80086dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e0:	463a      	mov	r2, r7
 80086e2:	6921      	ldr	r1, [r4, #16]
 80086e4:	f7ff fc74 	bl	8007fd0 <memcpy>
 80086e8:	89a3      	ldrh	r3, [r4, #12]
 80086ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086f2:	81a3      	strh	r3, [r4, #12]
 80086f4:	6126      	str	r6, [r4, #16]
 80086f6:	6165      	str	r5, [r4, #20]
 80086f8:	443e      	add	r6, r7
 80086fa:	1bed      	subs	r5, r5, r7
 80086fc:	6026      	str	r6, [r4, #0]
 80086fe:	60a5      	str	r5, [r4, #8]
 8008700:	464e      	mov	r6, r9
 8008702:	454e      	cmp	r6, r9
 8008704:	d900      	bls.n	8008708 <__ssputs_r+0x84>
 8008706:	464e      	mov	r6, r9
 8008708:	4632      	mov	r2, r6
 800870a:	4641      	mov	r1, r8
 800870c:	6820      	ldr	r0, [r4, #0]
 800870e:	f000 fc07 	bl	8008f20 <memmove>
 8008712:	68a3      	ldr	r3, [r4, #8]
 8008714:	1b9b      	subs	r3, r3, r6
 8008716:	60a3      	str	r3, [r4, #8]
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	441e      	add	r6, r3
 800871c:	6026      	str	r6, [r4, #0]
 800871e:	2000      	movs	r0, #0
 8008720:	e7dc      	b.n	80086dc <__ssputs_r+0x58>
 8008722:	462a      	mov	r2, r5
 8008724:	f000 fc15 	bl	8008f52 <_realloc_r>
 8008728:	4606      	mov	r6, r0
 800872a:	2800      	cmp	r0, #0
 800872c:	d1e2      	bne.n	80086f4 <__ssputs_r+0x70>
 800872e:	6921      	ldr	r1, [r4, #16]
 8008730:	4650      	mov	r0, sl
 8008732:	f7ff fc61 	bl	8007ff8 <_free_r>
 8008736:	e7c8      	b.n	80086ca <__ssputs_r+0x46>

08008738 <_svfiprintf_r>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	461d      	mov	r5, r3
 800873e:	898b      	ldrh	r3, [r1, #12]
 8008740:	061f      	lsls	r7, r3, #24
 8008742:	b09d      	sub	sp, #116	; 0x74
 8008744:	4680      	mov	r8, r0
 8008746:	460c      	mov	r4, r1
 8008748:	4616      	mov	r6, r2
 800874a:	d50f      	bpl.n	800876c <_svfiprintf_r+0x34>
 800874c:	690b      	ldr	r3, [r1, #16]
 800874e:	b96b      	cbnz	r3, 800876c <_svfiprintf_r+0x34>
 8008750:	2140      	movs	r1, #64	; 0x40
 8008752:	f7ff fc9f 	bl	8008094 <_malloc_r>
 8008756:	6020      	str	r0, [r4, #0]
 8008758:	6120      	str	r0, [r4, #16]
 800875a:	b928      	cbnz	r0, 8008768 <_svfiprintf_r+0x30>
 800875c:	230c      	movs	r3, #12
 800875e:	f8c8 3000 	str.w	r3, [r8]
 8008762:	f04f 30ff 	mov.w	r0, #4294967295
 8008766:	e0c8      	b.n	80088fa <_svfiprintf_r+0x1c2>
 8008768:	2340      	movs	r3, #64	; 0x40
 800876a:	6163      	str	r3, [r4, #20]
 800876c:	2300      	movs	r3, #0
 800876e:	9309      	str	r3, [sp, #36]	; 0x24
 8008770:	2320      	movs	r3, #32
 8008772:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008776:	2330      	movs	r3, #48	; 0x30
 8008778:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800877c:	9503      	str	r5, [sp, #12]
 800877e:	f04f 0b01 	mov.w	fp, #1
 8008782:	4637      	mov	r7, r6
 8008784:	463d      	mov	r5, r7
 8008786:	f815 3b01 	ldrb.w	r3, [r5], #1
 800878a:	b10b      	cbz	r3, 8008790 <_svfiprintf_r+0x58>
 800878c:	2b25      	cmp	r3, #37	; 0x25
 800878e:	d13e      	bne.n	800880e <_svfiprintf_r+0xd6>
 8008790:	ebb7 0a06 	subs.w	sl, r7, r6
 8008794:	d00b      	beq.n	80087ae <_svfiprintf_r+0x76>
 8008796:	4653      	mov	r3, sl
 8008798:	4632      	mov	r2, r6
 800879a:	4621      	mov	r1, r4
 800879c:	4640      	mov	r0, r8
 800879e:	f7ff ff71 	bl	8008684 <__ssputs_r>
 80087a2:	3001      	adds	r0, #1
 80087a4:	f000 80a4 	beq.w	80088f0 <_svfiprintf_r+0x1b8>
 80087a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087aa:	4453      	add	r3, sl
 80087ac:	9309      	str	r3, [sp, #36]	; 0x24
 80087ae:	783b      	ldrb	r3, [r7, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 809d 	beq.w	80088f0 <_svfiprintf_r+0x1b8>
 80087b6:	2300      	movs	r3, #0
 80087b8:	f04f 32ff 	mov.w	r2, #4294967295
 80087bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087c0:	9304      	str	r3, [sp, #16]
 80087c2:	9307      	str	r3, [sp, #28]
 80087c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087c8:	931a      	str	r3, [sp, #104]	; 0x68
 80087ca:	462f      	mov	r7, r5
 80087cc:	2205      	movs	r2, #5
 80087ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80087d2:	4850      	ldr	r0, [pc, #320]	; (8008914 <_svfiprintf_r+0x1dc>)
 80087d4:	f7f7 fcfc 	bl	80001d0 <memchr>
 80087d8:	9b04      	ldr	r3, [sp, #16]
 80087da:	b9d0      	cbnz	r0, 8008812 <_svfiprintf_r+0xda>
 80087dc:	06d9      	lsls	r1, r3, #27
 80087de:	bf44      	itt	mi
 80087e0:	2220      	movmi	r2, #32
 80087e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087e6:	071a      	lsls	r2, r3, #28
 80087e8:	bf44      	itt	mi
 80087ea:	222b      	movmi	r2, #43	; 0x2b
 80087ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087f0:	782a      	ldrb	r2, [r5, #0]
 80087f2:	2a2a      	cmp	r2, #42	; 0x2a
 80087f4:	d015      	beq.n	8008822 <_svfiprintf_r+0xea>
 80087f6:	9a07      	ldr	r2, [sp, #28]
 80087f8:	462f      	mov	r7, r5
 80087fa:	2000      	movs	r0, #0
 80087fc:	250a      	movs	r5, #10
 80087fe:	4639      	mov	r1, r7
 8008800:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008804:	3b30      	subs	r3, #48	; 0x30
 8008806:	2b09      	cmp	r3, #9
 8008808:	d94d      	bls.n	80088a6 <_svfiprintf_r+0x16e>
 800880a:	b1b8      	cbz	r0, 800883c <_svfiprintf_r+0x104>
 800880c:	e00f      	b.n	800882e <_svfiprintf_r+0xf6>
 800880e:	462f      	mov	r7, r5
 8008810:	e7b8      	b.n	8008784 <_svfiprintf_r+0x4c>
 8008812:	4a40      	ldr	r2, [pc, #256]	; (8008914 <_svfiprintf_r+0x1dc>)
 8008814:	1a80      	subs	r0, r0, r2
 8008816:	fa0b f000 	lsl.w	r0, fp, r0
 800881a:	4318      	orrs	r0, r3
 800881c:	9004      	str	r0, [sp, #16]
 800881e:	463d      	mov	r5, r7
 8008820:	e7d3      	b.n	80087ca <_svfiprintf_r+0x92>
 8008822:	9a03      	ldr	r2, [sp, #12]
 8008824:	1d11      	adds	r1, r2, #4
 8008826:	6812      	ldr	r2, [r2, #0]
 8008828:	9103      	str	r1, [sp, #12]
 800882a:	2a00      	cmp	r2, #0
 800882c:	db01      	blt.n	8008832 <_svfiprintf_r+0xfa>
 800882e:	9207      	str	r2, [sp, #28]
 8008830:	e004      	b.n	800883c <_svfiprintf_r+0x104>
 8008832:	4252      	negs	r2, r2
 8008834:	f043 0302 	orr.w	r3, r3, #2
 8008838:	9207      	str	r2, [sp, #28]
 800883a:	9304      	str	r3, [sp, #16]
 800883c:	783b      	ldrb	r3, [r7, #0]
 800883e:	2b2e      	cmp	r3, #46	; 0x2e
 8008840:	d10c      	bne.n	800885c <_svfiprintf_r+0x124>
 8008842:	787b      	ldrb	r3, [r7, #1]
 8008844:	2b2a      	cmp	r3, #42	; 0x2a
 8008846:	d133      	bne.n	80088b0 <_svfiprintf_r+0x178>
 8008848:	9b03      	ldr	r3, [sp, #12]
 800884a:	1d1a      	adds	r2, r3, #4
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	9203      	str	r2, [sp, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	bfb8      	it	lt
 8008854:	f04f 33ff 	movlt.w	r3, #4294967295
 8008858:	3702      	adds	r7, #2
 800885a:	9305      	str	r3, [sp, #20]
 800885c:	4d2e      	ldr	r5, [pc, #184]	; (8008918 <_svfiprintf_r+0x1e0>)
 800885e:	7839      	ldrb	r1, [r7, #0]
 8008860:	2203      	movs	r2, #3
 8008862:	4628      	mov	r0, r5
 8008864:	f7f7 fcb4 	bl	80001d0 <memchr>
 8008868:	b138      	cbz	r0, 800887a <_svfiprintf_r+0x142>
 800886a:	2340      	movs	r3, #64	; 0x40
 800886c:	1b40      	subs	r0, r0, r5
 800886e:	fa03 f000 	lsl.w	r0, r3, r0
 8008872:	9b04      	ldr	r3, [sp, #16]
 8008874:	4303      	orrs	r3, r0
 8008876:	3701      	adds	r7, #1
 8008878:	9304      	str	r3, [sp, #16]
 800887a:	7839      	ldrb	r1, [r7, #0]
 800887c:	4827      	ldr	r0, [pc, #156]	; (800891c <_svfiprintf_r+0x1e4>)
 800887e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008882:	2206      	movs	r2, #6
 8008884:	1c7e      	adds	r6, r7, #1
 8008886:	f7f7 fca3 	bl	80001d0 <memchr>
 800888a:	2800      	cmp	r0, #0
 800888c:	d038      	beq.n	8008900 <_svfiprintf_r+0x1c8>
 800888e:	4b24      	ldr	r3, [pc, #144]	; (8008920 <_svfiprintf_r+0x1e8>)
 8008890:	bb13      	cbnz	r3, 80088d8 <_svfiprintf_r+0x1a0>
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	3307      	adds	r3, #7
 8008896:	f023 0307 	bic.w	r3, r3, #7
 800889a:	3308      	adds	r3, #8
 800889c:	9303      	str	r3, [sp, #12]
 800889e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a0:	444b      	add	r3, r9
 80088a2:	9309      	str	r3, [sp, #36]	; 0x24
 80088a4:	e76d      	b.n	8008782 <_svfiprintf_r+0x4a>
 80088a6:	fb05 3202 	mla	r2, r5, r2, r3
 80088aa:	2001      	movs	r0, #1
 80088ac:	460f      	mov	r7, r1
 80088ae:	e7a6      	b.n	80087fe <_svfiprintf_r+0xc6>
 80088b0:	2300      	movs	r3, #0
 80088b2:	3701      	adds	r7, #1
 80088b4:	9305      	str	r3, [sp, #20]
 80088b6:	4619      	mov	r1, r3
 80088b8:	250a      	movs	r5, #10
 80088ba:	4638      	mov	r0, r7
 80088bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088c0:	3a30      	subs	r2, #48	; 0x30
 80088c2:	2a09      	cmp	r2, #9
 80088c4:	d903      	bls.n	80088ce <_svfiprintf_r+0x196>
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0c8      	beq.n	800885c <_svfiprintf_r+0x124>
 80088ca:	9105      	str	r1, [sp, #20]
 80088cc:	e7c6      	b.n	800885c <_svfiprintf_r+0x124>
 80088ce:	fb05 2101 	mla	r1, r5, r1, r2
 80088d2:	2301      	movs	r3, #1
 80088d4:	4607      	mov	r7, r0
 80088d6:	e7f0      	b.n	80088ba <_svfiprintf_r+0x182>
 80088d8:	ab03      	add	r3, sp, #12
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	4622      	mov	r2, r4
 80088de:	4b11      	ldr	r3, [pc, #68]	; (8008924 <_svfiprintf_r+0x1ec>)
 80088e0:	a904      	add	r1, sp, #16
 80088e2:	4640      	mov	r0, r8
 80088e4:	f3af 8000 	nop.w
 80088e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80088ec:	4681      	mov	r9, r0
 80088ee:	d1d6      	bne.n	800889e <_svfiprintf_r+0x166>
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	065b      	lsls	r3, r3, #25
 80088f4:	f53f af35 	bmi.w	8008762 <_svfiprintf_r+0x2a>
 80088f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088fa:	b01d      	add	sp, #116	; 0x74
 80088fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008900:	ab03      	add	r3, sp, #12
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	4622      	mov	r2, r4
 8008906:	4b07      	ldr	r3, [pc, #28]	; (8008924 <_svfiprintf_r+0x1ec>)
 8008908:	a904      	add	r1, sp, #16
 800890a:	4640      	mov	r0, r8
 800890c:	f000 f9c2 	bl	8008c94 <_printf_i>
 8008910:	e7ea      	b.n	80088e8 <_svfiprintf_r+0x1b0>
 8008912:	bf00      	nop
 8008914:	080098f1 	.word	0x080098f1
 8008918:	080098f7 	.word	0x080098f7
 800891c:	080098fb 	.word	0x080098fb
 8008920:	00000000 	.word	0x00000000
 8008924:	08008685 	.word	0x08008685

08008928 <__sfputc_r>:
 8008928:	6893      	ldr	r3, [r2, #8]
 800892a:	3b01      	subs	r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	b410      	push	{r4}
 8008930:	6093      	str	r3, [r2, #8]
 8008932:	da08      	bge.n	8008946 <__sfputc_r+0x1e>
 8008934:	6994      	ldr	r4, [r2, #24]
 8008936:	42a3      	cmp	r3, r4
 8008938:	db01      	blt.n	800893e <__sfputc_r+0x16>
 800893a:	290a      	cmp	r1, #10
 800893c:	d103      	bne.n	8008946 <__sfputc_r+0x1e>
 800893e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008942:	f7ff bd45 	b.w	80083d0 <__swbuf_r>
 8008946:	6813      	ldr	r3, [r2, #0]
 8008948:	1c58      	adds	r0, r3, #1
 800894a:	6010      	str	r0, [r2, #0]
 800894c:	7019      	strb	r1, [r3, #0]
 800894e:	4608      	mov	r0, r1
 8008950:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008954:	4770      	bx	lr

08008956 <__sfputs_r>:
 8008956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008958:	4606      	mov	r6, r0
 800895a:	460f      	mov	r7, r1
 800895c:	4614      	mov	r4, r2
 800895e:	18d5      	adds	r5, r2, r3
 8008960:	42ac      	cmp	r4, r5
 8008962:	d101      	bne.n	8008968 <__sfputs_r+0x12>
 8008964:	2000      	movs	r0, #0
 8008966:	e007      	b.n	8008978 <__sfputs_r+0x22>
 8008968:	463a      	mov	r2, r7
 800896a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800896e:	4630      	mov	r0, r6
 8008970:	f7ff ffda 	bl	8008928 <__sfputc_r>
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	d1f3      	bne.n	8008960 <__sfputs_r+0xa>
 8008978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800897c <_vfiprintf_r>:
 800897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	460c      	mov	r4, r1
 8008982:	b09d      	sub	sp, #116	; 0x74
 8008984:	4617      	mov	r7, r2
 8008986:	461d      	mov	r5, r3
 8008988:	4606      	mov	r6, r0
 800898a:	b118      	cbz	r0, 8008994 <_vfiprintf_r+0x18>
 800898c:	6983      	ldr	r3, [r0, #24]
 800898e:	b90b      	cbnz	r3, 8008994 <_vfiprintf_r+0x18>
 8008990:	f7ff fa46 	bl	8007e20 <__sinit>
 8008994:	4b7c      	ldr	r3, [pc, #496]	; (8008b88 <_vfiprintf_r+0x20c>)
 8008996:	429c      	cmp	r4, r3
 8008998:	d158      	bne.n	8008a4c <_vfiprintf_r+0xd0>
 800899a:	6874      	ldr	r4, [r6, #4]
 800899c:	89a3      	ldrh	r3, [r4, #12]
 800899e:	0718      	lsls	r0, r3, #28
 80089a0:	d55e      	bpl.n	8008a60 <_vfiprintf_r+0xe4>
 80089a2:	6923      	ldr	r3, [r4, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d05b      	beq.n	8008a60 <_vfiprintf_r+0xe4>
 80089a8:	2300      	movs	r3, #0
 80089aa:	9309      	str	r3, [sp, #36]	; 0x24
 80089ac:	2320      	movs	r3, #32
 80089ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089b2:	2330      	movs	r3, #48	; 0x30
 80089b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089b8:	9503      	str	r5, [sp, #12]
 80089ba:	f04f 0b01 	mov.w	fp, #1
 80089be:	46b8      	mov	r8, r7
 80089c0:	4645      	mov	r5, r8
 80089c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80089c6:	b10b      	cbz	r3, 80089cc <_vfiprintf_r+0x50>
 80089c8:	2b25      	cmp	r3, #37	; 0x25
 80089ca:	d154      	bne.n	8008a76 <_vfiprintf_r+0xfa>
 80089cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80089d0:	d00b      	beq.n	80089ea <_vfiprintf_r+0x6e>
 80089d2:	4653      	mov	r3, sl
 80089d4:	463a      	mov	r2, r7
 80089d6:	4621      	mov	r1, r4
 80089d8:	4630      	mov	r0, r6
 80089da:	f7ff ffbc 	bl	8008956 <__sfputs_r>
 80089de:	3001      	adds	r0, #1
 80089e0:	f000 80c2 	beq.w	8008b68 <_vfiprintf_r+0x1ec>
 80089e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e6:	4453      	add	r3, sl
 80089e8:	9309      	str	r3, [sp, #36]	; 0x24
 80089ea:	f898 3000 	ldrb.w	r3, [r8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 80ba 	beq.w	8008b68 <_vfiprintf_r+0x1ec>
 80089f4:	2300      	movs	r3, #0
 80089f6:	f04f 32ff 	mov.w	r2, #4294967295
 80089fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089fe:	9304      	str	r3, [sp, #16]
 8008a00:	9307      	str	r3, [sp, #28]
 8008a02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a06:	931a      	str	r3, [sp, #104]	; 0x68
 8008a08:	46a8      	mov	r8, r5
 8008a0a:	2205      	movs	r2, #5
 8008a0c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008a10:	485e      	ldr	r0, [pc, #376]	; (8008b8c <_vfiprintf_r+0x210>)
 8008a12:	f7f7 fbdd 	bl	80001d0 <memchr>
 8008a16:	9b04      	ldr	r3, [sp, #16]
 8008a18:	bb78      	cbnz	r0, 8008a7a <_vfiprintf_r+0xfe>
 8008a1a:	06d9      	lsls	r1, r3, #27
 8008a1c:	bf44      	itt	mi
 8008a1e:	2220      	movmi	r2, #32
 8008a20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a24:	071a      	lsls	r2, r3, #28
 8008a26:	bf44      	itt	mi
 8008a28:	222b      	movmi	r2, #43	; 0x2b
 8008a2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a2e:	782a      	ldrb	r2, [r5, #0]
 8008a30:	2a2a      	cmp	r2, #42	; 0x2a
 8008a32:	d02a      	beq.n	8008a8a <_vfiprintf_r+0x10e>
 8008a34:	9a07      	ldr	r2, [sp, #28]
 8008a36:	46a8      	mov	r8, r5
 8008a38:	2000      	movs	r0, #0
 8008a3a:	250a      	movs	r5, #10
 8008a3c:	4641      	mov	r1, r8
 8008a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a42:	3b30      	subs	r3, #48	; 0x30
 8008a44:	2b09      	cmp	r3, #9
 8008a46:	d969      	bls.n	8008b1c <_vfiprintf_r+0x1a0>
 8008a48:	b360      	cbz	r0, 8008aa4 <_vfiprintf_r+0x128>
 8008a4a:	e024      	b.n	8008a96 <_vfiprintf_r+0x11a>
 8008a4c:	4b50      	ldr	r3, [pc, #320]	; (8008b90 <_vfiprintf_r+0x214>)
 8008a4e:	429c      	cmp	r4, r3
 8008a50:	d101      	bne.n	8008a56 <_vfiprintf_r+0xda>
 8008a52:	68b4      	ldr	r4, [r6, #8]
 8008a54:	e7a2      	b.n	800899c <_vfiprintf_r+0x20>
 8008a56:	4b4f      	ldr	r3, [pc, #316]	; (8008b94 <_vfiprintf_r+0x218>)
 8008a58:	429c      	cmp	r4, r3
 8008a5a:	bf08      	it	eq
 8008a5c:	68f4      	ldreq	r4, [r6, #12]
 8008a5e:	e79d      	b.n	800899c <_vfiprintf_r+0x20>
 8008a60:	4621      	mov	r1, r4
 8008a62:	4630      	mov	r0, r6
 8008a64:	f7ff fd18 	bl	8008498 <__swsetup_r>
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d09d      	beq.n	80089a8 <_vfiprintf_r+0x2c>
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a70:	b01d      	add	sp, #116	; 0x74
 8008a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a76:	46a8      	mov	r8, r5
 8008a78:	e7a2      	b.n	80089c0 <_vfiprintf_r+0x44>
 8008a7a:	4a44      	ldr	r2, [pc, #272]	; (8008b8c <_vfiprintf_r+0x210>)
 8008a7c:	1a80      	subs	r0, r0, r2
 8008a7e:	fa0b f000 	lsl.w	r0, fp, r0
 8008a82:	4318      	orrs	r0, r3
 8008a84:	9004      	str	r0, [sp, #16]
 8008a86:	4645      	mov	r5, r8
 8008a88:	e7be      	b.n	8008a08 <_vfiprintf_r+0x8c>
 8008a8a:	9a03      	ldr	r2, [sp, #12]
 8008a8c:	1d11      	adds	r1, r2, #4
 8008a8e:	6812      	ldr	r2, [r2, #0]
 8008a90:	9103      	str	r1, [sp, #12]
 8008a92:	2a00      	cmp	r2, #0
 8008a94:	db01      	blt.n	8008a9a <_vfiprintf_r+0x11e>
 8008a96:	9207      	str	r2, [sp, #28]
 8008a98:	e004      	b.n	8008aa4 <_vfiprintf_r+0x128>
 8008a9a:	4252      	negs	r2, r2
 8008a9c:	f043 0302 	orr.w	r3, r3, #2
 8008aa0:	9207      	str	r2, [sp, #28]
 8008aa2:	9304      	str	r3, [sp, #16]
 8008aa4:	f898 3000 	ldrb.w	r3, [r8]
 8008aa8:	2b2e      	cmp	r3, #46	; 0x2e
 8008aaa:	d10e      	bne.n	8008aca <_vfiprintf_r+0x14e>
 8008aac:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ab2:	d138      	bne.n	8008b26 <_vfiprintf_r+0x1aa>
 8008ab4:	9b03      	ldr	r3, [sp, #12]
 8008ab6:	1d1a      	adds	r2, r3, #4
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	9203      	str	r2, [sp, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	bfb8      	it	lt
 8008ac0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ac4:	f108 0802 	add.w	r8, r8, #2
 8008ac8:	9305      	str	r3, [sp, #20]
 8008aca:	4d33      	ldr	r5, [pc, #204]	; (8008b98 <_vfiprintf_r+0x21c>)
 8008acc:	f898 1000 	ldrb.w	r1, [r8]
 8008ad0:	2203      	movs	r2, #3
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	f7f7 fb7c 	bl	80001d0 <memchr>
 8008ad8:	b140      	cbz	r0, 8008aec <_vfiprintf_r+0x170>
 8008ada:	2340      	movs	r3, #64	; 0x40
 8008adc:	1b40      	subs	r0, r0, r5
 8008ade:	fa03 f000 	lsl.w	r0, r3, r0
 8008ae2:	9b04      	ldr	r3, [sp, #16]
 8008ae4:	4303      	orrs	r3, r0
 8008ae6:	f108 0801 	add.w	r8, r8, #1
 8008aea:	9304      	str	r3, [sp, #16]
 8008aec:	f898 1000 	ldrb.w	r1, [r8]
 8008af0:	482a      	ldr	r0, [pc, #168]	; (8008b9c <_vfiprintf_r+0x220>)
 8008af2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008af6:	2206      	movs	r2, #6
 8008af8:	f108 0701 	add.w	r7, r8, #1
 8008afc:	f7f7 fb68 	bl	80001d0 <memchr>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d037      	beq.n	8008b74 <_vfiprintf_r+0x1f8>
 8008b04:	4b26      	ldr	r3, [pc, #152]	; (8008ba0 <_vfiprintf_r+0x224>)
 8008b06:	bb1b      	cbnz	r3, 8008b50 <_vfiprintf_r+0x1d4>
 8008b08:	9b03      	ldr	r3, [sp, #12]
 8008b0a:	3307      	adds	r3, #7
 8008b0c:	f023 0307 	bic.w	r3, r3, #7
 8008b10:	3308      	adds	r3, #8
 8008b12:	9303      	str	r3, [sp, #12]
 8008b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b16:	444b      	add	r3, r9
 8008b18:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1a:	e750      	b.n	80089be <_vfiprintf_r+0x42>
 8008b1c:	fb05 3202 	mla	r2, r5, r2, r3
 8008b20:	2001      	movs	r0, #1
 8008b22:	4688      	mov	r8, r1
 8008b24:	e78a      	b.n	8008a3c <_vfiprintf_r+0xc0>
 8008b26:	2300      	movs	r3, #0
 8008b28:	f108 0801 	add.w	r8, r8, #1
 8008b2c:	9305      	str	r3, [sp, #20]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	250a      	movs	r5, #10
 8008b32:	4640      	mov	r0, r8
 8008b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b38:	3a30      	subs	r2, #48	; 0x30
 8008b3a:	2a09      	cmp	r2, #9
 8008b3c:	d903      	bls.n	8008b46 <_vfiprintf_r+0x1ca>
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0c3      	beq.n	8008aca <_vfiprintf_r+0x14e>
 8008b42:	9105      	str	r1, [sp, #20]
 8008b44:	e7c1      	b.n	8008aca <_vfiprintf_r+0x14e>
 8008b46:	fb05 2101 	mla	r1, r5, r1, r2
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	4680      	mov	r8, r0
 8008b4e:	e7f0      	b.n	8008b32 <_vfiprintf_r+0x1b6>
 8008b50:	ab03      	add	r3, sp, #12
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	4622      	mov	r2, r4
 8008b56:	4b13      	ldr	r3, [pc, #76]	; (8008ba4 <_vfiprintf_r+0x228>)
 8008b58:	a904      	add	r1, sp, #16
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f3af 8000 	nop.w
 8008b60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008b64:	4681      	mov	r9, r0
 8008b66:	d1d5      	bne.n	8008b14 <_vfiprintf_r+0x198>
 8008b68:	89a3      	ldrh	r3, [r4, #12]
 8008b6a:	065b      	lsls	r3, r3, #25
 8008b6c:	f53f af7e 	bmi.w	8008a6c <_vfiprintf_r+0xf0>
 8008b70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b72:	e77d      	b.n	8008a70 <_vfiprintf_r+0xf4>
 8008b74:	ab03      	add	r3, sp, #12
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	4622      	mov	r2, r4
 8008b7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <_vfiprintf_r+0x228>)
 8008b7c:	a904      	add	r1, sp, #16
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f000 f888 	bl	8008c94 <_printf_i>
 8008b84:	e7ec      	b.n	8008b60 <_vfiprintf_r+0x1e4>
 8008b86:	bf00      	nop
 8008b88:	08009888 	.word	0x08009888
 8008b8c:	080098f1 	.word	0x080098f1
 8008b90:	080098a8 	.word	0x080098a8
 8008b94:	08009868 	.word	0x08009868
 8008b98:	080098f7 	.word	0x080098f7
 8008b9c:	080098fb 	.word	0x080098fb
 8008ba0:	00000000 	.word	0x00000000
 8008ba4:	08008957 	.word	0x08008957

08008ba8 <_printf_common>:
 8008ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bac:	4691      	mov	r9, r2
 8008bae:	461f      	mov	r7, r3
 8008bb0:	688a      	ldr	r2, [r1, #8]
 8008bb2:	690b      	ldr	r3, [r1, #16]
 8008bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	bfb8      	it	lt
 8008bbc:	4613      	movlt	r3, r2
 8008bbe:	f8c9 3000 	str.w	r3, [r9]
 8008bc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	460c      	mov	r4, r1
 8008bca:	b112      	cbz	r2, 8008bd2 <_printf_common+0x2a>
 8008bcc:	3301      	adds	r3, #1
 8008bce:	f8c9 3000 	str.w	r3, [r9]
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	0699      	lsls	r1, r3, #26
 8008bd6:	bf42      	ittt	mi
 8008bd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008bdc:	3302      	addmi	r3, #2
 8008bde:	f8c9 3000 	strmi.w	r3, [r9]
 8008be2:	6825      	ldr	r5, [r4, #0]
 8008be4:	f015 0506 	ands.w	r5, r5, #6
 8008be8:	d107      	bne.n	8008bfa <_printf_common+0x52>
 8008bea:	f104 0a19 	add.w	sl, r4, #25
 8008bee:	68e3      	ldr	r3, [r4, #12]
 8008bf0:	f8d9 2000 	ldr.w	r2, [r9]
 8008bf4:	1a9b      	subs	r3, r3, r2
 8008bf6:	42ab      	cmp	r3, r5
 8008bf8:	dc28      	bgt.n	8008c4c <_printf_common+0xa4>
 8008bfa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008bfe:	6822      	ldr	r2, [r4, #0]
 8008c00:	3300      	adds	r3, #0
 8008c02:	bf18      	it	ne
 8008c04:	2301      	movne	r3, #1
 8008c06:	0692      	lsls	r2, r2, #26
 8008c08:	d42d      	bmi.n	8008c66 <_printf_common+0xbe>
 8008c0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c0e:	4639      	mov	r1, r7
 8008c10:	4630      	mov	r0, r6
 8008c12:	47c0      	blx	r8
 8008c14:	3001      	adds	r0, #1
 8008c16:	d020      	beq.n	8008c5a <_printf_common+0xb2>
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	68e5      	ldr	r5, [r4, #12]
 8008c1c:	f8d9 2000 	ldr.w	r2, [r9]
 8008c20:	f003 0306 	and.w	r3, r3, #6
 8008c24:	2b04      	cmp	r3, #4
 8008c26:	bf08      	it	eq
 8008c28:	1aad      	subeq	r5, r5, r2
 8008c2a:	68a3      	ldr	r3, [r4, #8]
 8008c2c:	6922      	ldr	r2, [r4, #16]
 8008c2e:	bf0c      	ite	eq
 8008c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c34:	2500      	movne	r5, #0
 8008c36:	4293      	cmp	r3, r2
 8008c38:	bfc4      	itt	gt
 8008c3a:	1a9b      	subgt	r3, r3, r2
 8008c3c:	18ed      	addgt	r5, r5, r3
 8008c3e:	f04f 0900 	mov.w	r9, #0
 8008c42:	341a      	adds	r4, #26
 8008c44:	454d      	cmp	r5, r9
 8008c46:	d11a      	bne.n	8008c7e <_printf_common+0xd6>
 8008c48:	2000      	movs	r0, #0
 8008c4a:	e008      	b.n	8008c5e <_printf_common+0xb6>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	4652      	mov	r2, sl
 8008c50:	4639      	mov	r1, r7
 8008c52:	4630      	mov	r0, r6
 8008c54:	47c0      	blx	r8
 8008c56:	3001      	adds	r0, #1
 8008c58:	d103      	bne.n	8008c62 <_printf_common+0xba>
 8008c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c62:	3501      	adds	r5, #1
 8008c64:	e7c3      	b.n	8008bee <_printf_common+0x46>
 8008c66:	18e1      	adds	r1, r4, r3
 8008c68:	1c5a      	adds	r2, r3, #1
 8008c6a:	2030      	movs	r0, #48	; 0x30
 8008c6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c70:	4422      	add	r2, r4
 8008c72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c7a:	3302      	adds	r3, #2
 8008c7c:	e7c5      	b.n	8008c0a <_printf_common+0x62>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	4622      	mov	r2, r4
 8008c82:	4639      	mov	r1, r7
 8008c84:	4630      	mov	r0, r6
 8008c86:	47c0      	blx	r8
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d0e6      	beq.n	8008c5a <_printf_common+0xb2>
 8008c8c:	f109 0901 	add.w	r9, r9, #1
 8008c90:	e7d8      	b.n	8008c44 <_printf_common+0x9c>
	...

08008c94 <_printf_i>:
 8008c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	7e09      	ldrb	r1, [r1, #24]
 8008ca0:	b085      	sub	sp, #20
 8008ca2:	296e      	cmp	r1, #110	; 0x6e
 8008ca4:	4617      	mov	r7, r2
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	4698      	mov	r8, r3
 8008caa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cac:	f000 80b3 	beq.w	8008e16 <_printf_i+0x182>
 8008cb0:	d822      	bhi.n	8008cf8 <_printf_i+0x64>
 8008cb2:	2963      	cmp	r1, #99	; 0x63
 8008cb4:	d036      	beq.n	8008d24 <_printf_i+0x90>
 8008cb6:	d80a      	bhi.n	8008cce <_printf_i+0x3a>
 8008cb8:	2900      	cmp	r1, #0
 8008cba:	f000 80b9 	beq.w	8008e30 <_printf_i+0x19c>
 8008cbe:	2958      	cmp	r1, #88	; 0x58
 8008cc0:	f000 8083 	beq.w	8008dca <_printf_i+0x136>
 8008cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cc8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008ccc:	e032      	b.n	8008d34 <_printf_i+0xa0>
 8008cce:	2964      	cmp	r1, #100	; 0x64
 8008cd0:	d001      	beq.n	8008cd6 <_printf_i+0x42>
 8008cd2:	2969      	cmp	r1, #105	; 0x69
 8008cd4:	d1f6      	bne.n	8008cc4 <_printf_i+0x30>
 8008cd6:	6820      	ldr	r0, [r4, #0]
 8008cd8:	6813      	ldr	r3, [r2, #0]
 8008cda:	0605      	lsls	r5, r0, #24
 8008cdc:	f103 0104 	add.w	r1, r3, #4
 8008ce0:	d52a      	bpl.n	8008d38 <_printf_i+0xa4>
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6011      	str	r1, [r2, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	da03      	bge.n	8008cf2 <_printf_i+0x5e>
 8008cea:	222d      	movs	r2, #45	; 0x2d
 8008cec:	425b      	negs	r3, r3
 8008cee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008cf2:	486f      	ldr	r0, [pc, #444]	; (8008eb0 <_printf_i+0x21c>)
 8008cf4:	220a      	movs	r2, #10
 8008cf6:	e039      	b.n	8008d6c <_printf_i+0xd8>
 8008cf8:	2973      	cmp	r1, #115	; 0x73
 8008cfa:	f000 809d 	beq.w	8008e38 <_printf_i+0x1a4>
 8008cfe:	d808      	bhi.n	8008d12 <_printf_i+0x7e>
 8008d00:	296f      	cmp	r1, #111	; 0x6f
 8008d02:	d020      	beq.n	8008d46 <_printf_i+0xb2>
 8008d04:	2970      	cmp	r1, #112	; 0x70
 8008d06:	d1dd      	bne.n	8008cc4 <_printf_i+0x30>
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	f043 0320 	orr.w	r3, r3, #32
 8008d0e:	6023      	str	r3, [r4, #0]
 8008d10:	e003      	b.n	8008d1a <_printf_i+0x86>
 8008d12:	2975      	cmp	r1, #117	; 0x75
 8008d14:	d017      	beq.n	8008d46 <_printf_i+0xb2>
 8008d16:	2978      	cmp	r1, #120	; 0x78
 8008d18:	d1d4      	bne.n	8008cc4 <_printf_i+0x30>
 8008d1a:	2378      	movs	r3, #120	; 0x78
 8008d1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d20:	4864      	ldr	r0, [pc, #400]	; (8008eb4 <_printf_i+0x220>)
 8008d22:	e055      	b.n	8008dd0 <_printf_i+0x13c>
 8008d24:	6813      	ldr	r3, [r2, #0]
 8008d26:	1d19      	adds	r1, r3, #4
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6011      	str	r1, [r2, #0]
 8008d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d34:	2301      	movs	r3, #1
 8008d36:	e08c      	b.n	8008e52 <_printf_i+0x1be>
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6011      	str	r1, [r2, #0]
 8008d3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d40:	bf18      	it	ne
 8008d42:	b21b      	sxthne	r3, r3
 8008d44:	e7cf      	b.n	8008ce6 <_printf_i+0x52>
 8008d46:	6813      	ldr	r3, [r2, #0]
 8008d48:	6825      	ldr	r5, [r4, #0]
 8008d4a:	1d18      	adds	r0, r3, #4
 8008d4c:	6010      	str	r0, [r2, #0]
 8008d4e:	0628      	lsls	r0, r5, #24
 8008d50:	d501      	bpl.n	8008d56 <_printf_i+0xc2>
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	e002      	b.n	8008d5c <_printf_i+0xc8>
 8008d56:	0668      	lsls	r0, r5, #25
 8008d58:	d5fb      	bpl.n	8008d52 <_printf_i+0xbe>
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	4854      	ldr	r0, [pc, #336]	; (8008eb0 <_printf_i+0x21c>)
 8008d5e:	296f      	cmp	r1, #111	; 0x6f
 8008d60:	bf14      	ite	ne
 8008d62:	220a      	movne	r2, #10
 8008d64:	2208      	moveq	r2, #8
 8008d66:	2100      	movs	r1, #0
 8008d68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d6c:	6865      	ldr	r5, [r4, #4]
 8008d6e:	60a5      	str	r5, [r4, #8]
 8008d70:	2d00      	cmp	r5, #0
 8008d72:	f2c0 8095 	blt.w	8008ea0 <_printf_i+0x20c>
 8008d76:	6821      	ldr	r1, [r4, #0]
 8008d78:	f021 0104 	bic.w	r1, r1, #4
 8008d7c:	6021      	str	r1, [r4, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d13d      	bne.n	8008dfe <_printf_i+0x16a>
 8008d82:	2d00      	cmp	r5, #0
 8008d84:	f040 808e 	bne.w	8008ea4 <_printf_i+0x210>
 8008d88:	4665      	mov	r5, ip
 8008d8a:	2a08      	cmp	r2, #8
 8008d8c:	d10b      	bne.n	8008da6 <_printf_i+0x112>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	07db      	lsls	r3, r3, #31
 8008d92:	d508      	bpl.n	8008da6 <_printf_i+0x112>
 8008d94:	6923      	ldr	r3, [r4, #16]
 8008d96:	6862      	ldr	r2, [r4, #4]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	bfde      	ittt	le
 8008d9c:	2330      	movle	r3, #48	; 0x30
 8008d9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008da2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008da6:	ebac 0305 	sub.w	r3, ip, r5
 8008daa:	6123      	str	r3, [r4, #16]
 8008dac:	f8cd 8000 	str.w	r8, [sp]
 8008db0:	463b      	mov	r3, r7
 8008db2:	aa03      	add	r2, sp, #12
 8008db4:	4621      	mov	r1, r4
 8008db6:	4630      	mov	r0, r6
 8008db8:	f7ff fef6 	bl	8008ba8 <_printf_common>
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	d14d      	bne.n	8008e5c <_printf_i+0x1c8>
 8008dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc4:	b005      	add	sp, #20
 8008dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dca:	4839      	ldr	r0, [pc, #228]	; (8008eb0 <_printf_i+0x21c>)
 8008dcc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008dd0:	6813      	ldr	r3, [r2, #0]
 8008dd2:	6821      	ldr	r1, [r4, #0]
 8008dd4:	1d1d      	adds	r5, r3, #4
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6015      	str	r5, [r2, #0]
 8008dda:	060a      	lsls	r2, r1, #24
 8008ddc:	d50b      	bpl.n	8008df6 <_printf_i+0x162>
 8008dde:	07ca      	lsls	r2, r1, #31
 8008de0:	bf44      	itt	mi
 8008de2:	f041 0120 	orrmi.w	r1, r1, #32
 8008de6:	6021      	strmi	r1, [r4, #0]
 8008de8:	b91b      	cbnz	r3, 8008df2 <_printf_i+0x15e>
 8008dea:	6822      	ldr	r2, [r4, #0]
 8008dec:	f022 0220 	bic.w	r2, r2, #32
 8008df0:	6022      	str	r2, [r4, #0]
 8008df2:	2210      	movs	r2, #16
 8008df4:	e7b7      	b.n	8008d66 <_printf_i+0xd2>
 8008df6:	064d      	lsls	r5, r1, #25
 8008df8:	bf48      	it	mi
 8008dfa:	b29b      	uxthmi	r3, r3
 8008dfc:	e7ef      	b.n	8008dde <_printf_i+0x14a>
 8008dfe:	4665      	mov	r5, ip
 8008e00:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e04:	fb02 3311 	mls	r3, r2, r1, r3
 8008e08:	5cc3      	ldrb	r3, [r0, r3]
 8008e0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008e0e:	460b      	mov	r3, r1
 8008e10:	2900      	cmp	r1, #0
 8008e12:	d1f5      	bne.n	8008e00 <_printf_i+0x16c>
 8008e14:	e7b9      	b.n	8008d8a <_printf_i+0xf6>
 8008e16:	6813      	ldr	r3, [r2, #0]
 8008e18:	6825      	ldr	r5, [r4, #0]
 8008e1a:	6961      	ldr	r1, [r4, #20]
 8008e1c:	1d18      	adds	r0, r3, #4
 8008e1e:	6010      	str	r0, [r2, #0]
 8008e20:	0628      	lsls	r0, r5, #24
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	d501      	bpl.n	8008e2a <_printf_i+0x196>
 8008e26:	6019      	str	r1, [r3, #0]
 8008e28:	e002      	b.n	8008e30 <_printf_i+0x19c>
 8008e2a:	066a      	lsls	r2, r5, #25
 8008e2c:	d5fb      	bpl.n	8008e26 <_printf_i+0x192>
 8008e2e:	8019      	strh	r1, [r3, #0]
 8008e30:	2300      	movs	r3, #0
 8008e32:	6123      	str	r3, [r4, #16]
 8008e34:	4665      	mov	r5, ip
 8008e36:	e7b9      	b.n	8008dac <_printf_i+0x118>
 8008e38:	6813      	ldr	r3, [r2, #0]
 8008e3a:	1d19      	adds	r1, r3, #4
 8008e3c:	6011      	str	r1, [r2, #0]
 8008e3e:	681d      	ldr	r5, [r3, #0]
 8008e40:	6862      	ldr	r2, [r4, #4]
 8008e42:	2100      	movs	r1, #0
 8008e44:	4628      	mov	r0, r5
 8008e46:	f7f7 f9c3 	bl	80001d0 <memchr>
 8008e4a:	b108      	cbz	r0, 8008e50 <_printf_i+0x1bc>
 8008e4c:	1b40      	subs	r0, r0, r5
 8008e4e:	6060      	str	r0, [r4, #4]
 8008e50:	6863      	ldr	r3, [r4, #4]
 8008e52:	6123      	str	r3, [r4, #16]
 8008e54:	2300      	movs	r3, #0
 8008e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e5a:	e7a7      	b.n	8008dac <_printf_i+0x118>
 8008e5c:	6923      	ldr	r3, [r4, #16]
 8008e5e:	462a      	mov	r2, r5
 8008e60:	4639      	mov	r1, r7
 8008e62:	4630      	mov	r0, r6
 8008e64:	47c0      	blx	r8
 8008e66:	3001      	adds	r0, #1
 8008e68:	d0aa      	beq.n	8008dc0 <_printf_i+0x12c>
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	079b      	lsls	r3, r3, #30
 8008e6e:	d413      	bmi.n	8008e98 <_printf_i+0x204>
 8008e70:	68e0      	ldr	r0, [r4, #12]
 8008e72:	9b03      	ldr	r3, [sp, #12]
 8008e74:	4298      	cmp	r0, r3
 8008e76:	bfb8      	it	lt
 8008e78:	4618      	movlt	r0, r3
 8008e7a:	e7a3      	b.n	8008dc4 <_printf_i+0x130>
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	464a      	mov	r2, r9
 8008e80:	4639      	mov	r1, r7
 8008e82:	4630      	mov	r0, r6
 8008e84:	47c0      	blx	r8
 8008e86:	3001      	adds	r0, #1
 8008e88:	d09a      	beq.n	8008dc0 <_printf_i+0x12c>
 8008e8a:	3501      	adds	r5, #1
 8008e8c:	68e3      	ldr	r3, [r4, #12]
 8008e8e:	9a03      	ldr	r2, [sp, #12]
 8008e90:	1a9b      	subs	r3, r3, r2
 8008e92:	42ab      	cmp	r3, r5
 8008e94:	dcf2      	bgt.n	8008e7c <_printf_i+0x1e8>
 8008e96:	e7eb      	b.n	8008e70 <_printf_i+0x1dc>
 8008e98:	2500      	movs	r5, #0
 8008e9a:	f104 0919 	add.w	r9, r4, #25
 8008e9e:	e7f5      	b.n	8008e8c <_printf_i+0x1f8>
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1ac      	bne.n	8008dfe <_printf_i+0x16a>
 8008ea4:	7803      	ldrb	r3, [r0, #0]
 8008ea6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008eaa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008eae:	e76c      	b.n	8008d8a <_printf_i+0xf6>
 8008eb0:	08009902 	.word	0x08009902
 8008eb4:	08009913 	.word	0x08009913

08008eb8 <_read_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4c07      	ldr	r4, [pc, #28]	; (8008ed8 <_read_r+0x20>)
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	4608      	mov	r0, r1
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	6022      	str	r2, [r4, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	f7f7 fa36 	bl	8000338 <_read>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	d102      	bne.n	8008ed6 <_read_r+0x1e>
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	b103      	cbz	r3, 8008ed6 <_read_r+0x1e>
 8008ed4:	602b      	str	r3, [r5, #0]
 8008ed6:	bd38      	pop	{r3, r4, r5, pc}
 8008ed8:	200029fc 	.word	0x200029fc

08008edc <_fstat_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4c07      	ldr	r4, [pc, #28]	; (8008efc <_fstat_r+0x20>)
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	4608      	mov	r0, r1
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	f7f7 fa1c 	bl	8000326 <_fstat>
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	d102      	bne.n	8008ef8 <_fstat_r+0x1c>
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	b103      	cbz	r3, 8008ef8 <_fstat_r+0x1c>
 8008ef6:	602b      	str	r3, [r5, #0]
 8008ef8:	bd38      	pop	{r3, r4, r5, pc}
 8008efa:	bf00      	nop
 8008efc:	200029fc 	.word	0x200029fc

08008f00 <_isatty_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4c06      	ldr	r4, [pc, #24]	; (8008f1c <_isatty_r+0x1c>)
 8008f04:	2300      	movs	r3, #0
 8008f06:	4605      	mov	r5, r0
 8008f08:	4608      	mov	r0, r1
 8008f0a:	6023      	str	r3, [r4, #0]
 8008f0c:	f7f7 fa10 	bl	8000330 <_isatty>
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	d102      	bne.n	8008f1a <_isatty_r+0x1a>
 8008f14:	6823      	ldr	r3, [r4, #0]
 8008f16:	b103      	cbz	r3, 8008f1a <_isatty_r+0x1a>
 8008f18:	602b      	str	r3, [r5, #0]
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	200029fc 	.word	0x200029fc

08008f20 <memmove>:
 8008f20:	4288      	cmp	r0, r1
 8008f22:	b510      	push	{r4, lr}
 8008f24:	eb01 0302 	add.w	r3, r1, r2
 8008f28:	d807      	bhi.n	8008f3a <memmove+0x1a>
 8008f2a:	1e42      	subs	r2, r0, #1
 8008f2c:	4299      	cmp	r1, r3
 8008f2e:	d00a      	beq.n	8008f46 <memmove+0x26>
 8008f30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f34:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008f38:	e7f8      	b.n	8008f2c <memmove+0xc>
 8008f3a:	4283      	cmp	r3, r0
 8008f3c:	d9f5      	bls.n	8008f2a <memmove+0xa>
 8008f3e:	1881      	adds	r1, r0, r2
 8008f40:	1ad2      	subs	r2, r2, r3
 8008f42:	42d3      	cmn	r3, r2
 8008f44:	d100      	bne.n	8008f48 <memmove+0x28>
 8008f46:	bd10      	pop	{r4, pc}
 8008f48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f4c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008f50:	e7f7      	b.n	8008f42 <memmove+0x22>

08008f52 <_realloc_r>:
 8008f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f54:	4607      	mov	r7, r0
 8008f56:	4614      	mov	r4, r2
 8008f58:	460e      	mov	r6, r1
 8008f5a:	b921      	cbnz	r1, 8008f66 <_realloc_r+0x14>
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f62:	f7ff b897 	b.w	8008094 <_malloc_r>
 8008f66:	b922      	cbnz	r2, 8008f72 <_realloc_r+0x20>
 8008f68:	f7ff f846 	bl	8007ff8 <_free_r>
 8008f6c:	4625      	mov	r5, r4
 8008f6e:	4628      	mov	r0, r5
 8008f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f72:	f000 f814 	bl	8008f9e <_malloc_usable_size_r>
 8008f76:	42a0      	cmp	r0, r4
 8008f78:	d20f      	bcs.n	8008f9a <_realloc_r+0x48>
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	4638      	mov	r0, r7
 8008f7e:	f7ff f889 	bl	8008094 <_malloc_r>
 8008f82:	4605      	mov	r5, r0
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d0f2      	beq.n	8008f6e <_realloc_r+0x1c>
 8008f88:	4631      	mov	r1, r6
 8008f8a:	4622      	mov	r2, r4
 8008f8c:	f7ff f820 	bl	8007fd0 <memcpy>
 8008f90:	4631      	mov	r1, r6
 8008f92:	4638      	mov	r0, r7
 8008f94:	f7ff f830 	bl	8007ff8 <_free_r>
 8008f98:	e7e9      	b.n	8008f6e <_realloc_r+0x1c>
 8008f9a:	4635      	mov	r5, r6
 8008f9c:	e7e7      	b.n	8008f6e <_realloc_r+0x1c>

08008f9e <_malloc_usable_size_r>:
 8008f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fa2:	1f18      	subs	r0, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	bfbc      	itt	lt
 8008fa8:	580b      	ldrlt	r3, [r1, r0]
 8008faa:	18c0      	addlt	r0, r0, r3
 8008fac:	4770      	bx	lr
	...

08008fb0 <_init>:
 8008fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb2:	bf00      	nop
 8008fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb6:	bc08      	pop	{r3}
 8008fb8:	469e      	mov	lr, r3
 8008fba:	4770      	bx	lr

08008fbc <_fini>:
 8008fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fbe:	bf00      	nop
 8008fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc2:	bc08      	pop	{r3}
 8008fc4:	469e      	mov	lr, r3
 8008fc6:	4770      	bx	lr
